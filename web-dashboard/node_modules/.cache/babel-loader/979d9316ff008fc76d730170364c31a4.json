{"ast":null,"code":"import axios from 'axios';\nimport toast from 'react-hot-toast';\n\n// Configurazione base API\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\nclass ApiClient {\n  constructor() {\n    this.client = void 0;\n    this.token = null;\n    this.client = axios.create({\n      baseURL: API_BASE_URL,\n      timeout: 30000,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    this.setupInterceptors();\n  }\n  setupInterceptors() {\n    // Request interceptor - aggiunge token\n    this.client.interceptors.request.use(config => {\n      const token = this.token || localStorage.getItem('auth_token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    }, error => Promise.reject(error));\n\n    // Response interceptor - gestisce errori globali\n    this.client.interceptors.response.use(response => response, error => {\n      var _error$response, _error$response2;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        localStorage.removeItem('auth_token');\n        window.location.href = '/login';\n      }\n      if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) >= 500) {\n        toast.error('Errore del server. Riprova piÃ¹ tardi.');\n      }\n      return Promise.reject(error);\n    });\n  }\n  setToken(token) {\n    this.token = token;\n  }\n  async request(config) {\n    const response = await this.client.request(config);\n    if (!response.data.success) {\n      throw new Error(response.data.message || 'Errore API');\n    }\n    return response.data.data;\n  }\n\n  // ===== AUTH ENDPOINTS =====\n  async login(email, password) {\n    return this.request({\n      method: 'POST',\n      url: '/auth/login',\n      data: {\n        email,\n        password\n      }\n    });\n  }\n  async verifyToken(token) {\n    return this.request({\n      method: 'GET',\n      url: '/auth/verify',\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  }\n  async refreshToken(token) {\n    return this.request({\n      method: 'POST',\n      url: '/auth/refresh',\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  }\n\n  // ===== DASHBOARD ENDPOINTS =====\n  async getDashboardOverview() {\n    return this.request({\n      method: 'GET',\n      url: '/web/dashboard/overview'\n    });\n  }\n\n  // ===== BOT MANAGEMENT =====\n  async getBotStatus() {\n    return this.request({\n      method: 'GET',\n      url: '/web/bot/status'\n    });\n  }\n  async restartBot() {\n    return this.request({\n      method: 'POST',\n      url: '/web/bot/restart'\n    });\n  }\n  async deployCommands() {\n    return this.request({\n      method: 'POST',\n      url: '/web/bot/deploy-commands'\n    });\n  }\n  async sendBotMessage(channelId, message) {\n    return this.request({\n      method: 'POST',\n      url: '/web/bot/send-message',\n      data: {\n        channelId,\n        message\n      }\n    });\n  }\n\n  // ===== SHIPPING MANAGEMENT =====\n  async getShippingStats(dateRange) {\n    return this.request({\n      method: 'GET',\n      url: '/web/shipping/stats',\n      params: dateRange\n    });\n  }\n  async getQueueStatus() {\n    return this.request({\n      method: 'GET',\n      url: '/shipping/queue'\n    });\n  }\n  async getShippingOrders(params) {\n    const response = await this.client.get('/web/shipping/orders', {\n      params\n    });\n    return response.data;\n  }\n  async cancelShippingOrder(orderId) {\n    return this.request({\n      method: 'DELETE',\n      url: `/shipping/orders/${orderId}`\n    });\n  }\n  async getShippingAnalytics() {\n    return this.request({\n      method: 'GET',\n      url: '/web/shipping/analytics'\n    });\n  }\n\n  // ===== FINANCIAL MANAGEMENT =====\n  async getFinancialData() {\n    return this.request({\n      method: 'GET',\n      url: '/web/finance/overview'\n    });\n  }\n  async updateBudgetLimits(limits) {\n    return this.request({\n      method: 'PUT',\n      url: '/web/finance/budget-limits',\n      data: limits\n    });\n  }\n  async acknowledgeFinancialAlert(alertId) {\n    return this.request({\n      method: 'POST',\n      url: `/web/finance/alerts/${alertId}/acknowledge`\n    });\n  }\n\n  // ===== USER MANAGEMENT =====\n  async getBotUsers(params) {\n    const response = await this.client.get('/web/users', {\n      params\n    });\n    return response.data;\n  }\n  async getBotUser(userId) {\n    return this.request({\n      method: 'GET',\n      url: `/web/users/${userId}`\n    });\n  }\n  async updateUserCredits(userId, amount, reason) {\n    return this.request({\n      method: 'PUT',\n      url: `/web/users/${userId}/credits`,\n      data: {\n        amount,\n        reason\n      }\n    });\n  }\n  async blockUser(userId, reason) {\n    return this.request({\n      method: 'POST',\n      url: `/web/users/${userId}/block`,\n      data: {\n        reason\n      }\n    });\n  }\n  async unblockUser(userId) {\n    return this.request({\n      method: 'POST',\n      url: `/web/users/${userId}/unblock`\n    });\n  }\n\n  // ===== LOGS & MONITORING =====\n  async getLogs(params) {\n    const response = await this.client.get('/web/logs', {\n      params\n    });\n    return response.data;\n  }\n  async getSystemHealth() {\n    return this.request({\n      method: 'GET',\n      url: '/web/system/health'\n    });\n  }\n  async getAlerts(acknowledged = false) {\n    return this.request({\n      method: 'GET',\n      url: '/web/alerts',\n      params: {\n        acknowledged\n      }\n    });\n  }\n  async acknowledgeAlert(alertId) {\n    return this.request({\n      method: 'POST',\n      url: `/web/alerts/${alertId}/acknowledge`\n    });\n  }\n\n  // ===== ANALYTICS =====\n  async getAdvancedAnalytics(type, params) {\n    return this.request({\n      method: 'GET',\n      url: `/web/analytics/${type}`,\n      params\n    });\n  }\n  async exportData(type, format, params) {\n    const response = await this.client.get(`/web/export/${type}`, {\n      params: {\n        format,\n        ...params\n      },\n      responseType: 'blob'\n    });\n    return response.data;\n  }\n\n  // ===== AUTOMATION =====\n  async getAutomationRules() {\n    return this.request({\n      method: 'GET',\n      url: '/web/automation/rules'\n    });\n  }\n  async createAutomationRule(rule) {\n    return this.request({\n      method: 'POST',\n      url: '/web/automation/rules',\n      data: rule\n    });\n  }\n  async updateAutomationRule(ruleId, updates) {\n    return this.request({\n      method: 'PUT',\n      url: `/web/automation/rules/${ruleId}`,\n      data: updates\n    });\n  }\n  async deleteAutomationRule(ruleId) {\n    return this.request({\n      method: 'DELETE',\n      url: `/web/automation/rules/${ruleId}`\n    });\n  }\n}\n\n// Istanza singleton\nconst apiClient = new ApiClient();\n\n// Export oggetti API specifici\nexport const authApi = {\n  login: (email, password) => apiClient.login(email, password),\n  verifyToken: token => apiClient.verifyToken(token),\n  refreshToken: token => apiClient.refreshToken(token)\n};\nexport const dashboardApi = {\n  getOverview: () => apiClient.getDashboardOverview()\n};\nexport const botApi = {\n  getStatus: () => apiClient.getBotStatus(),\n  restart: () => apiClient.restartBot(),\n  deployCommands: () => apiClient.deployCommands(),\n  sendMessage: (channelId, message) => apiClient.sendBotMessage(channelId, message)\n};\nexport const shippingApi = {\n  getStats: dateRange => apiClient.getShippingStats(dateRange),\n  getQueueStatus: () => apiClient.getQueueStatus(),\n  getOrders: params => apiClient.getShippingOrders(params),\n  cancelOrder: orderId => apiClient.cancelShippingOrder(orderId),\n  getAnalytics: () => apiClient.getShippingAnalytics()\n};\nexport const financeApi = {\n  getData: () => apiClient.getFinancialData(),\n  updateBudgetLimits: limits => apiClient.updateBudgetLimits(limits),\n  acknowledgeAlert: alertId => apiClient.acknowledgeFinancialAlert(alertId)\n};\nexport const usersApi = {\n  getUsers: params => apiClient.getBotUsers(params),\n  getUser: userId => apiClient.getBotUser(userId),\n  updateCredits: (userId, amount, reason) => apiClient.updateUserCredits(userId, amount, reason),\n  blockUser: (userId, reason) => apiClient.blockUser(userId, reason),\n  unblockUser: userId => apiClient.unblockUser(userId)\n};\nexport const systemApi = {\n  getHealth: () => apiClient.getSystemHealth(),\n  getLogs: params => apiClient.getLogs(params),\n  getAlerts: acknowledged => apiClient.getAlerts(acknowledged),\n  acknowledgeAlert: alertId => apiClient.acknowledgeAlert(alertId)\n};\nexport const analyticsApi = {\n  getAdvanced: (type, params) => apiClient.getAdvancedAnalytics(type, params),\n  exportData: (type, format, params) => apiClient.exportData(type, format, params)\n};\nexport const automationApi = {\n  getRules: () => apiClient.getAutomationRules(),\n  createRule: rule => apiClient.createAutomationRule(rule),\n  updateRule: (ruleId, updates) => apiClient.updateAutomationRule(ruleId, updates),\n  deleteRule: ruleId => apiClient.deleteAutomationRule(ruleId)\n};\nexport default apiClient;","map":{"version":3,"names":["axios","toast","API_BASE_URL","process","env","REACT_APP_API_URL","ApiClient","constructor","client","token","create","baseURL","timeout","headers","setupInterceptors","interceptors","request","use","config","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","_error$response2","status","removeItem","window","location","href","setToken","data","success","Error","message","login","email","password","method","url","verifyToken","refreshToken","getDashboardOverview","getBotStatus","restartBot","deployCommands","sendBotMessage","channelId","getShippingStats","dateRange","params","getQueueStatus","getShippingOrders","get","cancelShippingOrder","orderId","getShippingAnalytics","getFinancialData","updateBudgetLimits","limits","acknowledgeFinancialAlert","alertId","getBotUsers","getBotUser","userId","updateUserCredits","amount","reason","blockUser","unblockUser","getLogs","getSystemHealth","getAlerts","acknowledged","acknowledgeAlert","getAdvancedAnalytics","type","exportData","format","responseType","getAutomationRules","createAutomationRule","rule","updateAutomationRule","ruleId","updates","deleteAutomationRule","apiClient","authApi","dashboardApi","getOverview","botApi","getStatus","restart","sendMessage","shippingApi","getStats","getOrders","cancelOrder","getAnalytics","financeApi","getData","usersApi","getUsers","getUser","updateCredits","systemApi","getHealth","analyticsApi","getAdvanced","automationApi","getRules","createRule","updateRule","deleteRule"],"sources":["/Users/samuelebelfiore/Downloads/discord-bot-main/web-dashboard/src/services/api.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { \n  ApiResponse, \n  User, \n  BotStatus, \n  ShippingOrder, \n  ShippingStats, \n  QueueStatus, \n  FinancialData, \n  BotUser, \n  SystemHealth, \n  LogEntry,\n  PaginatedResponse,\n  KPI,\n  Alert\n} from '../types';\nimport toast from 'react-hot-toast';\n\n// Configurazione base API\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\n\nclass ApiClient {\n  private client: AxiosInstance;\n  private token: string | null = null;\n\n  constructor() {\n    this.client = axios.create({\n      baseURL: API_BASE_URL,\n      timeout: 30000,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    this.setupInterceptors();\n  }\n\n  private setupInterceptors() {\n    // Request interceptor - aggiunge token\n    this.client.interceptors.request.use(\n      (config) => {\n        const token = this.token || localStorage.getItem('auth_token');\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n      },\n      (error) => Promise.reject(error)\n    );\n\n    // Response interceptor - gestisce errori globali\n    this.client.interceptors.response.use(\n      (response) => response,\n      (error) => {\n        if (error.response?.status === 401) {\n          localStorage.removeItem('auth_token');\n          window.location.href = '/login';\n        }\n        \n        if (error.response?.status >= 500) {\n          toast.error('Errore del server. Riprova piÃ¹ tardi.');\n        }\n        \n        return Promise.reject(error);\n      }\n    );\n  }\n\n  setToken(token: string) {\n    this.token = token;\n  }\n\n  private async request<T>(config: AxiosRequestConfig): Promise<T> {\n    const response = await this.client.request<ApiResponse<T>>(config);\n    \n    if (!response.data.success) {\n      throw new Error(response.data.message || 'Errore API');\n    }\n    \n    return response.data.data!;\n  }\n\n  // ===== AUTH ENDPOINTS =====\n  async login(email: string, password: string): Promise<{ user: User; token: string }> {\n    return this.request({\n      method: 'POST',\n      url: '/auth/login',\n      data: { email, password }\n    });\n  }\n\n  async verifyToken(token: string): Promise<User> {\n    return this.request({\n      method: 'GET',\n      url: '/auth/verify',\n      headers: { Authorization: `Bearer ${token}` }\n    });\n  }\n\n  async refreshToken(token: string): Promise<{ user: User; token: string }> {\n    return this.request({\n      method: 'POST',\n      url: '/auth/refresh',\n      headers: { Authorization: `Bearer ${token}` }\n    });\n  }\n\n  // ===== DASHBOARD ENDPOINTS =====\n  async getDashboardOverview(): Promise<{\n    kpis: KPI[];\n    recentActivity: any[];\n    systemHealth: SystemHealth;\n    alerts: Alert[];\n  }> {\n    return this.request({\n      method: 'GET',\n      url: '/web/dashboard/overview'\n    });\n  }\n\n  // ===== BOT MANAGEMENT =====\n  async getBotStatus(): Promise<BotStatus> {\n    return this.request({\n      method: 'GET',\n      url: '/web/bot/status'\n    });\n  }\n\n  async restartBot(): Promise<{ success: boolean; message: string }> {\n    return this.request({\n      method: 'POST',\n      url: '/web/bot/restart'\n    });\n  }\n\n  async deployCommands(): Promise<{ success: boolean; message: string }> {\n    return this.request({\n      method: 'POST',\n      url: '/web/bot/deploy-commands'\n    });\n  }\n\n  async sendBotMessage(channelId: string, message: string): Promise<{ success: boolean }> {\n    return this.request({\n      method: 'POST',\n      url: '/web/bot/send-message',\n      data: { channelId, message }\n    });\n  }\n\n  // ===== SHIPPING MANAGEMENT =====\n  async getShippingStats(dateRange?: { start: string; end: string }): Promise<ShippingStats> {\n    return this.request({\n      method: 'GET',\n      url: '/web/shipping/stats',\n      params: dateRange\n    });\n  }\n\n  async getQueueStatus(): Promise<QueueStatus> {\n    return this.request({\n      method: 'GET',\n      url: '/shipping/queue'\n    });\n  }\n\n  async getShippingOrders(params: {\n    page?: number;\n    limit?: number;\n    status?: string;\n    userId?: string;\n    dateRange?: { start: string; end: string };\n  }): Promise<PaginatedResponse<ShippingOrder>> {\n    const response = await this.client.get('/web/shipping/orders', { params });\n    return response.data;\n  }\n\n  async cancelShippingOrder(orderId: string): Promise<{ success: boolean; message: string }> {\n    return this.request({\n      method: 'DELETE',\n      url: `/shipping/orders/${orderId}`\n    });\n  }\n\n  async getShippingAnalytics(): Promise<{\n    hourlyDistribution: Array<{ hour: number; orders: number }>;\n    carrierPerformance: Array<{ carrier: string; avgTime: number; successRate: number }>;\n    geographicDistribution: Array<{ country: string; orders: number; revenue: number }>;\n    trendsAnalysis: Array<{ date: string; orders: number; revenue: number }>;\n  }> {\n    return this.request({\n      method: 'GET',\n      url: '/web/shipping/analytics'\n    });\n  }\n\n  // ===== FINANCIAL MANAGEMENT =====\n  async getFinancialData(): Promise<FinancialData> {\n    return this.request({\n      method: 'GET',\n      url: '/web/finance/overview'\n    });\n  }\n\n  async updateBudgetLimits(limits: {\n    daily: number;\n    weekly: number;\n    monthly: number;\n  }): Promise<{ success: boolean }> {\n    return this.request({\n      method: 'PUT',\n      url: '/web/finance/budget-limits',\n      data: limits\n    });\n  }\n\n  async acknowledgeFinancialAlert(alertId: string): Promise<{ success: boolean }> {\n    return this.request({\n      method: 'POST',\n      url: `/web/finance/alerts/${alertId}/acknowledge`\n    });\n  }\n\n  // ===== USER MANAGEMENT =====\n  async getBotUsers(params: {\n    page?: number;\n    limit?: number;\n    search?: string;\n    sortBy?: string;\n    orderBy?: 'asc' | 'desc';\n  }): Promise<PaginatedResponse<BotUser>> {\n    const response = await this.client.get('/web/users', { params });\n    return response.data;\n  }\n\n  async getBotUser(userId: string): Promise<BotUser> {\n    return this.request({\n      method: 'GET',\n      url: `/web/users/${userId}`\n    });\n  }\n\n  async updateUserCredits(userId: string, amount: number, reason: string): Promise<{ success: boolean }> {\n    return this.request({\n      method: 'PUT',\n      url: `/web/users/${userId}/credits`,\n      data: { amount, reason }\n    });\n  }\n\n  async blockUser(userId: string, reason: string): Promise<{ success: boolean }> {\n    return this.request({\n      method: 'POST',\n      url: `/web/users/${userId}/block`,\n      data: { reason }\n    });\n  }\n\n  async unblockUser(userId: string): Promise<{ success: boolean }> {\n    return this.request({\n      method: 'POST',\n      url: `/web/users/${userId}/unblock`\n    });\n  }\n\n  // ===== LOGS & MONITORING =====\n  async getLogs(params: {\n    page?: number;\n    limit?: number;\n    level?: string;\n    source?: string;\n    search?: string;\n    dateRange?: { start: string; end: string };\n  }): Promise<PaginatedResponse<LogEntry>> {\n    const response = await this.client.get('/web/logs', { params });\n    return response.data;\n  }\n\n  async getSystemHealth(): Promise<SystemHealth> {\n    return this.request({\n      method: 'GET',\n      url: '/web/system/health'\n    });\n  }\n\n  async getAlerts(acknowledged: boolean = false): Promise<Alert[]> {\n    return this.request({\n      method: 'GET',\n      url: '/web/alerts',\n      params: { acknowledged }\n    });\n  }\n\n  async acknowledgeAlert(alertId: string): Promise<{ success: boolean }> {\n    return this.request({\n      method: 'POST',\n      url: `/web/alerts/${alertId}/acknowledge`\n    });\n  }\n\n  // ===== ANALYTICS =====\n  async getAdvancedAnalytics(type: string, params?: any): Promise<any> {\n    return this.request({\n      method: 'GET',\n      url: `/web/analytics/${type}`,\n      params\n    });\n  }\n\n  async exportData(type: string, format: 'csv' | 'json', params?: any): Promise<Blob> {\n    const response = await this.client.get(`/web/export/${type}`, {\n      params: { format, ...params },\n      responseType: 'blob'\n    });\n    return response.data;\n  }\n\n  // ===== AUTOMATION =====\n  async getAutomationRules(): Promise<any[]> {\n    return this.request({\n      method: 'GET',\n      url: '/web/automation/rules'\n    });\n  }\n\n  async createAutomationRule(rule: any): Promise<{ success: boolean; id: string }> {\n    return this.request({\n      method: 'POST',\n      url: '/web/automation/rules',\n      data: rule\n    });\n  }\n\n  async updateAutomationRule(ruleId: string, updates: any): Promise<{ success: boolean }> {\n    return this.request({\n      method: 'PUT',\n      url: `/web/automation/rules/${ruleId}`,\n      data: updates\n    });\n  }\n\n  async deleteAutomationRule(ruleId: string): Promise<{ success: boolean }> {\n    return this.request({\n      method: 'DELETE',\n      url: `/web/automation/rules/${ruleId}`\n    });\n  }\n}\n\n// Istanza singleton\nconst apiClient = new ApiClient();\n\n// Export oggetti API specifici\nexport const authApi = {\n  login: (email: string, password: string) => apiClient.login(email, password),\n  verifyToken: (token: string) => apiClient.verifyToken(token),\n  refreshToken: (token: string) => apiClient.refreshToken(token),\n};\n\nexport const dashboardApi = {\n  getOverview: () => apiClient.getDashboardOverview(),\n};\n\nexport const botApi = {\n  getStatus: () => apiClient.getBotStatus(),\n  restart: () => apiClient.restartBot(),\n  deployCommands: () => apiClient.deployCommands(),\n  sendMessage: (channelId: string, message: string) => apiClient.sendBotMessage(channelId, message),\n};\n\nexport const shippingApi = {\n  getStats: (dateRange?: { start: string; end: string }) => apiClient.getShippingStats(dateRange),\n  getQueueStatus: () => apiClient.getQueueStatus(),\n  getOrders: (params: any) => apiClient.getShippingOrders(params),\n  cancelOrder: (orderId: string) => apiClient.cancelShippingOrder(orderId),\n  getAnalytics: () => apiClient.getShippingAnalytics(),\n};\n\nexport const financeApi = {\n  getData: () => apiClient.getFinancialData(),\n  updateBudgetLimits: (limits: any) => apiClient.updateBudgetLimits(limits),\n  acknowledgeAlert: (alertId: string) => apiClient.acknowledgeFinancialAlert(alertId),\n};\n\nexport const usersApi = {\n  getUsers: (params: any) => apiClient.getBotUsers(params),\n  getUser: (userId: string) => apiClient.getBotUser(userId),\n  updateCredits: (userId: string, amount: number, reason: string) => \n    apiClient.updateUserCredits(userId, amount, reason),\n  blockUser: (userId: string, reason: string) => apiClient.blockUser(userId, reason),\n  unblockUser: (userId: string) => apiClient.unblockUser(userId),\n};\n\nexport const systemApi = {\n  getHealth: () => apiClient.getSystemHealth(),\n  getLogs: (params: any) => apiClient.getLogs(params),\n  getAlerts: (acknowledged?: boolean) => apiClient.getAlerts(acknowledged),\n  acknowledgeAlert: (alertId: string) => apiClient.acknowledgeAlert(alertId),\n};\n\nexport const analyticsApi = {\n  getAdvanced: (type: string, params?: any) => apiClient.getAdvancedAnalytics(type, params),\n  exportData: (type: string, format: 'csv' | 'json', params?: any) => \n    apiClient.exportData(type, format, params),\n};\n\nexport const automationApi = {\n  getRules: () => apiClient.getAutomationRules(),\n  createRule: (rule: any) => apiClient.createAutomationRule(rule),\n  updateRule: (ruleId: string, updates: any) => apiClient.updateAutomationRule(ruleId, updates),\n  deleteRule: (ruleId: string) => apiClient.deleteAutomationRule(ruleId),\n};\n\nexport default apiClient;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}