[{"/Users/samuelebelfiore/Downloads/discord-bot-main/web-dashboard/src/index.tsx":"1","/Users/samuelebelfiore/Downloads/discord-bot-main/web-dashboard/src/App.tsx":"2","/Users/samuelebelfiore/Downloads/discord-bot-main/web-dashboard/src/hooks/useAuth.ts":"3","/Users/samuelebelfiore/Downloads/discord-bot-main/web-dashboard/src/pages/Login.tsx":"4","/Users/samuelebelfiore/Downloads/discord-bot-main/web-dashboard/src/pages/Dashboard.tsx":"5","/Users/samuelebelfiore/Downloads/discord-bot-main/web-dashboard/src/components/UserManagement.tsx":"6","/Users/samuelebelfiore/Downloads/discord-bot-main/web-dashboard/src/components/AdvancedAnalytics.tsx":"7","/Users/samuelebelfiore/Downloads/discord-bot-main/web-dashboard/src/components/LoadingSpinner.tsx":"8","/Users/samuelebelfiore/Downloads/discord-bot-main/web-dashboard/src/components/Layout/DashboardLayout.tsx":"9","/Users/samuelebelfiore/Downloads/discord-bot-main/web-dashboard/src/services/api.ts":"10","/Users/samuelebelfiore/Downloads/discord-bot-main/web-dashboard/src/hooks/useWebSocket.ts":"11","/Users/samuelebelfiore/Downloads/discord-bot-main/web-dashboard/src/components/StatusBadge.tsx":"12","/Users/samuelebelfiore/Downloads/discord-bot-main/web-dashboard/src/components/KPICard.tsx":"13","/Users/samuelebelfiore/Downloads/discord-bot-main/web-dashboard/src/components/NotificationCenter.tsx":"14","/Users/samuelebelfiore/Downloads/discord-bot-main/web-dashboard/src/components/CommandPalette/CommandPalette.tsx":"15","/Users/samuelebelfiore/Downloads/discord-bot-main/web-dashboard/src/components/StatusIndicator/StatusIndicator.tsx":"16","/Users/samuelebelfiore/Downloads/discord-bot-main/web-dashboard/src/components/UserMenu/UserMenu.tsx":"17"},{"size":273,"mtime":1755194840607,"results":"18","hashOfConfig":"19"},{"size":2708,"mtime":1755276336310,"results":"20","hashOfConfig":"19"},{"size":4290,"mtime":1755193533666,"results":"21","hashOfConfig":"19"},{"size":12210,"mtime":1755194013460,"results":"22","hashOfConfig":"19"},{"size":12832,"mtime":1755193815688,"results":"23","hashOfConfig":"19"},{"size":18184,"mtime":1755276057525,"results":"24","hashOfConfig":"19"},{"size":20196,"mtime":1755276129368,"results":"25","hashOfConfig":"19"},{"size":1463,"mtime":1755193858964,"results":"26","hashOfConfig":"19"},{"size":11506,"mtime":1755276353707,"results":"27","hashOfConfig":"19"},{"size":11456,"mtime":1755193574293,"results":"28","hashOfConfig":"19"},{"size":6489,"mtime":1755276155207,"results":"29","hashOfConfig":"19"},{"size":2363,"mtime":1755193849696,"results":"30","hashOfConfig":"19"},{"size":4508,"mtime":1755193836737,"results":"31","hashOfConfig":"19"},{"size":14495,"mtime":1755276200983,"results":"32","hashOfConfig":"19"},{"size":12699,"mtime":1755194060217,"results":"33","hashOfConfig":"19"},{"size":3021,"mtime":1755194868087,"results":"34","hashOfConfig":"19"},{"size":4871,"mtime":1755194890446,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},"170h42i",{"filePath":"39","messages":"40","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},"/Users/samuelebelfiore/Downloads/discord-bot-main/web-dashboard/src/index.tsx",["87"],"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\n\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);","/Users/samuelebelfiore/Downloads/discord-bot-main/web-dashboard/src/App.tsx",["88"],"import React from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport { Toaster } from 'react-hot-toast';\nimport useAuth from './hooks/useAuth';\nimport DashboardLayout from './components/Layout/DashboardLayout';\nimport Login from './pages/Login';\nimport Dashboard from './pages/Dashboard';\nimport LoadingSpinner from './components/LoadingSpinner';\nimport UserManagement from './components/UserManagement';\nimport AdvancedAnalytics from './components/AdvancedAnalytics';\n\n// Protected Route component\nconst ProtectedRoute: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900\">\n        <LoadingSpinner size=\"large\" text=\"Caricamento...\" />\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return <Navigate to=\"/login\" replace />;\n  }\n\n  return <>{children}</>;\n};\n\n// Main App component\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Routes>\n          {/* Public route */}\n          <Route path=\"/login\" element={<Login />} />\n          \n          {/* Protected routes */}\n          <Route\n            path=\"/*\"\n            element={\n              <ProtectedRoute>\n                <DashboardLayout>\n                  <Routes>\n                    <Route index element={<Dashboard />} />\n                    <Route path=\"shipping\" element={<div>Shipping Page</div>} />\n                    <Route path=\"users\" element={<UserManagement />} />\n                    <Route path=\"finance\" element={<div>Finance Page</div>} />\n                    <Route path=\"analytics\" element={<AdvancedAnalytics />} />\n                    <Route path=\"logs\" element={<div>Logs Page</div>} />\n                    <Route path=\"settings\" element={<div>Settings Page</div>} />\n                    <Route path=\"*\" element={<Navigate to=\"/\" replace />} />\n                  </Routes>\n                </DashboardLayout>\n              </ProtectedRoute>\n            }\n          />\n        </Routes>\n\n        {/* Toast notifications */}\n        <Toaster\n          position=\"top-right\"\n          toastOptions={{\n            duration: 4000,\n            style: {\n              background: '#363636',\n              color: '#fff',\n            },\n            success: {\n              style: {\n                background: '#059669',\n              },\n            },\n            error: {\n              style: {\n                background: '#dc2626',\n              },\n            },\n          }}\n        />\n      </div>\n    </Router>\n  );\n};\n\nexport default App;","/Users/samuelebelfiore/Downloads/discord-bot-main/web-dashboard/src/hooks/useAuth.ts",["89"],"import { useState, useEffect, useCallback } from 'react';\nimport { User, AuthState } from '../types';\nimport { authApi } from '../services/api';\nimport toast from 'react-hot-toast';\n\ninterface AuthHook extends AuthState {\n  login: (email: string, password: string) => Promise<boolean>;\n  logout: () => void;\n  refreshToken: () => Promise<boolean>;\n  hasPermission: (permission: string) => boolean;\n  hasRole: (role: string) => boolean;\n}\n\nconst useAuth = (): AuthHook => {\n  const [authState, setAuthState] = useState<AuthState>({\n    user: null,\n    token: localStorage.getItem('auth_token'),\n    isAuthenticated: false,\n    isLoading: true,\n  });\n\n  // Verifica token esistente all'avvio\n  useEffect(() => {\n    const initializeAuth = async () => {\n      const token = localStorage.getItem('auth_token');\n      \n      if (!token) {\n        setAuthState(prev => ({ ...prev, isLoading: false }));\n        return;\n      }\n\n      try {\n        const user = await authApi.verifyToken(token);\n        setAuthState({\n          user,\n          token,\n          isAuthenticated: true,\n          isLoading: false,\n        });\n      } catch (error) {\n        // Token invalido, rimuovilo\n        localStorage.removeItem('auth_token');\n        setAuthState({\n          user: null,\n          token: null,\n          isAuthenticated: false,\n          isLoading: false,\n        });\n      }\n    };\n\n    initializeAuth();\n  }, []);\n\n  const login = useCallback(async (email: string, password: string): Promise<boolean> => {\n    setAuthState(prev => ({ ...prev, isLoading: true }));\n    \n    try {\n      const { user, token } = await authApi.login(email, password);\n      \n      localStorage.setItem('auth_token', token);\n      setAuthState({\n        user,\n        token,\n        isAuthenticated: true,\n        isLoading: false,\n      });\n      \n      toast.success(`Benvenuto, ${user.displayName}!`);\n      return true;\n    } catch (error) {\n      setAuthState(prev => ({ \n        ...prev, \n        isLoading: false,\n        user: null,\n        token: null,\n        isAuthenticated: false \n      }));\n      \n      const message = error instanceof Error ? error.message : 'Errore durante il login';\n      toast.error(message);\n      return false;\n    }\n  }, []);\n\n  const logout = useCallback(() => {\n    localStorage.removeItem('auth_token');\n    setAuthState({\n      user: null,\n      token: null,\n      isAuthenticated: false,\n      isLoading: false,\n    });\n    toast.success('Logout effettuato');\n  }, []);\n\n  const refreshToken = useCallback(async (): Promise<boolean> => {\n    const currentToken = authState.token || localStorage.getItem('auth_token');\n    \n    if (!currentToken) {\n      return false;\n    }\n\n    try {\n      const { user, token } = await authApi.refreshToken(currentToken);\n      \n      localStorage.setItem('auth_token', token);\n      setAuthState(prev => ({\n        ...prev,\n        user,\n        token,\n        isAuthenticated: true,\n      }));\n      \n      return true;\n    } catch (error) {\n      logout();\n      return false;\n    }\n  }, [authState.token, logout]);\n\n  const hasPermission = useCallback((permission: string): boolean => {\n    if (!authState.user) return false;\n    \n    // Super admin ha tutti i permessi\n    if (authState.user.role === 'super-admin') return true;\n    \n    return authState.user.permissions.includes(permission);\n  }, [authState.user]);\n\n  const hasRole = useCallback((role: string): boolean => {\n    if (!authState.user) return false;\n    \n    // Gerarchia ruoli: super-admin > admin > viewer\n    const roleHierarchy = ['viewer', 'admin', 'super-admin'];\n    const userRoleIndex = roleHierarchy.indexOf(authState.user.role);\n    const requiredRoleIndex = roleHierarchy.indexOf(role);\n    \n    return userRoleIndex >= requiredRoleIndex;\n  }, [authState.user]);\n\n  // Auto-refresh token ogni 15 minuti\n  useEffect(() => {\n    if (!authState.isAuthenticated || !authState.token) return;\n\n    const refreshInterval = setInterval(() => {\n      refreshToken();\n    }, 15 * 60 * 1000); // 15 minuti\n\n    return () => clearInterval(refreshInterval);\n  }, [authState.isAuthenticated, authState.token, refreshToken]);\n\n  return {\n    ...authState,\n    login,\n    logout,\n    refreshToken,\n    hasPermission,\n    hasRole,\n  };\n};\n\nexport default useAuth;","/Users/samuelebelfiore/Downloads/discord-bot-main/web-dashboard/src/pages/Login.tsx",["90"],"import React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { EyeIcon, EyeSlashIcon } from '@heroicons/react/24/outline';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport useAuth from '../hooks/useAuth';\nimport LoadingSpinner from '../components/LoadingSpinner';\nimport toast from 'react-hot-toast';\n\nconst Login: React.FC = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [rememberMe, setRememberMe] = useState(false);\n\n  const { login, isAuthenticated, isLoading: authLoading } = useAuth();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const from = location.state?.from?.pathname || '/';\n\n  // Redirect se già autenticato\n  useEffect(() => {\n    if (isAuthenticated && !authLoading) {\n      navigate(from, { replace: true });\n    }\n  }, [isAuthenticated, authLoading, navigate, from]);\n\n  // Load saved credentials\n  useEffect(() => {\n    const savedEmail = localStorage.getItem('hyperion_saved_email');\n    const savedRememberMe = localStorage.getItem('hyperion_remember_me') === 'true';\n    \n    if (savedEmail && savedRememberMe) {\n      setEmail(savedEmail);\n      setRememberMe(true);\n    }\n  }, []);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!email || !password) {\n      toast.error('Email e password sono richiesti');\n      return;\n    }\n\n    setIsLoading(true);\n    \n    try {\n      const success = await login(email, password);\n      \n      if (success) {\n        // Save email if remember me is checked\n        if (rememberMe) {\n          localStorage.setItem('hyperion_saved_email', email);\n          localStorage.setItem('hyperion_remember_me', 'true');\n        } else {\n          localStorage.removeItem('hyperion_saved_email');\n          localStorage.removeItem('hyperion_remember_me');\n        }\n        \n        navigate(from, { replace: true });\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const quickLoginOptions = [\n    {\n      role: 'Super Admin',\n      email: 'admin@hyperion.dev',\n      password: 'admin123',\n      description: 'Accesso completo a tutte le funzionalità'\n    },\n    {\n      role: 'Admin',\n      email: 'user@hyperion.dev', \n      password: 'user123',\n      description: 'Gestione shipping e utenti'\n    },\n    {\n      role: 'Viewer',\n      email: 'viewer@hyperion.dev',\n      password: 'viewer123', \n      description: 'Solo visualizzazione'\n    }\n  ];\n\n  const handleQuickLogin = (email: string, password: string) => {\n    setEmail(email);\n    setPassword(password);\n  };\n\n  if (authLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900\">\n        <LoadingSpinner size=\"large\" text=\"Verifica autenticazione...\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex\">\n      {/* Left side - Login Form */}\n      <div className=\"flex-1 flex flex-col justify-center py-12 px-4 sm:px-6 lg:px-20 xl:px-24\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"mx-auto w-full max-w-sm lg:w-96\"\n        >\n          {/* Logo & Header */}\n          <div className=\"text-center mb-8\">\n            <div className=\"mx-auto w-16 h-16 bg-gradient-to-r from-primary-500 to-primary-700 rounded-xl flex items-center justify-center mb-4 shadow-lg\">\n              <span className=\"text-white font-bold text-2xl\">H</span>\n            </div>\n            <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n              Hyperion Dashboard\n            </h2>\n            <p className=\"mt-2 text-gray-600 dark:text-gray-400\">\n              Accedi al pannello di controllo\n            </p>\n          </div>\n\n          {/* Login Form */}\n          <form className=\"space-y-6\" onSubmit={handleSubmit}>\n            <div>\n              <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                Email\n              </label>\n              <input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                autoComplete=\"email\"\n                required\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                className=\"appearance-none rounded-lg relative block w-full px-3 py-3 border border-gray-300 dark:border-gray-600 placeholder-gray-500 dark:placeholder-gray-400 text-gray-900 dark:text-white bg-white dark:bg-gray-800 focus:outline-none focus:ring-primary-500 focus:border-primary-500 focus:z-10 sm:text-sm transition-colors\"\n                placeholder=\"admin@hyperion.dev\"\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                Password\n              </label>\n              <div className=\"relative\">\n                <input\n                  id=\"password\"\n                  name=\"password\"\n                  type={showPassword ? 'text' : 'password'}\n                  autoComplete=\"current-password\"\n                  required\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  className=\"appearance-none rounded-lg relative block w-full px-3 py-3 pr-10 border border-gray-300 dark:border-gray-600 placeholder-gray-500 dark:placeholder-gray-400 text-gray-900 dark:text-white bg-white dark:bg-gray-800 focus:outline-none focus:ring-primary-500 focus:border-primary-500 focus:z-10 sm:text-sm transition-colors\"\n                  placeholder=\"Password\"\n                />\n                <button\n                  type=\"button\"\n                  className=\"absolute inset-y-0 right-0 pr-3 flex items-center\"\n                  onClick={() => setShowPassword(!showPassword)}\n                >\n                  {showPassword ? (\n                    <EyeSlashIcon className=\"h-5 w-5 text-gray-400 hover:text-gray-600\" />\n                  ) : (\n                    <EyeIcon className=\"h-5 w-5 text-gray-400 hover:text-gray-600\" />\n                  )}\n                </button>\n              </div>\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center\">\n                <input\n                  id=\"remember-me\"\n                  name=\"remember-me\"\n                  type=\"checkbox\"\n                  checked={rememberMe}\n                  onChange={(e) => setRememberMe(e.target.checked)}\n                  className=\"h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 dark:border-gray-600 rounded\"\n                />\n                <label htmlFor=\"remember-me\" className=\"ml-2 block text-sm text-gray-700 dark:text-gray-300\">\n                  Ricordami\n                </label>\n              </div>\n            </div>\n\n            <div>\n              <button\n                type=\"submit\"\n                disabled={isLoading}\n                className=\"group relative w-full flex justify-center py-3 px-4 border border-transparent text-sm font-medium rounded-lg text-white bg-gradient-to-r from-primary-500 to-primary-700 hover:from-primary-600 hover:to-primary-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 shadow-lg hover:shadow-xl\"\n              >\n                {isLoading ? (\n                  <LoadingSpinner size=\"sm\" color=\"white\" />\n                ) : (\n                  'Accedi'\n                )}\n              </button>\n            </div>\n          </form>\n\n          {/* Quick Login Demo */}\n          <div className=\"mt-8\">\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <div className=\"w-full border-t border-gray-300 dark:border-gray-600\" />\n              </div>\n              <div className=\"relative flex justify-center text-sm\">\n                <span className=\"px-2 bg-white dark:bg-gray-900 text-gray-500\">\n                  Demo Accounts\n                </span>\n              </div>\n            </div>\n\n            <div className=\"mt-4 space-y-2\">\n              {quickLoginOptions.map((option, index) => (\n                <motion.button\n                  key={option.role}\n                  initial={{ opacity: 0, x: -20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  transition={{ delay: index * 0.1 }}\n                  onClick={() => handleQuickLogin(option.email, option.password)}\n                  className=\"w-full text-left p-3 rounded-lg border border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors group\"\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <div className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                        {option.role}\n                      </div>\n                      <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n                        {option.description}\n                      </div>\n                    </div>\n                    <div className=\"text-xs text-primary-600 dark:text-primary-400 opacity-0 group-hover:opacity-100 transition-opacity\">\n                      Click per usare\n                    </div>\n                  </div>\n                </motion.button>\n              ))}\n            </div>\n          </div>\n        </motion.div>\n      </div>\n\n      {/* Right side - Hero Section */}\n      <div className=\"hidden lg:block relative w-0 flex-1\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-primary-600 via-primary-700 to-primary-900\">\n          <div className=\"absolute inset-0 bg-black bg-opacity-20\" />\n          \n          {/* Hero Content */}\n          <div className=\"relative z-10 h-full flex flex-col justify-center px-8 text-white\">\n            <motion.div\n              initial={{ opacity: 0, y: 40 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.2 }}\n            >\n              <h1 className=\"text-4xl font-bold mb-6\">\n                Controllo Completo\n                <br />\n                <span className=\"text-primary-200\">Discord Bot</span>\n              </h1>\n              \n              <div className=\"space-y-4 text-lg text-primary-100\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-2 h-2 bg-primary-300 rounded-full\" />\n                  <span>Dashboard real-time</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-2 h-2 bg-primary-300 rounded-full\" />\n                  <span>Gestione shipping avanzata</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-2 h-2 bg-primary-300 rounded-full\" />\n                  <span>Analytics & monitoring</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-2 h-2 bg-primary-300 rounded-full\" />\n                  <span>Controllo remoto completo</span>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          {/* Decorative elements */}\n          <div className=\"absolute bottom-0 right-0 w-1/2 h-1/2 opacity-10\">\n            <svg viewBox=\"0 0 200 200\" className=\"w-full h-full\">\n              <defs>\n                <pattern id=\"grid\" width=\"40\" height=\"40\" patternUnits=\"userSpaceOnUse\">\n                  <path d=\"M 40 0 L 0 0 0 40\" fill=\"none\" stroke=\"white\" strokeWidth=\"1\"/>\n                </pattern>\n              </defs>\n              <rect width=\"100%\" height=\"100%\" fill=\"url(#grid)\" />\n            </svg>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;","/Users/samuelebelfiore/Downloads/discord-bot-main/web-dashboard/src/pages/Dashboard.tsx",["91"],"import React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport {\n  ChartBarIcon,\n  TruckIcon,\n  UsersIcon,\n  CurrencyEuroIcon,\n  ExclamationTriangleIcon,\n  CheckCircleIcon,\n  ClockIcon,\n  ArrowUpIcon,\n  ArrowDownIcon\n} from '@heroicons/react/24/outline';\nimport {\n  LineChart,\n  Line,\n  AreaChart,\n  Area,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell\n} from 'recharts';\nimport { dashboardApi, systemApi } from '../services/api';\nimport { KPI, SystemHealth, Alert } from '../types';\nimport LoadingSpinner from '../components/LoadingSpinner';\nimport KPICard from '../components/KPICard';\nimport StatusBadge from '../components/StatusBadge';\nimport toast from 'react-hot-toast';\n\nconst Dashboard: React.FC = () => {\n  const [dashboardData, setDashboardData] = useState<any>(null);\n  const [systemHealth, setSystemHealth] = useState<SystemHealth | null>(null);\n  const [alerts, setAlerts] = useState<Alert[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [refreshing, setRefreshing] = useState(false);\n\n  const fetchDashboardData = async (isRefresh = false) => {\n    try {\n      if (isRefresh) {\n        setRefreshing(true);\n      } else {\n        setLoading(true);\n      }\n\n      const [overview, health, alertsData] = await Promise.allSettled([\n        dashboardApi.getOverview(),\n        systemApi.getHealth(),\n        systemApi.getAlerts(false)\n      ]);\n\n      if (overview.status === 'fulfilled') {\n        setDashboardData(overview.value);\n      }\n\n      if (health.status === 'fulfilled') {\n        setSystemHealth(health.value);\n      }\n\n      if (alertsData.status === 'fulfilled') {\n        setAlerts(alertsData.value);\n      }\n\n      if (!isRefresh) {\n        toast.success('Dashboard caricata');\n      }\n    } catch (error) {\n      console.error('Errore caricamento dashboard:', error);\n      toast.error('Errore caricamento dashboard');\n    } finally {\n      setLoading(false);\n      setRefreshing(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchDashboardData();\n\n    // Auto-refresh ogni 30 secondi\n    const interval = setInterval(() => {\n      fetchDashboardData(true);\n    }, 30000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'healthy': return 'text-success-600';\n      case 'degraded': return 'text-warning-600';\n      case 'down': return 'text-error-600';\n      default: return 'text-gray-600';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'healthy': return CheckCircleIcon;\n      case 'degraded': return ExclamationTriangleIcon;\n      case 'down': return ExclamationTriangleIcon;\n      default: return ClockIcon;\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <LoadingSpinner size=\"large\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n            Dashboard Overview\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Controllo completo del sistema Hyperion\n          </p>\n        </div>\n        \n        <button\n          onClick={() => fetchDashboardData(true)}\n          disabled={refreshing}\n          className=\"btn-primary flex items-center space-x-2\"\n        >\n          <motion.div\n            animate={refreshing ? { rotate: 360 } : {}}\n            transition={{ duration: 1, repeat: refreshing ? Infinity : 0 }}\n          >\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n            </svg>\n          </motion.div>\n          <span>{refreshing ? 'Aggiornamento...' : 'Aggiorna'}</span>\n        </button>\n      </div>\n\n      {/* System Alerts */}\n      {alerts.length > 0 && (\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"bg-warning-50 dark:bg-warning-900/20 border border-warning-200 dark:border-warning-800 rounded-lg p-4\"\n        >\n          <div className=\"flex items-center space-x-3\">\n            <ExclamationTriangleIcon className=\"h-5 w-5 text-warning-600\" />\n            <div>\n              <h3 className=\"text-sm font-medium text-warning-800 dark:text-warning-400\">\n                {alerts.length} Alert{alerts.length > 1 ? 's' : ''} Attiv{alerts.length > 1 ? 'i' : 'o'}\n              </h3>\n              <p className=\"text-xs text-warning-700 dark:text-warning-500 mt-1\">\n                {alerts[0].message}\n                {alerts.length > 1 && ` e altri ${alerts.length - 1}...`}\n              </p>\n            </div>\n          </div>\n        </motion.div>\n      )}\n\n      {/* KPIs Grid */}\n      {dashboardData?.kpis && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {dashboardData.kpis.map((kpi: KPI, index: number) => (\n            <motion.div\n              key={kpi.label}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: index * 0.1 }}\n            >\n              <KPICard kpi={kpi} />\n            </motion.div>\n          ))}\n        </div>\n      )}\n\n      {/* Main Content Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* System Health */}\n        <motion.div\n          initial={{ opacity: 0, x: -20 }}\n          animate={{ opacity: 1, x: 0 }}\n          className=\"lg:col-span-1\"\n        >\n          <div className=\"card\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n              System Health\n            </h3>\n            \n            {systemHealth && (\n              <div className=\"space-y-4\">\n                {/* Overall Status */}\n                <div className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg\">\n                  <span className=\"text-sm font-medium\">Status Generale</span>\n                  <StatusBadge \n                    status={systemHealth.overallStatus}\n                    text={systemHealth.overallStatus.toUpperCase()}\n                  />\n                </div>\n\n                {/* Database */}\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-gray-600 dark:text-gray-400\">Database</span>\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-xs text-gray-500\">\n                      {systemHealth.database.responseTime}ms\n                    </span>\n                    <StatusBadge status={systemHealth.database.status} />\n                  </div>\n                </div>\n\n                {/* External API */}\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-gray-600 dark:text-gray-400\">Shipping API</span>\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-xs text-gray-500\">\n                      {systemHealth.externalApi.shipping.responseTime}ms\n                    </span>\n                    <StatusBadge status={systemHealth.externalApi.shipping.status} />\n                  </div>\n                </div>\n\n                {/* Bot */}\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-gray-600 dark:text-gray-400\">Discord Bot</span>\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-xs text-gray-500\">\n                      {systemHealth.services.bot.latency}ms\n                    </span>\n                    <StatusBadge \n                      status={systemHealth.services.bot.online ? 'healthy' : 'down'} \n                      text={systemHealth.services.bot.online ? 'Online' : 'Offline'}\n                    />\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        </motion.div>\n\n        {/* Activity Chart */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"lg:col-span-2\"\n        >\n          <div className=\"card\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n              Attività Ultime 24h\n            </h3>\n            \n            <div className=\"chart-container\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <AreaChart data={dashboardData?.kpis?.[1]?.trend || []}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" opacity={0.3} />\n                  <XAxis \n                    dataKey=\"x\" \n                    stroke=\"#6B7280\"\n                    fontSize={12}\n                  />\n                  <YAxis \n                    stroke=\"#6B7280\"\n                    fontSize={12}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: '#1F2937',\n                      border: '1px solid #374151',\n                      borderRadius: '8px',\n                      color: '#F9FAFB'\n                    }}\n                  />\n                  <Area\n                    type=\"monotone\"\n                    dataKey=\"y\"\n                    stroke=\"#3B82F6\"\n                    fill=\"url(#colorGradient)\"\n                    strokeWidth={2}\n                  />\n                  <defs>\n                    <linearGradient id=\"colorGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                      <stop offset=\"5%\" stopColor=\"#3B82F6\" stopOpacity={0.3}/>\n                      <stop offset=\"95%\" stopColor=\"#3B82F6\" stopOpacity={0}/>\n                    </linearGradient>\n                  </defs>\n                </AreaChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n\n      {/* Recent Activity */}\n      {dashboardData?.recentActivity && (\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.3 }}\n        >\n          <div className=\"card\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n              Attività Recente\n            </h3>\n            \n            <div className=\"space-y-4\">\n              {dashboardData.recentActivity.map((activity: any, index: number) => (\n                <motion.div\n                  key={activity.id}\n                  initial={{ opacity: 0, x: -20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  transition={{ delay: index * 0.1 }}\n                  className=\"flex items-center space-x-4 p-3 hover:bg-gray-50 dark:hover:bg-gray-700/50 rounded-lg transition-colors\"\n                >\n                  <div className={`\n                    flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center\n                    ${activity.type === 'order_created' ? 'bg-primary-100 text-primary-600' :\n                      activity.type === 'order_completed' ? 'bg-success-100 text-success-600' :\n                      'bg-warning-100 text-warning-600'}\n                  `}>\n                    {activity.type === 'order_created' ? (\n                      <TruckIcon className=\"w-4 h-4\" />\n                    ) : activity.type === 'order_completed' ? (\n                      <CheckCircleIcon className=\"w-4 h-4\" />\n                    ) : (\n                      <ExclamationTriangleIcon className=\"w-4 h-4\" />\n                    )}\n                  </div>\n                  \n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                      {activity.title}\n                    </p>\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                      {activity.description}\n                    </p>\n                  </div>\n                  \n                  <div className=\"flex-shrink-0 text-xs text-gray-400\">\n                    {new Date(activity.timestamp).toLocaleTimeString('it-IT', {\n                      hour: '2-digit',\n                      minute: '2-digit'\n                    })}\n                  </div>\n                </motion.div>\n              ))}\n            </div>\n          </div>\n        </motion.div>\n      )}\n    </div>\n  );\n};\n\nexport default Dashboard;","/Users/samuelebelfiore/Downloads/discord-bot-main/web-dashboard/src/components/UserManagement.tsx",["92"],"import React, { useState, useEffect } from 'react';\nimport { \n  Users, \n  CreditCard, \n  Plus, \n  Minus, \n  Search, \n  Filter,\n  MoreVertical,\n  UserCheck,\n  UserX,\n  AlertCircle,\n  TrendingUp,\n  TrendingDown,\n  Wallet\n} from 'lucide-react';\n\ninterface User {\n  id: string;\n  discordId: string;\n  username: string;\n  displayName: string;\n  credits: number;\n  totalSpent: number;\n  totalOrders: number;\n  level: number;\n  referralCode?: string;\n  referredBy?: string;\n  lastActivity: string;\n  joinDate: string;\n  status: 'active' | 'inactive' | 'banned';\n}\n\ninterface Transaction {\n  id: string;\n  userId: string;\n  type: string;\n  amount: number;\n  description: string;\n  timestamp: string;\n  adminId?: string;\n}\n\nconst UserManagement: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterStatus, setFilterStatus] = useState<string>('all');\n  const [isLoading, setIsLoading] = useState(false);\n  const [showAddCredits, setShowAddCredits] = useState(false);\n  const [creditAmount, setCreditAmount] = useState<number>(0);\n  const [creditReason, setCreditReason] = useState('');\n\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  const fetchUsers = async () => {\n    setIsLoading(true);\n    try {\n      // Simulated API call - replace with actual API\n      const mockUsers: User[] = [\n        {\n          id: '1',\n          discordId: '123456789',\n          username: 'samu_resell',\n          displayName: 'Samu Resell',\n          credits: 125.50,\n          totalSpent: 890.25,\n          totalOrders: 47,\n          level: 15,\n          referralCode: 'SAMU2024',\n          lastActivity: new Date().toISOString(),\n          joinDate: '2024-01-15T10:00:00Z',\n          status: 'active'\n        },\n        {\n          id: '2',\n          discordId: '987654321',\n          username: 'user_example',\n          displayName: 'Example User',\n          credits: 45.00,\n          totalSpent: 230.75,\n          totalOrders: 12,\n          level: 8,\n          referredBy: 'SAMU2024',\n          lastActivity: new Date(Date.now() - 86400000).toISOString(),\n          joinDate: '2024-02-20T14:30:00Z',\n          status: 'active'\n        }\n      ];\n      \n      setUsers(mockUsers);\n    } catch (error) {\n      console.error('Error fetching users:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const fetchUserTransactions = async (userId: string) => {\n    try {\n      // Simulated API call\n      const mockTransactions: Transaction[] = [\n        {\n          id: '1',\n          userId,\n          type: 'ricarica_crediti',\n          amount: 50.00,\n          description: 'Ricarica manuale admin',\n          timestamp: new Date().toISOString(),\n          adminId: 'admin123'\n        },\n        {\n          id: '2',\n          userId,\n          type: 'spedizione',\n          amount: -5.50,\n          description: 'Etichetta UPS 2kg',\n          timestamp: new Date(Date.now() - 3600000).toISOString()\n        }\n      ];\n      \n      setTransactions(mockTransactions);\n    } catch (error) {\n      console.error('Error fetching transactions:', error);\n    }\n  };\n\n  const handleUserSelect = (user: User) => {\n    setSelectedUser(user);\n    fetchUserTransactions(user.id);\n  };\n\n  const handleAddCredits = async () => {\n    if (!selectedUser || !creditAmount || !creditReason) return;\n\n    try {\n      // API call to add credits\n      const newTransaction: Transaction = {\n        id: Date.now().toString(),\n        userId: selectedUser.id,\n        type: 'ricarica_admin',\n        amount: creditAmount,\n        description: creditReason,\n        timestamp: new Date().toISOString(),\n        adminId: 'current-admin'\n      };\n\n      // Update user credits\n      const updatedUser = {\n        ...selectedUser,\n        credits: selectedUser.credits + creditAmount\n      };\n\n      // Update state\n      setUsers(users.map(u => u.id === selectedUser.id ? updatedUser : u));\n      setSelectedUser(updatedUser);\n      setTransactions([newTransaction, ...transactions]);\n\n      // Reset form\n      setCreditAmount(0);\n      setCreditReason('');\n      setShowAddCredits(false);\n\n      // Show success message\n      alert('Crediti aggiunti con successo!');\n    } catch (error) {\n      console.error('Error adding credits:', error);\n      alert('Errore nell\\'aggiunta crediti');\n    }\n  };\n\n  const handleRemoveCredits = async () => {\n    if (!selectedUser || !creditAmount || !creditReason) return;\n\n    try {\n      const newTransaction: Transaction = {\n        id: Date.now().toString(),\n        userId: selectedUser.id,\n        type: 'rimozione_admin',\n        amount: -creditAmount,\n        description: creditReason,\n        timestamp: new Date().toISOString(),\n        adminId: 'current-admin'\n      };\n\n      const updatedUser = {\n        ...selectedUser,\n        credits: Math.max(0, selectedUser.credits - creditAmount)\n      };\n\n      setUsers(users.map(u => u.id === selectedUser.id ? updatedUser : u));\n      setSelectedUser(updatedUser);\n      setTransactions([newTransaction, ...transactions]);\n\n      setCreditAmount(0);\n      setCreditReason('');\n      setShowAddCredits(false);\n\n      alert('Crediti rimossi con successo!');\n    } catch (error) {\n      console.error('Error removing credits:', error);\n      alert('Errore nella rimozione crediti');\n    }\n  };\n\n  const filteredUsers = users.filter(user => {\n    const matchesSearch = user.username.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         user.displayName.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesFilter = filterStatus === 'all' || user.status === filterStatus;\n    return matchesSearch && matchesFilter;\n  });\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleString('it-IT');\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'text-green-600 bg-green-100';\n      case 'inactive': return 'text-yellow-600 bg-yellow-100';\n      case 'banned': return 'text-red-600 bg-red-100';\n      default: return 'text-gray-600 bg-gray-100';\n    }\n  };\n\n  const getTransactionIcon = (type: string) => {\n    if (type.includes('ricarica') || type.includes('bonus')) return <TrendingUp className=\"w-4 h-4 text-green-500\" />;\n    if (type.includes('rimozione') || type.includes('spedizione')) return <TrendingDown className=\"w-4 h-4 text-red-500\" />;\n    return <CreditCard className=\"w-4 h-4 text-blue-500\" />;\n  };\n\n  return (\n    <div className=\"p-6 max-w-7xl mx-auto\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Gestione Utenti</h1>\n        <p className=\"text-gray-600\">Gestisci utenti, crediti e transazioni</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Lista Utenti */}\n        <div className=\"lg:col-span-2\">\n          <div className=\"bg-white rounded-lg shadow-sm border\">\n            <div className=\"p-4 border-b\">\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <div className=\"relative flex-1\">\n                  <Search className=\"w-5 h-5 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" />\n                  <input\n                    type=\"text\"\n                    placeholder=\"Cerca utenti...\"\n                    className=\"w-full pl-10 pr-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                  />\n                </div>\n                <select\n                  className=\"px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  value={filterStatus}\n                  onChange={(e) => setFilterStatus(e.target.value)}\n                >\n                  <option value=\"all\">Tutti gli stati</option>\n                  <option value=\"active\">Attivi</option>\n                  <option value=\"inactive\">Inattivi</option>\n                  <option value=\"banned\">Bannati</option>\n                </select>\n              </div>\n            </div>\n\n            <div className=\"divide-y max-h-96 overflow-y-auto\">\n              {isLoading ? (\n                <div className=\"p-8 text-center\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto\"></div>\n                  <p className=\"mt-2 text-gray-500\">Caricamento utenti...</p>\n                </div>\n              ) : filteredUsers.length === 0 ? (\n                <div className=\"p-8 text-center\">\n                  <Users className=\"w-12 h-12 text-gray-400 mx-auto mb-2\" />\n                  <p className=\"text-gray-500\">Nessun utente trovato</p>\n                </div>\n              ) : (\n                filteredUsers.map(user => (\n                  <div\n                    key={user.id}\n                    className={`p-4 hover:bg-gray-50 cursor-pointer transition-colors ${\n                      selectedUser?.id === user.id ? 'bg-blue-50 border-l-4 border-blue-500' : ''\n                    }`}\n                    onClick={() => handleUserSelect(user)}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"flex items-center gap-2\">\n                          <h3 className=\"font-medium text-gray-900\">{user.displayName}</h3>\n                          <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(user.status)}`}>\n                            {user.status}\n                          </span>\n                        </div>\n                        <p className=\"text-sm text-gray-500\">@{user.username}</p>\n                        <div className=\"flex items-center gap-4 mt-1 text-sm text-gray-600\">\n                          <span className=\"flex items-center gap-1\">\n                            <Wallet className=\"w-4 h-4\" />\n                            €{user.credits.toFixed(2)}\n                          </span>\n                          <span>Livello {user.level}</span>\n                          <span>{user.totalOrders} ordini</span>\n                        </div>\n                      </div>\n                      <MoreVertical className=\"w-5 h-5 text-gray-400\" />\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Dettagli Utente */}\n        <div>\n          {selectedUser ? (\n            <div className=\"space-y-4\">\n              {/* Info Utente */}\n              <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h2 className=\"text-lg font-semibold\">Dettagli Utente</h2>\n                  <span className={`px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(selectedUser.status)}`}>\n                    {selectedUser.status}\n                  </span>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-500\">Nome Utente</label>\n                    <p className=\"text-gray-900\">{selectedUser.displayName}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-500\">Discord</label>\n                    <p className=\"text-gray-900\">@{selectedUser.username}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-500\">Crediti</label>\n                    <p className=\"text-2xl font-bold text-green-600\">€{selectedUser.credits.toFixed(2)}</p>\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"text-sm font-medium text-gray-500\">Totale Speso</label>\n                      <p className=\"text-gray-900\">€{selectedUser.totalSpent.toFixed(2)}</p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium text-gray-500\">Ordini</label>\n                      <p className=\"text-gray-900\">{selectedUser.totalOrders}</p>\n                    </div>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-500\">Ultima Attività</label>\n                    <p className=\"text-gray-900\">{formatDate(selectedUser.lastActivity)}</p>\n                  </div>\n                </div>\n              </div>\n\n              {/* Azioni Crediti */}\n              <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n                <h3 className=\"text-lg font-semibold mb-4\">Gestione Crediti</h3>\n                \n                {!showAddCredits ? (\n                  <div className=\"space-y-2\">\n                    <button\n                      onClick={() => setShowAddCredits(true)}\n                      className=\"w-full flex items-center justify-center gap-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors\"\n                    >\n                      <Plus className=\"w-4 h-4\" />\n                      Aggiungi Crediti\n                    </button>\n                    <button\n                      onClick={() => setShowAddCredits(true)}\n                      className=\"w-full flex items-center justify-center gap-2 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors\"\n                    >\n                      <Minus className=\"w-4 h-4\" />\n                      Rimuovi Crediti\n                    </button>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                        Importo (€)\n                      </label>\n                      <input\n                        type=\"number\"\n                        step=\"0.01\"\n                        min=\"0\"\n                        value={creditAmount}\n                        onChange={(e) => setCreditAmount(parseFloat(e.target.value) || 0)}\n                        className=\"w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                        placeholder=\"0.00\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                        Motivo\n                      </label>\n                      <input\n                        type=\"text\"\n                        value={creditReason}\n                        onChange={(e) => setCreditReason(e.target.value)}\n                        className=\"w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                        placeholder=\"Descrivi il motivo...\"\n                      />\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <button\n                        onClick={handleAddCredits}\n                        className=\"flex-1 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors\"\n                      >\n                        Aggiungi\n                      </button>\n                      <button\n                        onClick={handleRemoveCredits}\n                        className=\"flex-1 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors\"\n                      >\n                        Rimuovi\n                      </button>\n                      <button\n                        onClick={() => {\n                          setShowAddCredits(false);\n                          setCreditAmount(0);\n                          setCreditReason('');\n                        }}\n                        className=\"px-4 py-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400 transition-colors\"\n                      >\n                        Annulla\n                      </button>\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              {/* Transazioni Recenti */}\n              <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n                <h3 className=\"text-lg font-semibold mb-4\">Transazioni Recenti</h3>\n                <div className=\"space-y-3 max-h-64 overflow-y-auto\">\n                  {transactions.length === 0 ? (\n                    <p className=\"text-gray-500 text-center py-4\">Nessuna transazione</p>\n                  ) : (\n                    transactions.map(transaction => (\n                      <div key={transaction.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                        <div className=\"flex items-center gap-3\">\n                          {getTransactionIcon(transaction.type)}\n                          <div>\n                            <p className=\"font-medium text-sm\">{transaction.description}</p>\n                            <p className=\"text-xs text-gray-500\">{formatDate(transaction.timestamp)}</p>\n                          </div>\n                        </div>\n                        <span className={`font-bold ${transaction.amount >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                          {transaction.amount >= 0 ? '+' : ''}€{transaction.amount.toFixed(2)}\n                        </span>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"bg-white rounded-lg shadow-sm border p-6 text-center\">\n              <UserCheck className=\"w-12 h-12 text-gray-400 mx-auto mb-2\" />\n              <p className=\"text-gray-500\">Seleziona un utente per vedere i dettagli</p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UserManagement;","/Users/samuelebelfiore/Downloads/discord-bot-main/web-dashboard/src/components/AdvancedAnalytics.tsx",["93"],"import React, { useState, useEffect } from 'react';\nimport {\n  TrendingUp,\n  TrendingDown,\n  Brain,\n  Target,\n  Clock,\n  Calendar,\n  Users,\n  Package,\n  DollarSign,\n  AlertTriangle,\n  CheckCircle,\n  BarChart3,\n  PieChart,\n  Activity,\n  Zap,\n  Star\n} from 'lucide-react';\n\ninterface AnalyticsData {\n  revenue: {\n    today: number;\n    week: number;\n    month: number;\n    growth: number;\n  };\n  orders: {\n    total: number;\n    completed: number;\n    pending: number;\n    failed: number;\n    avgProcessingTime: number;\n  };\n  users: {\n    total: number;\n    active: number;\n    new: number;\n    retention: number;\n  };\n  carriers: {\n    ups: { count: number; revenue: number; avgTime: number };\n    colissimo: { count: number; revenue: number; avgTime: number };\n  };\n  predictions: {\n    dailyOrders: number;\n    weeklyRevenue: number;\n    peakHours: string[];\n    recommendations: string[];\n  };\n  aiInsights: {\n    performanceScore: number;\n    efficiency: number;\n    recommendations: AiRecommendation[];\n    alerts: AiAlert[];\n  };\n}\n\ninterface AiRecommendation {\n  id: string;\n  type: 'optimization' | 'alert' | 'opportunity';\n  title: string;\n  description: string;\n  impact: 'high' | 'medium' | 'low';\n  confidence: number;\n}\n\ninterface AiAlert {\n  id: string;\n  severity: 'critical' | 'warning' | 'info';\n  title: string;\n  message: string;\n  timestamp: string;\n}\n\nconst AdvancedAnalytics: React.FC = () => {\n  const [analyticsData, setAnalyticsData] = useState<AnalyticsData | null>(null);\n  const [timeRange, setTimeRange] = useState<'day' | 'week' | 'month'>('week');\n  const [isLoading, setIsLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState<'overview' | 'ai-insights' | 'predictions'>('overview');\n\n  useEffect(() => {\n    fetchAnalyticsData();\n    const interval = setInterval(fetchAnalyticsData, 30000); // Update every 30 seconds\n    return () => clearInterval(interval);\n  }, [timeRange]);\n\n  const fetchAnalyticsData = async () => {\n    try {\n      // Simulate AI-powered analytics data\n      const mockData: AnalyticsData = {\n        revenue: {\n          today: 234.50,\n          week: 1567.25,\n          month: 6890.75,\n          growth: 12.5\n        },\n        orders: {\n          total: 1247,\n          completed: 1198,\n          pending: 34,\n          failed: 15,\n          avgProcessingTime: 145 // seconds\n        },\n        users: {\n          total: 342,\n          active: 187,\n          new: 23,\n          retention: 78.5\n        },\n        carriers: {\n          ups: { count: 789, revenue: 4234.50, avgTime: 120 },\n          colissimo: { count: 458, revenue: 2656.25, avgTime: 180 }\n        },\n        predictions: {\n          dailyOrders: 67,\n          weeklyRevenue: 1789.50,\n          peakHours: ['09:00-11:00', '14:00-16:00', '19:00-21:00'],\n          recommendations: [\n            'Ottimizza le fasce orarie 14:00-16:00 per aumentare l\\'efficienza',\n            'Considera promozioni durante le ore meno trafficate',\n            'Implementa automazioni per gestire i picchi di traffico'\n          ]\n        },\n        aiInsights: {\n          performanceScore: 87,\n          efficiency: 92,\n          recommendations: [\n            {\n              id: '1',\n              type: 'optimization',\n              title: 'Ottimizzazione Pricing Dinamico',\n              description: 'L\\'AI suggerisce di aumentare i prezzi UPS del 8% durante i picchi di domanda per massimizzare i ricavi',\n              impact: 'high',\n              confidence: 94\n            },\n            {\n              id: '2',\n              type: 'opportunity',\n              title: 'Opportunità Weekend',\n              description: 'Analisi mostra 23% meno ordini nei weekend. Implementa promozioni mirate per aumentare il volume',\n              impact: 'medium',\n              confidence: 78\n            },\n            {\n              id: '3',\n              type: 'alert',\n              title: 'Tempo Elaborazione Anomalo',\n              description: 'Rilevato aumento del 15% nei tempi di elaborazione Colissimo nelle ultime 48h',\n              impact: 'medium',\n              confidence: 89\n            }\n          ],\n          alerts: [\n            {\n              id: '1',\n              severity: 'warning',\n              title: 'Capacità Sistema',\n              message: 'Il sistema sta raggiungendo l\\'85% della capacità nelle ore di punta',\n              timestamp: new Date().toISOString()\n            },\n            {\n              id: '2',\n              severity: 'info',\n              title: 'Crescita Utenti',\n              message: 'Rilevata crescita del 15% di nuovi utenti questa settimana',\n              timestamp: new Date(Date.now() - 3600000).toISOString()\n            }\n          ]\n        }\n      };\n\n      setAnalyticsData(mockData);\n    } catch (error) {\n      console.error('Error fetching analytics:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const formatCurrency = (amount: number) => `€${amount.toFixed(2)}`;\n  const formatPercent = (value: number) => `${value.toFixed(1)}%`;\n\n  const getImpactColor = (impact: string) => {\n    switch (impact) {\n      case 'high': return 'text-red-600 bg-red-100';\n      case 'medium': return 'text-yellow-600 bg-yellow-100';\n      case 'low': return 'text-green-600 bg-green-100';\n      default: return 'text-gray-600 bg-gray-100';\n    }\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'critical': return 'text-red-600 bg-red-100 border-red-200';\n      case 'warning': return 'text-yellow-600 bg-yellow-100 border-yellow-200';\n      case 'info': return 'text-blue-600 bg-blue-100 border-blue-200';\n      default: return 'text-gray-600 bg-gray-100 border-gray-200';\n    }\n  };\n\n  const getSeverityIcon = (severity: string) => {\n    switch (severity) {\n      case 'critical': return <AlertTriangle className=\"w-4 h-4\" />;\n      case 'warning': return <Clock className=\"w-4 h-4\" />;\n      case 'info': return <CheckCircle className=\"w-4 h-4\" />;\n      default: return <Activity className=\"w-4 h-4\" />;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6 max-w-7xl mx-auto\">\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500\"></div>\n          <p className=\"ml-4 text-gray-600\">Caricamento analytics...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!analyticsData) return null;\n\n  return (\n    <div className=\"p-6 max-w-7xl mx-auto\">\n      {/* Header */}\n      <div className=\"mb-6\">\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900 flex items-center gap-2\">\n              <Brain className=\"w-6 h-6 text-blue-600\" />\n              Analytics AI-Powered\n            </h1>\n            <p className=\"text-gray-600\">Insights avanzati con intelligenza artificiale</p>\n          </div>\n          <div className=\"flex gap-2\">\n            <select\n              value={timeRange}\n              onChange={(e) => setTimeRange(e.target.value as 'day' | 'week' | 'month')}\n              className=\"px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n            >\n              <option value=\"day\">Oggi</option>\n              <option value=\"week\">Settimana</option>\n              <option value=\"month\">Mese</option>\n            </select>\n          </div>\n        </div>\n\n        {/* Tabs */}\n        <div className=\"flex border-b mt-6\">\n          <button\n            onClick={() => setActiveTab('overview')}\n            className={`px-4 py-2 font-medium ${\n              activeTab === 'overview'\n                ? 'text-blue-600 border-b-2 border-blue-600'\n                : 'text-gray-500 hover:text-gray-700'\n            }`}\n          >\n            <BarChart3 className=\"w-4 h-4 inline mr-2\" />\n            Overview\n          </button>\n          <button\n            onClick={() => setActiveTab('ai-insights')}\n            className={`px-4 py-2 font-medium ${\n              activeTab === 'ai-insights'\n                ? 'text-blue-600 border-b-2 border-blue-600'\n                : 'text-gray-500 hover:text-gray-700'\n            }`}\n          >\n            <Brain className=\"w-4 h-4 inline mr-2\" />\n            AI Insights\n          </button>\n          <button\n            onClick={() => setActiveTab('predictions')}\n            className={`px-4 py-2 font-medium ${\n              activeTab === 'predictions'\n                ? 'text-blue-600 border-b-2 border-blue-600'\n                : 'text-gray-500 hover:text-gray-700'\n            }`}\n          >\n            <Target className=\"w-4 h-4 inline mr-2\" />\n            Predizioni\n          </button>\n        </div>\n      </div>\n\n      {/* Performance Score */}\n      <div className=\"mb-6\">\n        <div className=\"bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg p-6 text-white\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-lg font-semibold mb-2\">Sistema Performance Score</h2>\n              <div className=\"flex items-center gap-4\">\n                <div className=\"text-3xl font-bold\">{analyticsData.aiInsights.performanceScore}/100</div>\n                <div className=\"text-sm\">\n                  <div>Efficienza: {analyticsData.aiInsights.efficiency}%</div>\n                  <div className=\"flex items-center gap-1 mt-1\">\n                    <Star className=\"w-4 h-4 fill-current\" />\n                    <span>Eccellente</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-2xl font-bold\">+{analyticsData.revenue.growth}%</div>\n              <div className=\"text-sm opacity-90\">Crescita settimanale</div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Content based on active tab */}\n      {activeTab === 'overview' && (\n        <>\n          {/* KPIs */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6\">\n            <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Ricavi Totali</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{formatCurrency(analyticsData.revenue.week)}</p>\n                </div>\n                <DollarSign className=\"w-8 h-8 text-green-500\" />\n              </div>\n              <div className=\"mt-2 flex items-center text-sm\">\n                <TrendingUp className=\"w-4 h-4 text-green-500 mr-1\" />\n                <span className=\"text-green-600 font-medium\">+{analyticsData.revenue.growth}%</span>\n                <span className=\"text-gray-600 ml-1\">vs settimana scorsa</span>\n              </div>\n            </div>\n\n            <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Ordini Completati</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{analyticsData.orders.completed}</p>\n                </div>\n                <Package className=\"w-8 h-8 text-blue-500\" />\n              </div>\n              <div className=\"mt-2 flex items-center text-sm\">\n                <span className=\"text-gray-600\">Tasso successo: </span>\n                <span className=\"font-medium ml-1\">\n                  {formatPercent((analyticsData.orders.completed / analyticsData.orders.total) * 100)}\n                </span>\n              </div>\n            </div>\n\n            <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Utenti Attivi</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{analyticsData.users.active}</p>\n                </div>\n                <Users className=\"w-8 h-8 text-purple-500\" />\n              </div>\n              <div className=\"mt-2 flex items-center text-sm\">\n                <span className=\"text-gray-600\">Retention: </span>\n                <span className=\"font-medium ml-1\">{formatPercent(analyticsData.users.retention)}</span>\n              </div>\n            </div>\n\n            <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Tempo Medio</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{Math.round(analyticsData.orders.avgProcessingTime / 60)}m</p>\n                </div>\n                <Clock className=\"w-8 h-8 text-orange-500\" />\n              </div>\n              <div className=\"mt-2 flex items-center text-sm\">\n                <span className=\"text-gray-600\">Elaborazione ordini</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Carriers Performance */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\n              <h3 className=\"text-lg font-semibold mb-4\">Performance Corrieri</h3>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                  <div>\n                    <h4 className=\"font-medium\">UPS</h4>\n                    <p className=\"text-sm text-gray-600\">{analyticsData.carriers.ups.count} ordini</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-bold text-green-600\">{formatCurrency(analyticsData.carriers.ups.revenue)}</p>\n                    <p className=\"text-xs text-gray-500\">{Math.round(analyticsData.carriers.ups.avgTime / 60)}m avg</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                  <div>\n                    <h4 className=\"font-medium\">Colissimo</h4>\n                    <p className=\"text-sm text-gray-600\">{analyticsData.carriers.colissimo.count} ordini</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-bold text-blue-600\">{formatCurrency(analyticsData.carriers.colissimo.revenue)}</p>\n                    <p className=\"text-xs text-gray-500\">{Math.round(analyticsData.carriers.colissimo.avgTime / 60)}m avg</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\n              <h3 className=\"text-lg font-semibold mb-4\">Ore di Picco</h3>\n              <div className=\"space-y-3\">\n                {analyticsData.predictions.peakHours.map((hour, index) => (\n                  <div key={index} className=\"flex items-center justify-between p-3 bg-yellow-50 rounded-lg\">\n                    <span className=\"font-medium\">{hour}</span>\n                    <Activity className=\"w-5 h-5 text-yellow-600\" />\n                  </div>\n                ))}\n              </div>\n              <div className=\"mt-4 p-3 bg-blue-50 rounded-lg\">\n                <p className=\"text-sm text-blue-700 font-medium\">\n                  💡 Suggerimento: Prepara risorse extra durante questi orari\n                </p>\n              </div>\n            </div>\n          </div>\n        </>\n      )}\n\n      {activeTab === 'ai-insights' && (\n        <>\n          {/* AI Alerts */}\n          <div className=\"mb-6\">\n            <h2 className=\"text-lg font-semibold mb-4\">Avvisi AI</h2>\n            <div className=\"space-y-3\">\n              {analyticsData.aiInsights.alerts.map(alert => (\n                <div\n                  key={alert.id}\n                  className={`p-4 rounded-lg border ${getSeverityColor(alert.severity)}`}\n                >\n                  <div className=\"flex items-start gap-3\">\n                    {getSeverityIcon(alert.severity)}\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium\">{alert.title}</h4>\n                      <p className=\"text-sm mt-1\">{alert.message}</p>\n                      <p className=\"text-xs mt-2 opacity-70\">\n                        {new Date(alert.timestamp).toLocaleString('it-IT')}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* AI Recommendations */}\n          <div>\n            <h2 className=\"text-lg font-semibold mb-4\">Raccomandazioni AI</h2>\n            <div className=\"space-y-4\">\n              {analyticsData.aiInsights.recommendations.map(rec => (\n                <div key={rec.id} className=\"bg-white p-6 rounded-lg shadow-sm border\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-3 mb-2\">\n                        <h3 className=\"font-semibold\">{rec.title}</h3>\n                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${getImpactColor(rec.impact)}`}>\n                          {rec.impact}\n                        </span>\n                      </div>\n                      <p className=\"text-gray-600 mb-3\">{rec.description}</p>\n                      <div className=\"flex items-center gap-4 text-sm\">\n                        <div className=\"flex items-center gap-1\">\n                          <Target className=\"w-4 h-4 text-blue-500\" />\n                          <span>Confidenza: {rec.confidence}%</span>\n                        </div>\n                      </div>\n                    </div>\n                    <button className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\">\n                      Applica\n                    </button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </>\n      )}\n\n      {activeTab === 'predictions' && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\n            <h3 className=\"text-lg font-semibold mb-4\">Predizioni AI</h3>\n            <div className=\"space-y-4\">\n              <div className=\"p-4 bg-gradient-to-r from-green-50 to-blue-50 rounded-lg\">\n                <h4 className=\"font-medium text-green-800\">Ordini Previsti Domani</h4>\n                <p className=\"text-2xl font-bold text-green-900\">{analyticsData.predictions.dailyOrders}</p>\n                <p className=\"text-sm text-green-700\">+15% rispetto alla media</p>\n              </div>\n              <div className=\"p-4 bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg\">\n                <h4 className=\"font-medium text-purple-800\">Ricavi Settimana Prossima</h4>\n                <p className=\"text-2xl font-bold text-purple-900\">\n                  {formatCurrency(analyticsData.predictions.weeklyRevenue)}\n                </p>\n                <p className=\"text-sm text-purple-700\">Previsione basata su trend attuali</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\n            <h3 className=\"text-lg font-semibold mb-4\">Raccomandazioni Strategiche</h3>\n            <div className=\"space-y-3\">\n              {analyticsData.predictions.recommendations.map((rec, index) => (\n                <div key={index} className=\"p-3 bg-gray-50 rounded-lg\">\n                  <div className=\"flex items-start gap-2\">\n                    <Zap className=\"w-4 h-4 text-yellow-500 mt-0.5 flex-shrink-0\" />\n                    <p className=\"text-sm text-gray-700\">{rec}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AdvancedAnalytics;","/Users/samuelebelfiore/Downloads/discord-bot-main/web-dashboard/src/components/LoadingSpinner.tsx",["94"],"import React from 'react';\n\ninterface LoadingSpinnerProps {\n  size?: 'sm' | 'md' | 'lg' | 'xl' | 'large';\n  color?: 'primary' | 'white' | 'gray';\n  text?: string;\n}\n\nconst LoadingSpinner: React.FC<LoadingSpinnerProps> = ({ \n  size = 'md', \n  color = 'primary',\n  text\n}) => {\n  const getSizeClasses = (size: string) => {\n    switch (size) {\n      case 'sm':\n        return 'w-4 h-4';\n      case 'md':\n        return 'w-6 h-6';\n      case 'lg':\n        return 'w-8 h-8';\n      case 'xl':\n        return 'w-12 h-12';\n      case 'large':\n        return 'w-16 h-16';\n      default:\n        return 'w-6 h-6';\n    }\n  };\n\n  const getColorClasses = (color: string) => {\n    switch (color) {\n      case 'primary':\n        return 'border-primary-500 border-r-transparent';\n      case 'white':\n        return 'border-white border-r-transparent';\n      case 'gray':\n        return 'border-gray-400 border-r-transparent';\n      default:\n        return 'border-primary-500 border-r-transparent';\n    }\n  };\n\n  const spinnerClasses = `\n    loading-spinner\n    ${getSizeClasses(size)}\n    ${getColorClasses(color)}\n    border-2\n  `;\n\n  if (text) {\n    return (\n      <div className=\"flex flex-col items-center space-y-3\">\n        <div className={spinnerClasses} />\n        <p className=\"text-sm text-gray-600 dark:text-gray-400 animate-pulse\">\n          {text}\n        </p>\n      </div>\n    );\n  }\n\n  return <div className={spinnerClasses} />;\n};\n\nexport default LoadingSpinner;","/Users/samuelebelfiore/Downloads/discord-bot-main/web-dashboard/src/components/Layout/DashboardLayout.tsx",["95"],"import React, { useState, useEffect } from 'react';\nimport { Outlet, useNavigate, useLocation } from 'react-router-dom';\nimport {\n  HomeIcon,\n  TruckIcon,\n  UsersIcon,\n  CurrencyEuroIcon,\n  ChartBarIcon,\n  CogIcon,\n  DocumentTextIcon,\n  BellIcon,\n  MagnifyingGlassIcon,\n  ComputerDesktopIcon,\n  Bars3Icon,\n  XMarkIcon\n} from '@heroicons/react/24/outline';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport useAuth from '../../hooks/useAuth';\nimport NotificationCenter from '../NotificationCenter';\nimport CommandPalette from '../CommandPalette/CommandPalette';\nimport UserMenu from '../UserMenu/UserMenu';\nimport StatusIndicator from '../StatusIndicator/StatusIndicator';\nimport { useWebSocket } from '../../hooks/useWebSocket';\n\ninterface NavigationItem {\n  name: string;\n  href: string;\n  icon: React.ElementType;\n  badge?: number;\n  requiredPermission?: string;\n  children?: NavigationItem[];\n}\n\nconst navigation: NavigationItem[] = [\n  {\n    name: 'Dashboard',\n    href: '/',\n    icon: HomeIcon,\n  },\n  {\n    name: 'Bot Control',\n    href: '/bot',\n    icon: ComputerDesktopIcon,\n    requiredPermission: 'bot.manage',\n  },\n  {\n    name: 'Shipping',\n    href: '/shipping',\n    icon: TruckIcon,\n    children: [\n      { name: 'Overview', href: '/shipping', icon: ChartBarIcon },\n      { name: 'Queue', href: '/shipping/queue', icon: DocumentTextIcon },\n      { name: 'Orders', href: '/shipping/orders', icon: DocumentTextIcon },\n      { name: 'Analytics', href: '/shipping/analytics', icon: ChartBarIcon },\n    ],\n  },\n  {\n    name: 'Users',\n    href: '/users',\n    icon: UsersIcon,\n    requiredPermission: 'users.view',\n  },\n  {\n    name: 'Finance',\n    href: '/finance',\n    icon: CurrencyEuroIcon,\n    requiredPermission: 'finance.view',\n  },\n  {\n    name: 'Analytics',\n    href: '/analytics',\n    icon: ChartBarIcon,\n    requiredPermission: 'analytics.view',\n  },\n  {\n    name: 'Logs',\n    href: '/logs',\n    icon: DocumentTextIcon,\n    requiredPermission: 'system.logs',\n  },\n  {\n    name: 'Settings',\n    href: '/settings',\n    icon: CogIcon,\n    requiredPermission: 'system.settings',\n  },\n];\n\nconst DashboardLayout: React.FC = () => {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [commandPaletteOpen, setCommandPaletteOpen] = useState(false);\n  const [notificationPanelOpen, setNotificationPanelOpen] = useState(false);\n  \n  const { user, hasPermission, logout } = useAuth();\n  const { notifications } = useWebSocket();\n  const navigate = useNavigate();\n  const location = useLocation();\n  \n  const unreadNotifications = notifications.filter(n => !n.read).length;\n\n  // Keyboard shortcuts\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      // Ctrl/Cmd + K for command palette\n      if ((e.ctrlKey || e.metaKey) && e.key === 'k') {\n        e.preventDefault();\n        setCommandPaletteOpen(true);\n      }\n      \n      // Escape to close modals\n      if (e.key === 'Escape') {\n        setCommandPaletteOpen(false);\n        setNotificationPanelOpen(false);\n        setSidebarOpen(false);\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, []);\n\n  const filteredNavigation = navigation.filter(item => {\n    if (item.requiredPermission) {\n      return hasPermission(item.requiredPermission);\n    }\n    return true;\n  });\n\n  const isCurrentPath = (href: string) => {\n    if (href === '/') {\n      return location.pathname === '/';\n    }\n    return location.pathname.startsWith(href);\n  };\n\n  const NavigationItem: React.FC<{ item: NavigationItem; isChild?: boolean }> = ({ item, isChild = false }) => {\n    const [isExpanded, setIsExpanded] = useState(isCurrentPath(item.href));\n    \n    return (\n      <div>\n        <button\n          onClick={() => {\n            if (item.children) {\n              setIsExpanded(!isExpanded);\n            } else {\n              navigate(item.href);\n              setSidebarOpen(false);\n            }\n          }}\n          className={`\n            group flex items-center w-full px-3 py-2 text-sm font-medium rounded-lg transition-all duration-200\n            ${isChild ? 'ml-6 pl-6' : ''}\n            ${isCurrentPath(item.href) \n              ? 'bg-primary-100 text-primary-900 dark:bg-primary-900/20 dark:text-primary-400' \n              : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700/50'\n            }\n          `}\n        >\n          <item.icon className=\"mr-3 h-5 w-5 flex-shrink-0\" />\n          <span className=\"flex-1 text-left\">{item.name}</span>\n          {item.badge && (\n            <span className=\"ml-2 bg-primary-500 text-white text-xs rounded-full px-2 py-1\">\n              {item.badge}\n            </span>\n          )}\n          {item.children && (\n            <motion.div\n              animate={{ rotate: isExpanded ? 90 : 0 }}\n              transition={{ duration: 0.2 }}\n              className=\"ml-2\"\n            >\n              <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\" clipRule=\"evenodd\" />\n              </svg>\n            </motion.div>\n          )}\n        </button>\n        \n        <AnimatePresence>\n          {item.children && isExpanded && (\n            <motion.div\n              initial={{ height: 0, opacity: 0 }}\n              animate={{ height: 'auto', opacity: 1 }}\n              exit={{ height: 0, opacity: 0 }}\n              transition={{ duration: 0.2 }}\n              className=\"overflow-hidden\"\n            >\n              <div className=\"mt-1 space-y-1\">\n                {item.children.map((child) => (\n                  <NavigationItem key={child.href} item={child} isChild />\n                ))}\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      {/* Mobile sidebar overlay */}\n      <AnimatePresence>\n        {sidebarOpen && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 z-40 lg:hidden\"\n          >\n            <div \n              className=\"fixed inset-0 bg-gray-600 bg-opacity-75\"\n              onClick={() => setSidebarOpen(false)}\n            />\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Sidebar */}\n      <motion.div\n        className={`\n          fixed inset-y-0 left-0 z-50 w-64 bg-white dark:bg-gray-800 shadow-xl transform transition-transform duration-300 ease-in-out\n          lg:translate-x-0 lg:static lg:inset-0\n          ${sidebarOpen ? 'translate-x-0' : '-translate-x-full'}\n        `}\n      >\n        <div className=\"flex flex-col h-full\">\n          {/* Logo */}\n          <div className=\"flex items-center justify-between px-6 py-4 border-b border-gray-200 dark:border-gray-700\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 bg-gradient-to-r from-primary-500 to-primary-700 rounded-lg flex items-center justify-center\">\n                <span className=\"text-white font-bold text-sm\">H</span>\n              </div>\n              <div>\n                <h1 className=\"text-lg font-bold text-gray-900 dark:text-white\">Hyperion</h1>\n                <p className=\"text-xs text-gray-500 dark:text-gray-400\">Dashboard v2.0</p>\n              </div>\n            </div>\n            \n            <button\n              onClick={() => setSidebarOpen(false)}\n              className=\"lg:hidden p-1 rounded-md text-gray-400 hover:text-gray-500\"\n            >\n              <XMarkIcon className=\"h-6 w-6\" />\n            </button>\n          </div>\n\n          {/* Navigation */}\n          <nav className=\"flex-1 px-4 py-6 space-y-2 overflow-y-auto custom-scrollbar\">\n            {filteredNavigation.map((item) => (\n              <NavigationItem key={item.href} item={item} />\n            ))}\n          </nav>\n\n          {/* Status & User */}\n          <div className=\"border-t border-gray-200 dark:border-gray-700 p-4 space-y-3\">\n            <StatusIndicator />\n            <UserMenu user={user} onLogout={logout} />\n          </div>\n        </div>\n      </motion.div>\n\n      {/* Main content */}\n      <div className=\"lg:ml-64 flex flex-col min-h-screen\">\n        {/* Header */}\n        <header className=\"bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700 sticky top-0 z-30\">\n          <div className=\"px-4 sm:px-6 lg:px-8\">\n            <div className=\"flex items-center justify-between h-16\">\n              {/* Left side */}\n              <div className=\"flex items-center space-x-4\">\n                <button\n                  onClick={() => setSidebarOpen(true)}\n                  className=\"lg:hidden p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 dark:hover:bg-gray-700\"\n                >\n                  <Bars3Icon className=\"h-6 w-6\" />\n                </button>\n\n                {/* Breadcrumb */}\n                <div className=\"hidden sm:flex items-center space-x-2 text-sm\">\n                  <span className=\"text-gray-500 dark:text-gray-400\">Dashboard</span>\n                  {location.pathname !== '/' && (\n                    <>\n                      <span className=\"text-gray-300 dark:text-gray-600\">/</span>\n                      <span className=\"text-gray-900 dark:text-gray-100 capitalize\">\n                        {location.pathname.split('/')[1]}\n                      </span>\n                    </>\n                  )}\n                </div>\n              </div>\n\n              {/* Right side */}\n              <div className=\"flex items-center space-x-4\">\n                {/* Search/Command Palette */}\n                <button\n                  onClick={() => setCommandPaletteOpen(true)}\n                  className=\"p-2 text-gray-400 hover:text-gray-500 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors\"\n                  title=\"Cerca (Ctrl+K)\"\n                >\n                  <MagnifyingGlassIcon className=\"h-5 w-5\" />\n                </button>\n\n                {/* Notifications */}\n                <button\n                  onClick={() => setNotificationPanelOpen(true)}\n                  className=\"relative p-2 text-gray-400 hover:text-gray-500 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors\"\n                >\n                  <BellIcon className=\"h-5 w-5\" />\n                  {unreadNotifications > 0 && (\n                    <span className=\"absolute -top-1 -right-1 h-4 w-4 bg-error-500 text-white text-xs rounded-full flex items-center justify-center\">\n                      {unreadNotifications > 9 ? '9+' : unreadNotifications}\n                    </span>\n                  )}\n                </button>\n              </div>\n            </div>\n          </div>\n        </header>\n\n        {/* Page content */}\n        <main className=\"flex-1 p-6\">\n          <Outlet />\n        </main>\n      </div>\n\n      {/* Command Palette */}\n      <CommandPalette \n        open={commandPaletteOpen} \n        onClose={() => setCommandPaletteOpen(false)} \n      />\n\n      {/* Notification Center */}\n      <NotificationCenter \n        isOpen={notificationPanelOpen} \n        onClose={() => setNotificationPanelOpen(false)}\n      />\n    </div>\n  );\n};\n\nexport default DashboardLayout;","/Users/samuelebelfiore/Downloads/discord-bot-main/web-dashboard/src/services/api.ts",["96"],"import axios, { AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { \n  ApiResponse, \n  User, \n  BotStatus, \n  ShippingOrder, \n  ShippingStats, \n  QueueStatus, \n  FinancialData, \n  BotUser, \n  SystemHealth, \n  LogEntry,\n  PaginatedResponse,\n  KPI,\n  Alert\n} from '../types';\nimport toast from 'react-hot-toast';\n\n// Configurazione base API\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\n\nclass ApiClient {\n  private client: AxiosInstance;\n  private token: string | null = null;\n\n  constructor() {\n    this.client = axios.create({\n      baseURL: API_BASE_URL,\n      timeout: 30000,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    this.setupInterceptors();\n  }\n\n  private setupInterceptors() {\n    // Request interceptor - aggiunge token\n    this.client.interceptors.request.use(\n      (config) => {\n        const token = this.token || localStorage.getItem('auth_token');\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n      },\n      (error) => Promise.reject(error)\n    );\n\n    // Response interceptor - gestisce errori globali\n    this.client.interceptors.response.use(\n      (response) => response,\n      (error) => {\n        if (error.response?.status === 401) {\n          localStorage.removeItem('auth_token');\n          window.location.href = '/login';\n        }\n        \n        if (error.response?.status >= 500) {\n          toast.error('Errore del server. Riprova più tardi.');\n        }\n        \n        return Promise.reject(error);\n      }\n    );\n  }\n\n  setToken(token: string) {\n    this.token = token;\n  }\n\n  private async request<T>(config: AxiosRequestConfig): Promise<T> {\n    const response = await this.client.request<ApiResponse<T>>(config);\n    \n    if (!response.data.success) {\n      throw new Error(response.data.message || 'Errore API');\n    }\n    \n    return response.data.data!;\n  }\n\n  // ===== AUTH ENDPOINTS =====\n  async login(email: string, password: string): Promise<{ user: User; token: string }> {\n    return this.request({\n      method: 'POST',\n      url: '/auth/login',\n      data: { email, password }\n    });\n  }\n\n  async verifyToken(token: string): Promise<User> {\n    return this.request({\n      method: 'GET',\n      url: '/auth/verify',\n      headers: { Authorization: `Bearer ${token}` }\n    });\n  }\n\n  async refreshToken(token: string): Promise<{ user: User; token: string }> {\n    return this.request({\n      method: 'POST',\n      url: '/auth/refresh',\n      headers: { Authorization: `Bearer ${token}` }\n    });\n  }\n\n  // ===== DASHBOARD ENDPOINTS =====\n  async getDashboardOverview(): Promise<{\n    kpis: KPI[];\n    recentActivity: any[];\n    systemHealth: SystemHealth;\n    alerts: Alert[];\n  }> {\n    return this.request({\n      method: 'GET',\n      url: '/web/dashboard/overview'\n    });\n  }\n\n  // ===== BOT MANAGEMENT =====\n  async getBotStatus(): Promise<BotStatus> {\n    return this.request({\n      method: 'GET',\n      url: '/web/bot/status'\n    });\n  }\n\n  async restartBot(): Promise<{ success: boolean; message: string }> {\n    return this.request({\n      method: 'POST',\n      url: '/web/bot/restart'\n    });\n  }\n\n  async deployCommands(): Promise<{ success: boolean; message: string }> {\n    return this.request({\n      method: 'POST',\n      url: '/web/bot/deploy-commands'\n    });\n  }\n\n  async sendBotMessage(channelId: string, message: string): Promise<{ success: boolean }> {\n    return this.request({\n      method: 'POST',\n      url: '/web/bot/send-message',\n      data: { channelId, message }\n    });\n  }\n\n  // ===== SHIPPING MANAGEMENT =====\n  async getShippingStats(dateRange?: { start: string; end: string }): Promise<ShippingStats> {\n    return this.request({\n      method: 'GET',\n      url: '/web/shipping/stats',\n      params: dateRange\n    });\n  }\n\n  async getQueueStatus(): Promise<QueueStatus> {\n    return this.request({\n      method: 'GET',\n      url: '/shipping/queue'\n    });\n  }\n\n  async getShippingOrders(params: {\n    page?: number;\n    limit?: number;\n    status?: string;\n    userId?: string;\n    dateRange?: { start: string; end: string };\n  }): Promise<PaginatedResponse<ShippingOrder>> {\n    const response = await this.client.get('/web/shipping/orders', { params });\n    return response.data;\n  }\n\n  async cancelShippingOrder(orderId: string): Promise<{ success: boolean; message: string }> {\n    return this.request({\n      method: 'DELETE',\n      url: `/shipping/orders/${orderId}`\n    });\n  }\n\n  async getShippingAnalytics(): Promise<{\n    hourlyDistribution: Array<{ hour: number; orders: number }>;\n    carrierPerformance: Array<{ carrier: string; avgTime: number; successRate: number }>;\n    geographicDistribution: Array<{ country: string; orders: number; revenue: number }>;\n    trendsAnalysis: Array<{ date: string; orders: number; revenue: number }>;\n  }> {\n    return this.request({\n      method: 'GET',\n      url: '/web/shipping/analytics'\n    });\n  }\n\n  // ===== FINANCIAL MANAGEMENT =====\n  async getFinancialData(): Promise<FinancialData> {\n    return this.request({\n      method: 'GET',\n      url: '/web/finance/overview'\n    });\n  }\n\n  async updateBudgetLimits(limits: {\n    daily: number;\n    weekly: number;\n    monthly: number;\n  }): Promise<{ success: boolean }> {\n    return this.request({\n      method: 'PUT',\n      url: '/web/finance/budget-limits',\n      data: limits\n    });\n  }\n\n  async acknowledgeFinancialAlert(alertId: string): Promise<{ success: boolean }> {\n    return this.request({\n      method: 'POST',\n      url: `/web/finance/alerts/${alertId}/acknowledge`\n    });\n  }\n\n  // ===== USER MANAGEMENT =====\n  async getBotUsers(params: {\n    page?: number;\n    limit?: number;\n    search?: string;\n    sortBy?: string;\n    orderBy?: 'asc' | 'desc';\n  }): Promise<PaginatedResponse<BotUser>> {\n    const response = await this.client.get('/web/users', { params });\n    return response.data;\n  }\n\n  async getBotUser(userId: string): Promise<BotUser> {\n    return this.request({\n      method: 'GET',\n      url: `/web/users/${userId}`\n    });\n  }\n\n  async updateUserCredits(userId: string, amount: number, reason: string): Promise<{ success: boolean }> {\n    return this.request({\n      method: 'PUT',\n      url: `/web/users/${userId}/credits`,\n      data: { amount, reason }\n    });\n  }\n\n  async blockUser(userId: string, reason: string): Promise<{ success: boolean }> {\n    return this.request({\n      method: 'POST',\n      url: `/web/users/${userId}/block`,\n      data: { reason }\n    });\n  }\n\n  async unblockUser(userId: string): Promise<{ success: boolean }> {\n    return this.request({\n      method: 'POST',\n      url: `/web/users/${userId}/unblock`\n    });\n  }\n\n  // ===== LOGS & MONITORING =====\n  async getLogs(params: {\n    page?: number;\n    limit?: number;\n    level?: string;\n    source?: string;\n    search?: string;\n    dateRange?: { start: string; end: string };\n  }): Promise<PaginatedResponse<LogEntry>> {\n    const response = await this.client.get('/web/logs', { params });\n    return response.data;\n  }\n\n  async getSystemHealth(): Promise<SystemHealth> {\n    return this.request({\n      method: 'GET',\n      url: '/web/system/health'\n    });\n  }\n\n  async getAlerts(acknowledged: boolean = false): Promise<Alert[]> {\n    return this.request({\n      method: 'GET',\n      url: '/web/alerts',\n      params: { acknowledged }\n    });\n  }\n\n  async acknowledgeAlert(alertId: string): Promise<{ success: boolean }> {\n    return this.request({\n      method: 'POST',\n      url: `/web/alerts/${alertId}/acknowledge`\n    });\n  }\n\n  // ===== ANALYTICS =====\n  async getAdvancedAnalytics(type: string, params?: any): Promise<any> {\n    return this.request({\n      method: 'GET',\n      url: `/web/analytics/${type}`,\n      params\n    });\n  }\n\n  async exportData(type: string, format: 'csv' | 'json', params?: any): Promise<Blob> {\n    const response = await this.client.get(`/web/export/${type}`, {\n      params: { format, ...params },\n      responseType: 'blob'\n    });\n    return response.data;\n  }\n\n  // ===== AUTOMATION =====\n  async getAutomationRules(): Promise<any[]> {\n    return this.request({\n      method: 'GET',\n      url: '/web/automation/rules'\n    });\n  }\n\n  async createAutomationRule(rule: any): Promise<{ success: boolean; id: string }> {\n    return this.request({\n      method: 'POST',\n      url: '/web/automation/rules',\n      data: rule\n    });\n  }\n\n  async updateAutomationRule(ruleId: string, updates: any): Promise<{ success: boolean }> {\n    return this.request({\n      method: 'PUT',\n      url: `/web/automation/rules/${ruleId}`,\n      data: updates\n    });\n  }\n\n  async deleteAutomationRule(ruleId: string): Promise<{ success: boolean }> {\n    return this.request({\n      method: 'DELETE',\n      url: `/web/automation/rules/${ruleId}`\n    });\n  }\n}\n\n// Istanza singleton\nconst apiClient = new ApiClient();\n\n// Export oggetti API specifici\nexport const authApi = {\n  login: (email: string, password: string) => apiClient.login(email, password),\n  verifyToken: (token: string) => apiClient.verifyToken(token),\n  refreshToken: (token: string) => apiClient.refreshToken(token),\n};\n\nexport const dashboardApi = {\n  getOverview: () => apiClient.getDashboardOverview(),\n};\n\nexport const botApi = {\n  getStatus: () => apiClient.getBotStatus(),\n  restart: () => apiClient.restartBot(),\n  deployCommands: () => apiClient.deployCommands(),\n  sendMessage: (channelId: string, message: string) => apiClient.sendBotMessage(channelId, message),\n};\n\nexport const shippingApi = {\n  getStats: (dateRange?: { start: string; end: string }) => apiClient.getShippingStats(dateRange),\n  getQueueStatus: () => apiClient.getQueueStatus(),\n  getOrders: (params: any) => apiClient.getShippingOrders(params),\n  cancelOrder: (orderId: string) => apiClient.cancelShippingOrder(orderId),\n  getAnalytics: () => apiClient.getShippingAnalytics(),\n};\n\nexport const financeApi = {\n  getData: () => apiClient.getFinancialData(),\n  updateBudgetLimits: (limits: any) => apiClient.updateBudgetLimits(limits),\n  acknowledgeAlert: (alertId: string) => apiClient.acknowledgeFinancialAlert(alertId),\n};\n\nexport const usersApi = {\n  getUsers: (params: any) => apiClient.getBotUsers(params),\n  getUser: (userId: string) => apiClient.getBotUser(userId),\n  updateCredits: (userId: string, amount: number, reason: string) => \n    apiClient.updateUserCredits(userId, amount, reason),\n  blockUser: (userId: string, reason: string) => apiClient.blockUser(userId, reason),\n  unblockUser: (userId: string) => apiClient.unblockUser(userId),\n};\n\nexport const systemApi = {\n  getHealth: () => apiClient.getSystemHealth(),\n  getLogs: (params: any) => apiClient.getLogs(params),\n  getAlerts: (acknowledged?: boolean) => apiClient.getAlerts(acknowledged),\n  acknowledgeAlert: (alertId: string) => apiClient.acknowledgeAlert(alertId),\n};\n\nexport const analyticsApi = {\n  getAdvanced: (type: string, params?: any) => apiClient.getAdvancedAnalytics(type, params),\n  exportData: (type: string, format: 'csv' | 'json', params?: any) => \n    apiClient.exportData(type, format, params),\n};\n\nexport const automationApi = {\n  getRules: () => apiClient.getAutomationRules(),\n  createRule: (rule: any) => apiClient.createAutomationRule(rule),\n  updateRule: (ruleId: string, updates: any) => apiClient.updateAutomationRule(ruleId, updates),\n  deleteRule: (ruleId: string) => apiClient.deleteAutomationRule(ruleId),\n};\n\nexport default apiClient;","/Users/samuelebelfiore/Downloads/discord-bot-main/web-dashboard/src/hooks/useWebSocket.ts",["97"],"import { useState, useEffect, useRef } from 'react';\n\nexport interface WebSocketMessage {\n  type: 'notification' | 'order_update' | 'system_status' | 'user_activity';\n  data: any;\n  timestamp: string;\n}\n\nexport interface NotificationData {\n  id: string;\n  title: string;\n  message: string;\n  type: 'success' | 'warning' | 'error' | 'info';\n  timestamp: string;\n  userId?: string;\n  orderId?: string;\n}\n\nexport interface OrderUpdateData {\n  orderId: string;\n  status: string;\n  timestamp: string;\n  userId: string;\n  username: string;\n  details: {\n    carrier: string;\n    weight: string;\n    tracking?: string;\n  };\n}\n\nexport interface SystemStatusData {\n  status: 'online' | 'maintenance' | 'offline';\n  auraActive: boolean;\n  notificationPollerActive: boolean;\n  activeOrders: number;\n  systemLoad: number;\n}\n\nexport interface UserActivityData {\n  type: 'login' | 'order_created' | 'credits_added' | 'logout';\n  userId: string;\n  username: string;\n  details: any;\n  timestamp: string;\n}\n\ninterface UseWebSocketReturn {\n  socket: WebSocket | null;\n  isConnected: boolean;\n  notifications: NotificationData[];\n  orderUpdates: OrderUpdateData[];\n  systemStatus: SystemStatusData | null;\n  userActivity: UserActivityData[];\n  sendMessage: (message: any) => void;\n  clearNotifications: () => void;\n  markNotificationAsRead: (id: string) => void;\n}\n\nexport const useWebSocket = (url: string = 'ws://localhost:8080'): UseWebSocketReturn => {\n  const [socket, setSocket] = useState<WebSocket | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [notifications, setNotifications] = useState<NotificationData[]>([]);\n  const [orderUpdates, setOrderUpdates] = useState<OrderUpdateData[]>([]);\n  const [systemStatus, setSystemStatus] = useState<SystemStatusData | null>(null);\n  const [userActivity, setUserActivity] = useState<UserActivityData[]>([]);\n  \n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const maxReconnectAttempts = 5;\n  const [reconnectAttempts, setReconnectAttempts] = useState(0);\n\n  useEffect(() => {\n    const connect = () => {\n      try {\n        const ws = new WebSocket(url);\n        \n        ws.onopen = () => {\n          console.log('WebSocket connected');\n          setIsConnected(true);\n          setReconnectAttempts(0);\n          \n          // Send authentication/init message\n          ws.send(JSON.stringify({\n            type: 'auth',\n            token: localStorage.getItem('auth_token'),\n            timestamp: new Date().toISOString()\n          }));\n        };\n\n        ws.onmessage = (event) => {\n          try {\n            const message: WebSocketMessage = JSON.parse(event.data);\n            handleMessage(message);\n          } catch (error) {\n            console.error('Error parsing WebSocket message:', error);\n          }\n        };\n\n        ws.onclose = () => {\n          console.log('WebSocket disconnected');\n          setIsConnected(false);\n          setSocket(null);\n          \n          // Auto-reconnect with exponential backoff\n          if (reconnectAttempts < maxReconnectAttempts) {\n            const timeout = Math.pow(2, reconnectAttempts) * 1000; // 1s, 2s, 4s, 8s, 16s\n            console.log(`Attempting to reconnect in ${timeout}ms...`);\n            \n            reconnectTimeoutRef.current = setTimeout(() => {\n              setReconnectAttempts(prev => prev + 1);\n              connect();\n            }, timeout);\n          }\n        };\n\n        ws.onerror = (error) => {\n          console.error('WebSocket error:', error);\n        };\n\n        setSocket(ws);\n      } catch (error) {\n        console.error('Error connecting to WebSocket:', error);\n      }\n    };\n\n    connect();\n\n    return () => {\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n      if (socket) {\n        socket.close();\n      }\n    };\n  }, [url, reconnectAttempts]);\n\n  const handleMessage = (message: WebSocketMessage) => {\n    switch (message.type) {\n      case 'notification':\n        const notification = message.data as NotificationData;\n        setNotifications(prev => [notification, ...prev].slice(0, 50)); // Keep only last 50\n        \n        // Show browser notification if permission granted\n        if (Notification.permission === 'granted') {\n          new Notification(notification.title, {\n            body: notification.message,\n            icon: '/favicon.ico',\n            tag: notification.id\n          });\n        }\n        break;\n\n      case 'order_update':\n        const orderUpdate = message.data as OrderUpdateData;\n        setOrderUpdates(prev => [orderUpdate, ...prev].slice(0, 100)); // Keep only last 100\n        \n        // Also add as notification\n        const orderNotification: NotificationData = {\n          id: `order_${orderUpdate.orderId}_${Date.now()}`,\n          title: 'Aggiornamento Ordine',\n          message: `Ordine ${orderUpdate.orderId.substring(0, 8)}... - Status: ${orderUpdate.status}`,\n          type: orderUpdate.status === 'completed' ? 'success' : \n                orderUpdate.status === 'failed' ? 'error' : 'info',\n          timestamp: orderUpdate.timestamp,\n          orderId: orderUpdate.orderId,\n          userId: orderUpdate.userId\n        };\n        setNotifications(prev => [orderNotification, ...prev]);\n        break;\n\n      case 'system_status':\n        const status = message.data as SystemStatusData;\n        setSystemStatus(status);\n        break;\n\n      case 'user_activity':\n        const activity = message.data as UserActivityData;\n        setUserActivity(prev => [activity, ...prev].slice(0, 200)); // Keep only last 200\n        break;\n\n      default:\n        console.log('Unknown message type:', message.type);\n    }\n  };\n\n  const sendMessage = (message: any) => {\n    if (socket && socket.readyState === WebSocket.OPEN) {\n      socket.send(JSON.stringify({\n        ...message,\n        timestamp: new Date().toISOString()\n      }));\n    } else {\n      console.warn('WebSocket not connected, cannot send message');\n    }\n  };\n\n  const clearNotifications = () => {\n    setNotifications([]);\n  };\n\n  const markNotificationAsRead = (id: string) => {\n    setNotifications(prev => \n      prev.map(notif => \n        notif.id === id \n          ? { ...notif, read: true } \n          : notif\n      )\n    );\n  };\n\n  return {\n    socket,\n    isConnected,\n    notifications,\n    orderUpdates,\n    systemStatus,\n    userActivity,\n    sendMessage,\n    clearNotifications,\n    markNotificationAsRead\n  };\n};","/Users/samuelebelfiore/Downloads/discord-bot-main/web-dashboard/src/components/StatusBadge.tsx",["98"],"import React from 'react';\nimport { \n  CheckCircleIcon, \n  ExclamationTriangleIcon, \n  XCircleIcon,\n  ClockIcon \n} from '@heroicons/react/24/solid';\n\ninterface StatusBadgeProps {\n  status: 'healthy' | 'degraded' | 'down' | 'online' | 'offline' | 'pending' | 'processing' | 'completed' | 'failed' | 'cancelled';\n  text?: string;\n  size?: 'sm' | 'md' | 'lg';\n  showIcon?: boolean;\n}\n\nconst StatusBadge: React.FC<StatusBadgeProps> = ({ \n  status, \n  text, \n  size = 'sm', \n  showIcon = true \n}) => {\n  const getStatusConfig = (status: string) => {\n    switch (status) {\n      case 'healthy':\n      case 'online':\n      case 'completed':\n        return {\n          className: 'status-online',\n          icon: CheckCircleIcon,\n          defaultText: 'Healthy'\n        };\n      case 'degraded':\n      case 'pending':\n      case 'processing':\n        return {\n          className: 'status-warning',\n          icon: ClockIcon,\n          defaultText: 'Degraded'\n        };\n      case 'down':\n      case 'offline':\n      case 'failed':\n        return {\n          className: 'status-offline',\n          icon: XCircleIcon,\n          defaultText: 'Down'\n        };\n      case 'cancelled':\n        return {\n          className: 'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400',\n          icon: XCircleIcon,\n          defaultText: 'Cancelled'\n        };\n      default:\n        return {\n          className: 'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400',\n          icon: ClockIcon,\n          defaultText: 'Unknown'\n        };\n    }\n  };\n\n  const getSizeClasses = (size: string) => {\n    switch (size) {\n      case 'lg':\n        return 'px-3 py-1 text-sm';\n      case 'md':\n        return 'px-2.5 py-0.5 text-sm';\n      case 'sm':\n      default:\n        return 'px-2 py-0.5 text-xs';\n    }\n  };\n\n  const config = getStatusConfig(status);\n  const Icon = config.icon;\n  const displayText = text || config.defaultText;\n\n  return (\n    <span className={`${config.className} ${getSizeClasses(size)} inline-flex items-center space-x-1`}>\n      {showIcon && <Icon className={`${size === 'lg' ? 'w-4 h-4' : 'w-3 h-3'}`} />}\n      <span>{displayText}</span>\n    </span>\n  );\n};\n\nexport default StatusBadge;","/Users/samuelebelfiore/Downloads/discord-bot-main/web-dashboard/src/components/KPICard.tsx",["99"],"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { ArrowUpIcon, ArrowDownIcon } from '@heroicons/react/24/solid';\nimport { KPI } from '../types';\n\ninterface KPICardProps {\n  kpi: KPI;\n}\n\nconst KPICard: React.FC<KPICardProps> = ({ kpi }) => {\n  const formatValue = (value: string | number, format: string) => {\n    if (typeof value === 'string') return value;\n    \n    switch (format) {\n      case 'currency':\n        return new Intl.NumberFormat('it-IT', {\n          style: 'currency',\n          currency: 'EUR',\n          minimumFractionDigits: 2\n        }).format(value);\n      case 'percentage':\n        return `${value}%`;\n      case 'duration':\n        return `${Math.floor(value / 3600)}h ${Math.floor((value % 3600) / 60)}m`;\n      case 'number':\n      default:\n        return new Intl.NumberFormat('it-IT').format(value);\n    }\n  };\n\n  const getChangeColor = (changeType: string) => {\n    switch (changeType) {\n      case 'increase':\n        return 'text-success-600';\n      case 'decrease':\n        return 'text-error-600';\n      case 'neutral':\n      default:\n        return 'text-gray-500';\n    }\n  };\n\n  const getChangeIcon = (changeType: string) => {\n    switch (changeType) {\n      case 'increase':\n        return ArrowUpIcon;\n      case 'decrease':\n        return ArrowDownIcon;\n      case 'neutral':\n      default:\n        return null;\n    }\n  };\n\n  const ChangeIcon = getChangeIcon(kpi.changeType);\n\n  return (\n    <motion.div\n      whileHover={{ scale: 1.02 }}\n      className=\"card-hover bg-white dark:bg-gray-800\"\n    >\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n          {kpi.label}\n        </h3>\n        \n        {kpi.change !== 0 && (\n          <div className={`flex items-center space-x-1 ${getChangeColor(kpi.changeType)}`}>\n            {ChangeIcon && <ChangeIcon className=\"w-4 h-4\" />}\n            <span className=\"text-xs font-medium\">\n              {Math.abs(kpi.change).toFixed(1)}%\n            </span>\n          </div>\n        )}\n      </div>\n\n      {/* Value */}\n      <div className=\"mb-4\">\n        <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n          {formatValue(kpi.value, kpi.format)}\n        </div>\n      </div>\n\n      {/* Trend Mini Chart */}\n      {kpi.trend && kpi.trend.length > 0 && (\n        <div className=\"h-12\">\n          <svg className=\"w-full h-full\" viewBox=\"0 0 100 40\" preserveAspectRatio=\"none\">\n            <defs>\n              <linearGradient id={`gradient-${kpi.label}`} x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n                <stop \n                  offset=\"0%\" \n                  stopColor={kpi.changeType === 'increase' ? '#22C55E' : kpi.changeType === 'decrease' ? '#EF4444' : '#3B82F6'} \n                  stopOpacity={0.3}\n                />\n                <stop \n                  offset=\"100%\" \n                  stopColor={kpi.changeType === 'increase' ? '#22C55E' : kpi.changeType === 'decrease' ? '#EF4444' : '#3B82F6'} \n                  stopOpacity={0}\n                />\n              </linearGradient>\n            </defs>\n            \n            {/* Area */}\n            <path\n              d={generatePath(kpi.trend, true)}\n              fill={`url(#gradient-${kpi.label})`}\n            />\n            \n            {/* Line */}\n            <path\n              d={generatePath(kpi.trend, false)}\n              fill=\"none\"\n              stroke={kpi.changeType === 'increase' ? '#22C55E' : kpi.changeType === 'decrease' ? '#EF4444' : '#3B82F6'}\n              strokeWidth=\"2\"\n              className=\"drop-shadow-sm\"\n            />\n          </svg>\n        </div>\n      )}\n    </motion.div>\n  );\n};\n\n// Helper function to generate SVG path\nfunction generatePath(data: Array<{ x: string; y: number }>, isArea: boolean): string {\n  if (data.length === 0) return '';\n\n  const maxY = Math.max(...data.map(d => d.y));\n  const minY = Math.min(...data.map(d => d.y));\n  const range = maxY - minY || 1;\n\n  const points = data.map((point, index) => {\n    const x = (index / (data.length - 1)) * 100;\n    const y = 40 - ((point.y - minY) / range) * 35; // Leave 5px padding top/bottom\n    return `${x},${y}`;\n  });\n\n  if (isArea) {\n    const firstX = points[0].split(',')[0];\n    const lastX = points[points.length - 1].split(',')[0];\n    return `M ${firstX},40 L ${points.join(' L ')} L ${lastX},40 Z`;\n  } else {\n    return `M ${points.join(' L ')}`;\n  }\n}\n\nexport default KPICard;","/Users/samuelebelfiore/Downloads/discord-bot-main/web-dashboard/src/components/NotificationCenter.tsx",["100"],"import React, { useState, useEffect } from 'react';\nimport { \n  Bell, \n  X, \n  Check, \n  AlertCircle, \n  Info, \n  CheckCircle, \n  AlertTriangle,\n  Package,\n  Users,\n  Activity,\n  Settings,\n  Trash2,\n  Filter\n} from 'lucide-react';\nimport { useWebSocket, NotificationData, OrderUpdateData, UserActivityData } from '../hooks/useWebSocket';\n\ninterface NotificationCenterProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst NotificationCenter: React.FC<NotificationCenterProps> = ({ isOpen, onClose }) => {\n  const { \n    notifications, \n    orderUpdates, \n    userActivity, \n    isConnected, \n    systemStatus,\n    clearNotifications, \n    markNotificationAsRead \n  } = useWebSocket();\n  \n  const [activeTab, setActiveTab] = useState<'notifications' | 'orders' | 'activity'>('notifications');\n  const [filter, setFilter] = useState<'all' | 'unread' | 'success' | 'warning' | 'error'>('all');\n\n  const getNotificationIcon = (type: string) => {\n    switch (type) {\n      case 'success': return <CheckCircle className=\"w-5 h-5 text-green-500\" />;\n      case 'warning': return <AlertTriangle className=\"w-5 h-5 text-yellow-500\" />;\n      case 'error': return <AlertCircle className=\"w-5 h-5 text-red-500\" />;\n      case 'info': return <Info className=\"w-5 h-5 text-blue-500\" />;\n      default: return <Bell className=\"w-5 h-5 text-gray-500\" />;\n    }\n  };\n\n  const getOrderStatusColor = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'completed': return 'text-green-600 bg-green-100';\n      case 'processing': return 'text-blue-600 bg-blue-100';\n      case 'pending': return 'text-yellow-600 bg-yellow-100';\n      case 'failed': return 'text-red-600 bg-red-100';\n      default: return 'text-gray-600 bg-gray-100';\n    }\n  };\n\n  const getActivityIcon = (type: string) => {\n    switch (type) {\n      case 'login': return <Users className=\"w-4 h-4 text-blue-500\" />;\n      case 'order_created': return <Package className=\"w-4 h-4 text-green-500\" />;\n      case 'credits_added': return <CheckCircle className=\"w-4 h-4 text-purple-500\" />;\n      case 'logout': return <Users className=\"w-4 h-4 text-gray-500\" />;\n      default: return <Activity className=\"w-4 h-4 text-gray-500\" />;\n    }\n  };\n\n  const filteredNotifications = notifications.filter(notif => {\n    if (filter === 'all') return true;\n    if (filter === 'unread') return !notif.read;\n    return notif.type === filter;\n  });\n\n  const formatTime = (timestamp: string) => {\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diff = now.getTime() - date.getTime();\n    \n    if (diff < 60000) return 'Ora';\n    if (diff < 3600000) return `${Math.floor(diff / 60000)}m fa`;\n    if (diff < 86400000) return `${Math.floor(diff / 3600000)}h fa`;\n    return date.toLocaleDateString('it-IT');\n  };\n\n  // Request notification permission on component mount\n  useEffect(() => {\n    if (Notification.permission === 'default') {\n      Notification.requestPermission();\n    }\n  }, []);\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 overflow-hidden\">\n      <div className=\"absolute inset-0 bg-black bg-opacity-25\" onClick={onClose} />\n      \n      <div className=\"absolute right-0 top-0 h-full w-full max-w-md bg-white shadow-2xl\">\n        <div className=\"flex h-full flex-col\">\n          {/* Header */}\n          <div className=\"border-b bg-white px-6 py-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <Bell className=\"w-6 h-6 text-blue-600\" />\n                <h2 className=\"text-lg font-semibold\">Centro Notifiche</h2>\n                <div className={`w-2 h-2 rounded-full ${isConnected ? 'bg-green-400' : 'bg-red-400'}`} />\n              </div>\n              <button\n                onClick={onClose}\n                className=\"p-2 text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-100\"\n              >\n                <X className=\"w-5 h-5\" />\n              </button>\n            </div>\n\n            {/* System Status */}\n            {systemStatus && (\n              <div className=\"mt-3 p-2 bg-gray-50 rounded-lg\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span>Sistema: {systemStatus.status}</span>\n                  <span>AURA: {systemStatus.auraActive ? '✅' : '❌'}</span>\n                  <span>Load: {systemStatus.systemLoad}%</span>\n                </div>\n              </div>\n            )}\n\n            {/* Tabs */}\n            <div className=\"flex mt-4 space-x-1 bg-gray-100 rounded-lg p-1\">\n              <button\n                onClick={() => setActiveTab('notifications')}\n                className={`flex-1 py-2 px-3 text-sm font-medium rounded-md transition-colors ${\n                  activeTab === 'notifications'\n                    ? 'bg-white text-blue-600 shadow-sm'\n                    : 'text-gray-600 hover:text-gray-900'\n                }`}\n              >\n                Notifiche ({notifications.length})\n              </button>\n              <button\n                onClick={() => setActiveTab('orders')}\n                className={`flex-1 py-2 px-3 text-sm font-medium rounded-md transition-colors ${\n                  activeTab === 'orders'\n                    ? 'bg-white text-blue-600 shadow-sm'\n                    : 'text-gray-600 hover:text-gray-900'\n                }`}\n              >\n                Ordini ({orderUpdates.length})\n              </button>\n              <button\n                onClick={() => setActiveTab('activity')}\n                className={`flex-1 py-2 px-3 text-sm font-medium rounded-md transition-colors ${\n                  activeTab === 'activity'\n                    ? 'bg-white text-blue-600 shadow-sm'\n                    : 'text-gray-600 hover:text-gray-900'\n                }`}\n              >\n                Attività ({userActivity.length})\n              </button>\n            </div>\n          </div>\n\n          {/* Filters and Actions */}\n          <div className=\"border-b bg-gray-50 px-6 py-3\">\n            <div className=\"flex items-center justify-between\">\n              {activeTab === 'notifications' && (\n                <select\n                  value={filter}\n                  onChange={(e) => setFilter(e.target.value as any)}\n                  className=\"text-sm border rounded px-2 py-1\"\n                >\n                  <option value=\"all\">Tutte</option>\n                  <option value=\"unread\">Non lette</option>\n                  <option value=\"success\">Successo</option>\n                  <option value=\"warning\">Avvisi</option>\n                  <option value=\"error\">Errori</option>\n                </select>\n              )}\n\n              <div className=\"flex gap-2\">\n                {activeTab === 'notifications' && (\n                  <button\n                    onClick={clearNotifications}\n                    className=\"p-1 text-gray-500 hover:text-red-600 rounded\"\n                    title=\"Cancella tutte\"\n                  >\n                    <Trash2 className=\"w-4 h-4\" />\n                  </button>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Content */}\n          <div className=\"flex-1 overflow-y-auto\">\n            {/* Notifications Tab */}\n            {activeTab === 'notifications' && (\n              <div className=\"divide-y\">\n                {filteredNotifications.length === 0 ? (\n                  <div className=\"p-6 text-center text-gray-500\">\n                    <Bell className=\"w-12 h-12 mx-auto mb-2 text-gray-300\" />\n                    <p>Nessuna notifica</p>\n                  </div>\n                ) : (\n                  filteredNotifications.map((notification) => (\n                    <div\n                      key={notification.id}\n                      className={`p-4 hover:bg-gray-50 ${!notification.read ? 'bg-blue-50' : ''}`}\n                    >\n                      <div className=\"flex gap-3\">\n                        {getNotificationIcon(notification.type)}\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-start justify-between\">\n                            <h4 className=\"text-sm font-medium text-gray-900 truncate\">\n                              {notification.title}\n                            </h4>\n                            <div className=\"flex items-center gap-2 ml-2\">\n                              <span className=\"text-xs text-gray-500\">\n                                {formatTime(notification.timestamp)}\n                              </span>\n                              {!notification.read && (\n                                <button\n                                  onClick={() => markNotificationAsRead(notification.id)}\n                                  className=\"p-1 text-blue-600 hover:bg-blue-100 rounded\"\n                                >\n                                  <Check className=\"w-3 h-3\" />\n                                </button>\n                              )}\n                            </div>\n                          </div>\n                          <p className=\"text-sm text-gray-600 mt-1\">{notification.message}</p>\n                          {notification.orderId && (\n                            <div className=\"mt-2 text-xs text-gray-500\">\n                              Ordine: {notification.orderId.substring(0, 8)}...\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))\n                )}\n              </div>\n            )}\n\n            {/* Orders Tab */}\n            {activeTab === 'orders' && (\n              <div className=\"divide-y\">\n                {orderUpdates.length === 0 ? (\n                  <div className=\"p-6 text-center text-gray-500\">\n                    <Package className=\"w-12 h-12 mx-auto mb-2 text-gray-300\" />\n                    <p>Nessun aggiornamento ordini</p>\n                  </div>\n                ) : (\n                  orderUpdates.map((order, index) => (\n                    <div key={`${order.orderId}-${index}`} className=\"p-4 hover:bg-gray-50\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            <Package className=\"w-4 h-4 text-blue-500\" />\n                            <span className=\"text-sm font-medium\">\n                              {order.orderId.substring(0, 12)}...\n                            </span>\n                            <span className={`px-2 py-1 text-xs font-medium rounded-full ${getOrderStatusColor(order.status)}`}>\n                              {order.status}\n                            </span>\n                          </div>\n                          <p className=\"text-sm text-gray-600\">@{order.username}</p>\n                          <div className=\"text-xs text-gray-500 mt-1\">\n                            {order.details.carrier.toUpperCase()} • {order.details.weight}\n                            {order.details.tracking && (\n                              <span className=\"ml-2\">• Tracking: {order.details.tracking}</span>\n                            )}\n                          </div>\n                        </div>\n                        <span className=\"text-xs text-gray-500\">\n                          {formatTime(order.timestamp)}\n                        </span>\n                      </div>\n                    </div>\n                  ))\n                )}\n              </div>\n            )}\n\n            {/* Activity Tab */}\n            {activeTab === 'activity' && (\n              <div className=\"divide-y\">\n                {userActivity.length === 0 ? (\n                  <div className=\"p-6 text-center text-gray-500\">\n                    <Activity className=\"w-12 h-12 mx-auto mb-2 text-gray-300\" />\n                    <p>Nessuna attività</p>\n                  </div>\n                ) : (\n                  userActivity.map((activity, index) => (\n                    <div key={`${activity.userId}-${index}`} className=\"p-4 hover:bg-gray-50\">\n                      <div className=\"flex items-start gap-3\">\n                        {getActivityIcon(activity.type)}\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-sm font-medium\">@{activity.username}</span>\n                            <span className=\"text-xs text-gray-500\">\n                              {formatTime(activity.timestamp)}\n                            </span>\n                          </div>\n                          <p className=\"text-sm text-gray-600 mt-1\">\n                            {activity.type === 'login' && 'Si è connesso alla dashboard'}\n                            {activity.type === 'order_created' && `Ha creato un ordine ${activity.details?.carrier || ''}`}\n                            {activity.type === 'credits_added' && `Ha ricevuto €${activity.details?.amount || '0'} crediti`}\n                            {activity.type === 'logout' && 'Si è disconnesso dalla dashboard'}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  ))\n                )}\n              </div>\n            )}\n          </div>\n\n          {/* Footer */}\n          <div className=\"border-t bg-gray-50 px-6 py-3\">\n            <div className=\"flex items-center justify-between text-xs text-gray-500\">\n              <span>\n                {isConnected ? (\n                  <span className=\"flex items-center gap-1\">\n                    <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\" />\n                    Live • Connesso\n                  </span>\n                ) : (\n                  <span className=\"flex items-center gap-1\">\n                    <div className=\"w-2 h-2 bg-red-400 rounded-full\" />\n                    Disconnesso • Riconnessione...\n                  </span>\n                )}\n              </span>\n              <button className=\"flex items-center gap-1 hover:text-gray-700\">\n                <Settings className=\"w-3 h-3\" />\n                Impostazioni\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NotificationCenter;","/Users/samuelebelfiore/Downloads/discord-bot-main/web-dashboard/src/components/CommandPalette/CommandPalette.tsx",["101"],"import React, { useState, useEffect, useRef, Fragment } from 'react';\nimport { Dialog, Transition } from '@headlessui/react';\nimport { MagnifyingGlassIcon, CommandLineIcon } from '@heroicons/react/24/outline';\nimport { motion } from 'framer-motion';\nimport { useNavigate } from 'react-router-dom';\n\ninterface Command {\n  id: string;\n  title: string;\n  subtitle?: string;\n  action: () => void;\n  icon?: React.ElementType;\n  keywords: string[];\n  category: 'navigation' | 'actions' | 'bot' | 'system';\n}\n\ninterface CommandPaletteProps {\n  open: boolean;\n  onClose: () => void;\n}\n\nconst CommandPalette: React.FC<CommandPaletteProps> = ({ open, onClose }) => {\n  const [query, setQuery] = useState('');\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const navigate = useNavigate();\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const commands: Command[] = [\n    // Navigation\n    {\n      id: 'nav-dashboard',\n      title: 'Dashboard Overview',\n      subtitle: 'Vai alla dashboard principale',\n      action: () => navigate('/'),\n      keywords: ['dashboard', 'home', 'overview', 'principale'],\n      category: 'navigation'\n    },\n    {\n      id: 'nav-shipping',\n      title: 'Shipping Management',\n      subtitle: 'Gestione spedizioni e ordini',\n      action: () => navigate('/shipping'),\n      keywords: ['shipping', 'spedizioni', 'ordini', 'etichette'],\n      category: 'navigation'\n    },\n    {\n      id: 'nav-users',\n      title: 'Gestione Utenti',\n      subtitle: 'Visualizza e gestisci utenti bot',\n      action: () => navigate('/users'),\n      keywords: ['users', 'utenti', 'gestione'],\n      category: 'navigation'\n    },\n    {\n      id: 'nav-finance',\n      title: 'Financial Overview',\n      subtitle: 'Controllo costi e budget',\n      action: () => navigate('/finance'),\n      keywords: ['finance', 'finanza', 'costi', 'budget'],\n      category: 'navigation'\n    },\n    {\n      id: 'nav-analytics',\n      title: 'Analytics',\n      subtitle: 'Report e statistiche avanzate',\n      action: () => navigate('/analytics'),\n      keywords: ['analytics', 'statistiche', 'report'],\n      category: 'navigation'\n    },\n    {\n      id: 'nav-logs',\n      title: 'System Logs',\n      subtitle: 'Visualizza log di sistema',\n      action: () => navigate('/logs'),\n      keywords: ['logs', 'debug', 'errori'],\n      category: 'navigation'\n    },\n    \n    // Actions\n    {\n      id: 'action-restart-bot',\n      title: 'Restart Bot',\n      subtitle: 'Riavvia il bot Discord',\n      action: () => {\n        // TODO: Implementare restart bot\n        console.log('Restart bot triggered');\n      },\n      keywords: ['restart', 'riavvia', 'bot'],\n      category: 'bot'\n    },\n    {\n      id: 'action-deploy-commands',\n      title: 'Deploy Commands',\n      subtitle: 'Aggiorna comandi Discord',\n      action: () => {\n        // TODO: Implementare deploy commands\n        console.log('Deploy commands triggered');\n      },\n      keywords: ['deploy', 'commands', 'comandi', 'aggiorna'],\n      category: 'bot'\n    },\n    {\n      id: 'action-refresh-data',\n      title: 'Refresh Dashboard',\n      subtitle: 'Aggiorna tutti i dati',\n      action: () => {\n        window.location.reload();\n      },\n      keywords: ['refresh', 'aggiorna', 'reload'],\n      category: 'system'\n    },\n    {\n      id: 'action-export-orders',\n      title: 'Export Orders',\n      subtitle: 'Esporta ordini in CSV',\n      action: () => {\n        // TODO: Implementare export\n        console.log('Export orders triggered');\n      },\n      keywords: ['export', 'esporta', 'csv', 'ordini'],\n      category: 'actions'\n    }\n  ];\n\n  const filteredCommands = query === ''\n    ? commands\n    : commands.filter((command) => {\n        const searchText = `${command.title} ${command.subtitle} ${command.keywords.join(' ')}`.toLowerCase();\n        return searchText.includes(query.toLowerCase());\n      });\n\n  const executeCommand = (command: Command) => {\n    command.action();\n    onClose();\n    setQuery('');\n    setSelectedIndex(0);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    switch (e.key) {\n      case 'ArrowDown':\n        e.preventDefault();\n        setSelectedIndex((prev) => \n          prev < filteredCommands.length - 1 ? prev + 1 : 0\n        );\n        break;\n      case 'ArrowUp':\n        e.preventDefault();\n        setSelectedIndex((prev) => \n          prev > 0 ? prev - 1 : filteredCommands.length - 1\n        );\n        break;\n      case 'Enter':\n        e.preventDefault();\n        if (filteredCommands[selectedIndex]) {\n          executeCommand(filteredCommands[selectedIndex]);\n        }\n        break;\n      case 'Escape':\n        onClose();\n        break;\n    }\n  };\n\n  useEffect(() => {\n    if (open && inputRef.current) {\n      inputRef.current.focus();\n    }\n    setSelectedIndex(0);\n  }, [open]);\n\n  useEffect(() => {\n    setSelectedIndex(0);\n  }, [query]);\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case 'navigation':\n        return '🧭';\n      case 'actions':\n        return '⚡';\n      case 'bot':\n        return '🤖';\n      case 'system':\n        return '⚙️';\n      default:\n        return '📝';\n    }\n  };\n\n  const groupedCommands = filteredCommands.reduce((acc, command) => {\n    if (!acc[command.category]) {\n      acc[command.category] = [];\n    }\n    acc[command.category].push(command);\n    return acc;\n  }, {} as Record<string, Command[]>);\n\n  return (\n    <Transition appear show={open} as={Fragment}>\n      <Dialog as=\"div\" className=\"relative z-50\" onClose={onClose}>\n        <Transition.Child\n          as={Fragment}\n          enter=\"ease-out duration-300\"\n          enterFrom=\"opacity-0\"\n          enterTo=\"opacity-100\"\n          leave=\"ease-in duration-200\"\n          leaveFrom=\"opacity-100\"\n          leaveTo=\"opacity-0\"\n        >\n          <div className=\"fixed inset-0 bg-black bg-opacity-25 backdrop-blur-sm\" />\n        </Transition.Child>\n\n        <div className=\"fixed inset-0 overflow-y-auto\">\n          <div className=\"flex min-h-full items-start justify-center p-4 text-center sm:p-8 pt-[10vh]\">\n            <Transition.Child\n              as={Fragment}\n              enter=\"ease-out duration-300\"\n              enterFrom=\"opacity-0 scale-95\"\n              enterTo=\"opacity-100 scale-100\"\n              leave=\"ease-in duration-200\"\n              leaveFrom=\"opacity-100 scale-100\"\n              leaveTo=\"opacity-0 scale-95\"\n            >\n              <Dialog.Panel className=\"w-full max-w-lg transform overflow-hidden rounded-xl bg-white dark:bg-gray-800 shadow-2xl transition-all\">\n                {/* Header */}\n                <div className=\"relative\">\n                  <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <MagnifyingGlassIcon className=\"h-5 w-5 text-gray-400\" />\n                  </div>\n                  <input\n                    ref={inputRef}\n                    type=\"text\"\n                    className=\"command-input w-full pl-10 pr-4 py-4 text-gray-900 dark:text-gray-100 placeholder-gray-500 bg-transparent border-0 focus:ring-0\"\n                    placeholder=\"Digita un comando o cerca...\"\n                    value={query}\n                    onChange={(e) => setQuery(e.target.value)}\n                    onKeyDown={handleKeyDown}\n                  />\n                  <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center\">\n                    <div className=\"flex items-center space-x-1 text-xs text-gray-400\">\n                      <kbd className=\"px-1.5 py-0.5 rounded bg-gray-100 dark:bg-gray-700\">↑↓</kbd>\n                      <kbd className=\"px-1.5 py-0.5 rounded bg-gray-100 dark:bg-gray-700\">↵</kbd>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Results */}\n                <div className=\"border-t border-gray-200 dark:border-gray-700 max-h-96 overflow-y-auto custom-scrollbar\">\n                  {Object.keys(groupedCommands).length === 0 ? (\n                    <div className=\"p-8 text-center\">\n                      <CommandLineIcon className=\"mx-auto h-12 w-12 text-gray-400\" />\n                      <h3 className=\"mt-2 text-sm font-medium text-gray-900 dark:text-gray-100\">\n                        Nessun comando trovato\n                      </h3>\n                      <p className=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">\n                        Prova con un termine diverso\n                      </p>\n                    </div>\n                  ) : (\n                    <div className=\"py-2\">\n                      {Object.entries(groupedCommands).map(([category, commands], categoryIndex) => (\n                        <div key={category}>\n                          {Object.keys(groupedCommands).length > 1 && (\n                            <div className=\"px-4 py-2 text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider flex items-center space-x-2\">\n                              <span>{getCategoryIcon(category)}</span>\n                              <span>{category}</span>\n                            </div>\n                          )}\n                          \n                          {commands.map((command, commandIndex) => {\n                            const globalIndex = Object.entries(groupedCommands)\n                              .slice(0, categoryIndex)\n                              .reduce((acc, [, cmds]) => acc + cmds.length, 0) + commandIndex;\n                            \n                            return (\n                              <motion.button\n                                key={command.id}\n                                onClick={() => executeCommand(command)}\n                                className={`w-full px-4 py-3 text-left flex items-center space-x-3 hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors ${\n                                  selectedIndex === globalIndex\n                                    ? 'bg-primary-50 dark:bg-primary-900/20 border-r-2 border-primary-500'\n                                    : ''\n                                }`}\n                                whileHover={{ x: 2 }}\n                                transition={{ duration: 0.1 }}\n                              >\n                                <div className=\"flex-1 min-w-0\">\n                                  <div className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">\n                                    {command.title}\n                                  </div>\n                                  {command.subtitle && (\n                                    <div className=\"text-xs text-gray-500 dark:text-gray-400 truncate\">\n                                      {command.subtitle}\n                                    </div>\n                                  )}\n                                </div>\n                                \n                                {selectedIndex === globalIndex && (\n                                  <div className=\"flex-shrink-0 text-xs text-primary-600 dark:text-primary-400\">\n                                    ↵\n                                  </div>\n                                )}\n                              </motion.button>\n                            );\n                          })}\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n\n                {/* Footer */}\n                <div className=\"border-t border-gray-200 dark:border-gray-700 px-4 py-3 bg-gray-50 dark:bg-gray-700/50\">\n                  <div className=\"flex items-center justify-between text-xs text-gray-500 dark:text-gray-400\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"flex items-center space-x-1\">\n                        <kbd className=\"px-1.5 py-0.5 rounded bg-white dark:bg-gray-600 text-gray-700 dark:text-gray-300\">↵</kbd>\n                        <span>per eseguire</span>\n                      </div>\n                      <div className=\"flex items-center space-x-1\">\n                        <kbd className=\"px-1.5 py-0.5 rounded bg-white dark:bg-gray-600 text-gray-700 dark:text-gray-300\">Esc</kbd>\n                        <span>per chiudere</span>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-1\">\n                      <span>⌘K per aprire</span>\n                    </div>\n                  </div>\n                </div>\n              </Dialog.Panel>\n            </Transition.Child>\n          </div>\n        </div>\n      </Dialog>\n    </Transition>\n  );\n};\n\nexport default CommandPalette;","/Users/samuelebelfiore/Downloads/discord-bot-main/web-dashboard/src/components/StatusIndicator/StatusIndicator.tsx",["102"],"import React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { systemApi } from '../../services/api';\nimport StatusBadge from '../StatusBadge';\n\nconst StatusIndicator: React.FC = () => {\n  const [systemHealth, setSystemHealth] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchSystemHealth = async () => {\n      try {\n        const health = await systemApi.getHealth();\n        setSystemHealth(health);\n      } catch (error) {\n        console.error('Error fetching system health:', error);\n        // Fallback data\n        setSystemHealth({\n          overallStatus: 'degraded',\n          services: {\n            bot: { online: false }\n          }\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchSystemHealth();\n    \n    // Update every 30 seconds\n    const interval = setInterval(fetchSystemHealth, 30000);\n    return () => clearInterval(interval);\n  }, []);\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center space-x-2 p-2 bg-gray-50 dark:bg-gray-700/50 rounded-lg\">\n        <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-pulse\" />\n        <span className=\"text-xs text-gray-500\">Caricamento...</span>\n      </div>\n    );\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'healthy': return 'bg-success-500';\n      case 'degraded': return 'bg-warning-500';\n      case 'down': return 'bg-error-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.95 }}\n      animate={{ opacity: 1, scale: 1 }}\n      className=\"p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg\"\n    >\n      <div className=\"flex items-center justify-between mb-2\">\n        <span className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">\n          System Status\n        </span>\n        <div className=\"flex items-center space-x-2\">\n          <motion.div\n            className={`w-2 h-2 rounded-full ${getStatusColor(systemHealth?.overallStatus)}`}\n            animate={{ scale: [1, 1.2, 1] }}\n            transition={{ duration: 2, repeat: Infinity }}\n          />\n          <StatusBadge \n            status={systemHealth?.overallStatus || 'down'} \n            size=\"sm\"\n            showIcon={false}\n          />\n        </div>\n      </div>\n      \n      <div className=\"space-y-1 text-xs\">\n        <div className=\"flex justify-between\">\n          <span className=\"text-gray-500 dark:text-gray-400\">Bot:</span>\n          <span className={`${systemHealth?.services?.bot?.online ? 'text-success-600' : 'text-error-600'}`}>\n            {systemHealth?.services?.bot?.online ? 'Online' : 'Offline'}\n          </span>\n        </div>\n        <div className=\"flex justify-between\">\n          <span className=\"text-gray-500 dark:text-gray-400\">API:</span>\n          <span className=\"text-success-600\">Healthy</span>\n        </div>\n      </div>\n    </motion.div>\n  );\n};\n\nexport default StatusIndicator;","/Users/samuelebelfiore/Downloads/discord-bot-main/web-dashboard/src/components/UserMenu/UserMenu.tsx",["103"],"import React, { Fragment } from 'react';\nimport { Menu, Transition } from '@headlessui/react';\nimport { \n  UserCircleIcon, \n  Cog6ToothIcon, \n  ArrowRightOnRectangleIcon,\n  ChevronDownIcon \n} from '@heroicons/react/24/outline';\nimport { User } from '../../types';\n\ninterface UserMenuProps {\n  user: User | null;\n  onLogout: () => void;\n}\n\nconst UserMenu: React.FC<UserMenuProps> = ({ user, onLogout }) => {\n  if (!user) {\n    return null;\n  }\n\n  const getRoleColor = (role: string) => {\n    switch (role) {\n      case 'super-admin':\n        return 'text-purple-600 dark:text-purple-400';\n      case 'admin':\n        return 'text-primary-600 dark:text-primary-400';\n      case 'viewer':\n        return 'text-gray-600 dark:text-gray-400';\n      default:\n        return 'text-gray-600 dark:text-gray-400';\n    }\n  };\n\n  const getRoleBadge = (role: string) => {\n    const baseClasses = 'text-xs px-2 py-0.5 rounded-full font-medium';\n    \n    switch (role) {\n      case 'super-admin':\n        return `${baseClasses} bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400`;\n      case 'admin':\n        return `${baseClasses} bg-primary-100 text-primary-800 dark:bg-primary-900/20 dark:text-primary-400`;\n      case 'viewer':\n        return `${baseClasses} bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-400`;\n      default:\n        return `${baseClasses} bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-400`;\n    }\n  };\n\n  return (\n    <Menu as=\"div\" className=\"relative\">\n      <Menu.Button className=\"flex items-center space-x-3 p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors w-full text-left group\">\n        <div className=\"flex-shrink-0\">\n          <div className=\"w-8 h-8 bg-gradient-to-r from-primary-500 to-primary-600 rounded-full flex items-center justify-center\">\n            <span className=\"text-white text-sm font-semibold\">\n              {user.displayName.charAt(0).toUpperCase()}\n            </span>\n          </div>\n        </div>\n        \n        <div className=\"flex-1 min-w-0\">\n          <div className=\"flex items-center space-x-2\">\n            <p className=\"text-sm font-medium text-gray-900 dark:text-white truncate\">\n              {user.displayName}\n            </p>\n            <span className={getRoleBadge(user.role)}>\n              {user.role.replace('-', ' ')}\n            </span>\n          </div>\n          <p className=\"text-xs text-gray-500 dark:text-gray-400 truncate\">\n            {user.email}\n          </p>\n        </div>\n        \n        <ChevronDownIcon className=\"w-4 h-4 text-gray-400 group-hover:text-gray-600 dark:group-hover:text-gray-300 transition-colors\" />\n      </Menu.Button>\n\n      <Transition\n        as={Fragment}\n        enter=\"transition ease-out duration-100\"\n        enterFrom=\"transform opacity-0 scale-95\"\n        enterTo=\"transform opacity-100 scale-100\"\n        leave=\"transition ease-in duration-75\"\n        leaveFrom=\"transform opacity-100 scale-100\"\n        leaveTo=\"transform opacity-0 scale-95\"\n      >\n        <Menu.Items className=\"absolute bottom-full left-0 mb-2 w-full bg-white dark:bg-gray-800 rounded-lg shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none py-1 z-50\">\n          <Menu.Item>\n            {({ active }) => (\n              <button\n                className={`${\n                  active ? 'bg-gray-100 dark:bg-gray-700' : ''\n                } flex items-center space-x-3 px-3 py-2 text-sm text-gray-700 dark:text-gray-300 w-full text-left transition-colors`}\n              >\n                <UserCircleIcon className=\"w-4 h-4\" />\n                <span>Profilo</span>\n              </button>\n            )}\n          </Menu.Item>\n          \n          <Menu.Item>\n            {({ active }) => (\n              <button\n                className={`${\n                  active ? 'bg-gray-100 dark:bg-gray-700' : ''\n                } flex items-center space-x-3 px-3 py-2 text-sm text-gray-700 dark:text-gray-300 w-full text-left transition-colors`}\n              >\n                <Cog6ToothIcon className=\"w-4 h-4\" />\n                <span>Impostazioni</span>\n              </button>\n            )}\n          </Menu.Item>\n          \n          <hr className=\"my-1 border-gray-200 dark:border-gray-600\" />\n          \n          <Menu.Item>\n            {({ active }) => (\n              <button\n                onClick={onLogout}\n                className={`${\n                  active ? 'bg-gray-100 dark:bg-gray-700' : ''\n                } flex items-center space-x-3 px-3 py-2 text-sm text-error-600 dark:text-error-400 w-full text-left transition-colors`}\n              >\n                <ArrowRightOnRectangleIcon className=\"w-4 h-4\" />\n                <span>Logout</span>\n              </button>\n            )}\n          </Menu.Item>\n        </Menu.Items>\n      </Transition>\n    </Menu>\n  );\n};\n\nexport default UserMenu;",{"ruleId":null,"fatal":true,"severity":2,"message":"104"},{"ruleId":null,"fatal":true,"severity":2,"message":"104"},{"ruleId":null,"fatal":true,"severity":2,"message":"104"},{"ruleId":null,"fatal":true,"severity":2,"message":"104"},{"ruleId":null,"fatal":true,"severity":2,"message":"104"},{"ruleId":null,"fatal":true,"severity":2,"message":"104"},{"ruleId":null,"fatal":true,"severity":2,"message":"104"},{"ruleId":null,"fatal":true,"severity":2,"message":"104"},{"ruleId":null,"fatal":true,"severity":2,"message":"104"},{"ruleId":null,"fatal":true,"severity":2,"message":"104"},{"ruleId":null,"fatal":true,"severity":2,"message":"104"},{"ruleId":null,"fatal":true,"severity":2,"message":"104"},{"ruleId":null,"fatal":true,"severity":2,"message":"104"},{"ruleId":null,"fatal":true,"severity":2,"message":"104"},{"ruleId":null,"fatal":true,"severity":2,"message":"104"},{"ruleId":null,"fatal":true,"severity":2,"message":"104"},{"ruleId":null,"fatal":true,"severity":2,"message":"104"},"Parsing error: Class extends value [object Module] is not a constructor or null"]