generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ApiServer {
  id            String        @id @default(cuid())
  name          String
  ownerId       String
  apiKey        String        @unique
  activeModules String[]      @default(["economy"])
  createdAt     DateTime      @default(now())
  actionLogs    ActionLog[]
  networks      Network[]
  transactions  Transaction[]
  users         User[]
}

model ActionLog {
  id              String    @id @default(cuid())
  serverId        String
  initiatorUserId String?
  targetUserId    String?
  type            String
  details         Json
  isRevertable    Boolean   @default(true)
  revertedAt      DateTime?
  revertedBy      String?
  createdAt       DateTime  @default(now())
  initiatorUser   User?     @relation("InitiatorActions", fields: [initiatorUserId], references: [id])
  server          ApiServer @relation(fields: [serverId], references: [id])
  targetUser      User?     @relation("TargetActions", fields: [targetUserId], references: [id])

  @@index([serverId, createdAt])
  @@index([serverId, isRevertable, revertedAt])
  @@index([type, serverId])
}

model User {
  id                         String            @id @default(cuid())
  serverId                   String
  discordId                  String
  username                   String
  balance                    Float             @default(0)
  xp                         Int               @default(0)
  level                      Int               @default(1)
  dailyStreak                Int               @default(0)
  lastDaily                  DateTime?
  hasReceivedWelcomeShipping Boolean           @default(false)
  lastCoinflip               DateTime?
  coinflipPlaysToday         Int               @default(0)
  coinflipWinStreak          Int               @default(0)
  xpBonusPerRicarica         Float             @default(1.0)
  costoSpedizioneItalia      Float             @default(1.5)
  costoSpedizioneEuropa      Float             @default(2.5)
  scontoBonusRicarica        Float             @default(1.0)
  createdAt                  DateTime          @default(now())
  updatedAt                  DateTime          @updatedAt
  initiatedActions           ActionLog[]       @relation("InitiatorActions")
  targetedActions            ActionLog[]       @relation("TargetActions")
  networkMember              NetworkMember?
  referralCodes              ReferralCode[]
  referredUsers              ReferredUser[]
  shippingOrders             ShippingOrder[]
  transactions               Transaction[]
  rechargeRequests           RechargeRequest[]
  preferences                UserPreferences?
  server                     ApiServer         @relation(fields: [serverId], references: [id])

  @@unique([serverId, discordId])
}

model Transaction {
  id          String    @id @default(cuid())
  serverId    String
  userId      String
  type        String
  amount      Float
  description String
  networkId   String?
  baseAmount  Float?
  createdAt   DateTime  @default(now())
  server      ApiServer @relation(fields: [serverId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@index([serverId, userId, createdAt])
}

model ReferralCode {
  id        String         @id @default(cuid())
  serverId  String
  code      String
  ownerId   String
  createdAt DateTime       @default(now())
  owner     User           @relation(fields: [ownerId], references: [id])
  referred  ReferredUser[]

  @@unique([serverId, code])
}

model ReferredUser {
  id                 String       @id @default(cuid())
  serverId           String
  userId             String
  referredByCode     String
  referralBonusGiven Boolean      @default(false)
  createdAt          DateTime     @default(now())
  referralCode       ReferralCode @relation(fields: [referredByCode, serverId], references: [code, serverId])
  user               User         @relation(fields: [userId], references: [id])

  @@unique([serverId, userId])
}

model Network {
  id               String          @id @default(cuid())
  serverId         String
  name             String
  leaderId         String
  bankBalance      Float           @default(0)
  level            Int             @default(1)
  roleId           String?
  logChannelId     String?
  status           String          @default("active")
  disbandRequestAt DateTime?
  server           ApiServer       @relation(fields: [serverId], references: [id])
  members          NetworkMember[]

  @@unique([serverId, name])
}

model NetworkMember {
  networkId String
  userId    String   @unique
  joinDate  DateTime @default(now())
  network   Network  @relation(fields: [networkId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([networkId, userId])
}

model DailyStats {
  id             String   @id @default(cuid())
  serverId       String
  date           DateTime
  totalCredits   Float
  totalUsers     Int
  totalReferrals Int
  netBalance     Float
  newUsers       Int
  newReferrals   Int

  @@unique([serverId, date])
}

model ShippingOrder {
  id                String    @id @default(cuid())
  serverId          String
  userId            String
  externalOrderId   String
  status            String    @default("pending")
  senderName        String
  senderAddress     String
  senderAddress2    String?
  senderZipcode     String
  senderCity        String
  senderPhone       String
  senderCountry     String
  recipientName     String
  recipientAddress  String
  recipientAddress2 String?
  recipientZipcode  String
  recipientCity     String
  recipientPhone    String
  recipientCountry  String
  carrier           String
  weight            String
  formatLabel       Int       @default(1)
  trackingId        String?
  trackingUrl       String?
  labelUrl          String?
  createdAt         DateTime  @default(now())
  processedAt       DateTime?
  cost              Float?
  user              User      @relation(fields: [userId], references: [id])

  @@index([serverId, userId])
  @@index([externalOrderId])
  @@index([status])
}

model RechargeRequest {
  id                String   @id @default(cuid())
  serverId          String
  
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  
  amount            Float    // Importo richiesto
  status            String   @default("pending") // pending, approved, rejected
  requestMessage    String?  // Messaggio opzionale dell'utente
  
  // Admin data
  reviewedByUserId  String?  // Chi ha approvato/rifiutato
  reviewMessage     String?  // Messaggio dell'admin
  reviewedAt        DateTime?
  
  // Notifiche Discord
  notificationSent  Boolean  @default(false)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([serverId, status])
  @@index([userId, status])
}

model UserPreferences {
  id                      String   @id @default(cuid())
  serverId                String
  
  userId                  String   @unique
  user                    User     @relation(fields: [userId], references: [id])
  
  // Notification preferences
  notifyOrderStatus       Boolean  @default(true)
  notifyCredits           Boolean  @default(true)
  notifyRechargeStatus    Boolean  @default(true)
  
  // Default shipping preferences  
  defaultCarrier          String?  // 'ups', 'colissimo', etc.
  defaultLabelFormat      Int      @default(1) // 0=A4, 1=10x15cm
  
  // UI preferences
  language                String   @default("it")
  theme                   String   @default("light") // light, dark
  
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  
  @@index([serverId])
}
