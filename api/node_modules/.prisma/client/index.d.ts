
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type ApiServerPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "ApiServer"
  objects: {
    actionLogs: ActionLogPayload<ExtArgs>[]
    networks: NetworkPayload<ExtArgs>[]
    transactions: TransactionPayload<ExtArgs>[]
    users: UserPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    name: string
    ownerId: string
    apiKey: string
    activeModules: string[]
    createdAt: Date
  }, ExtArgs["result"]["apiServer"]>
  composites: {}
}

/**
 * Model ApiServer
 * 
 */
export type ApiServer = runtime.Types.DefaultSelection<ApiServerPayload>
export type ActionLogPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "ActionLog"
  objects: {
    initiatorUser: UserPayload<ExtArgs> | null
    server: ApiServerPayload<ExtArgs>
    targetUser: UserPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: string
    serverId: string
    initiatorUserId: string | null
    targetUserId: string | null
    type: string
    details: Prisma.JsonValue
    isRevertable: boolean
    revertedAt: Date | null
    revertedBy: string | null
    createdAt: Date
  }, ExtArgs["result"]["actionLog"]>
  composites: {}
}

/**
 * Model ActionLog
 * 
 */
export type ActionLog = runtime.Types.DefaultSelection<ActionLogPayload>
export type UserPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "User"
  objects: {
    initiatedActions: ActionLogPayload<ExtArgs>[]
    targetedActions: ActionLogPayload<ExtArgs>[]
    networkMember: NetworkMemberPayload<ExtArgs> | null
    referralCodes: ReferralCodePayload<ExtArgs>[]
    referredUsers: ReferredUserPayload<ExtArgs>[]
    shippingOrders: ShippingOrderPayload<ExtArgs>[]
    transactions: TransactionPayload<ExtArgs>[]
    rechargeRequests: RechargeRequestPayload<ExtArgs>[]
    preferences: UserPreferencesPayload<ExtArgs> | null
    server: ApiServerPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    serverId: string
    discordId: string
    username: string
    balance: number
    xp: number
    level: number
    dailyStreak: number
    lastDaily: Date | null
    hasReceivedWelcomeShipping: boolean
    lastCoinflip: Date | null
    coinflipPlaysToday: number
    coinflipWinStreak: number
    xpBonusPerRicarica: number
    costoSpedizioneItalia: number
    costoSpedizioneEuropa: number
    scontoBonusRicarica: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["user"]>
  composites: {}
}

/**
 * Model User
 * 
 */
export type User = runtime.Types.DefaultSelection<UserPayload>
export type TransactionPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Transaction"
  objects: {
    server: ApiServerPayload<ExtArgs>
    user: UserPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    serverId: string
    userId: string
    type: string
    amount: number
    description: string
    networkId: string | null
    baseAmount: number | null
    createdAt: Date
  }, ExtArgs["result"]["transaction"]>
  composites: {}
}

/**
 * Model Transaction
 * 
 */
export type Transaction = runtime.Types.DefaultSelection<TransactionPayload>
export type ReferralCodePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "ReferralCode"
  objects: {
    owner: UserPayload<ExtArgs>
    referred: ReferredUserPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    serverId: string
    code: string
    ownerId: string
    createdAt: Date
  }, ExtArgs["result"]["referralCode"]>
  composites: {}
}

/**
 * Model ReferralCode
 * 
 */
export type ReferralCode = runtime.Types.DefaultSelection<ReferralCodePayload>
export type ReferredUserPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "ReferredUser"
  objects: {
    referralCode: ReferralCodePayload<ExtArgs>
    user: UserPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    serverId: string
    userId: string
    referredByCode: string
    referralBonusGiven: boolean
    createdAt: Date
  }, ExtArgs["result"]["referredUser"]>
  composites: {}
}

/**
 * Model ReferredUser
 * 
 */
export type ReferredUser = runtime.Types.DefaultSelection<ReferredUserPayload>
export type NetworkPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Network"
  objects: {
    server: ApiServerPayload<ExtArgs>
    members: NetworkMemberPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    serverId: string
    name: string
    leaderId: string
    bankBalance: number
    level: number
    roleId: string | null
    logChannelId: string | null
    status: string
    disbandRequestAt: Date | null
  }, ExtArgs["result"]["network"]>
  composites: {}
}

/**
 * Model Network
 * 
 */
export type Network = runtime.Types.DefaultSelection<NetworkPayload>
export type NetworkMemberPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "NetworkMember"
  objects: {
    network: NetworkPayload<ExtArgs>
    user: UserPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    networkId: string
    userId: string
    joinDate: Date
  }, ExtArgs["result"]["networkMember"]>
  composites: {}
}

/**
 * Model NetworkMember
 * 
 */
export type NetworkMember = runtime.Types.DefaultSelection<NetworkMemberPayload>
export type DailyStatsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "DailyStats"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: string
    serverId: string
    date: Date
    totalCredits: number
    totalUsers: number
    totalReferrals: number
    netBalance: number
    newUsers: number
    newReferrals: number
  }, ExtArgs["result"]["dailyStats"]>
  composites: {}
}

/**
 * Model DailyStats
 * 
 */
export type DailyStats = runtime.Types.DefaultSelection<DailyStatsPayload>
export type ShippingOrderPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "ShippingOrder"
  objects: {
    user: UserPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    serverId: string
    userId: string
    externalOrderId: string
    status: string
    senderName: string
    senderAddress: string
    senderAddress2: string | null
    senderZipcode: string
    senderCity: string
    senderPhone: string
    senderCountry: string
    recipientName: string
    recipientAddress: string
    recipientAddress2: string | null
    recipientZipcode: string
    recipientCity: string
    recipientPhone: string
    recipientCountry: string
    carrier: string
    weight: string
    formatLabel: number
    trackingId: string | null
    trackingUrl: string | null
    labelUrl: string | null
    createdAt: Date
    processedAt: Date | null
    cost: number | null
  }, ExtArgs["result"]["shippingOrder"]>
  composites: {}
}

/**
 * Model ShippingOrder
 * 
 */
export type ShippingOrder = runtime.Types.DefaultSelection<ShippingOrderPayload>
export type RechargeRequestPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "RechargeRequest"
  objects: {
    user: UserPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    serverId: string
    userId: string
    amount: number
    status: string
    requestMessage: string | null
    reviewedByUserId: string | null
    reviewMessage: string | null
    reviewedAt: Date | null
    notificationSent: boolean
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["rechargeRequest"]>
  composites: {}
}

/**
 * Model RechargeRequest
 * 
 */
export type RechargeRequest = runtime.Types.DefaultSelection<RechargeRequestPayload>
export type UserPreferencesPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "UserPreferences"
  objects: {
    user: UserPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    serverId: string
    userId: string
    notifyOrderStatus: boolean
    notifyCredits: boolean
    notifyRechargeStatus: boolean
    defaultCarrier: string | null
    defaultLabelFormat: number
    language: string
    theme: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["userPreferences"]>
  composites: {}
}

/**
 * Model UserPreferences
 * 
 */
export type UserPreferences = runtime.Types.DefaultSelection<UserPreferencesPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more ApiServers
 * const apiServers = await prisma.apiServer.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more ApiServers
   * const apiServers = await prisma.apiServer.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.apiServer`: Exposes CRUD operations for the **ApiServer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ApiServers
    * const apiServers = await prisma.apiServer.findMany()
    * ```
    */
  get apiServer(): Prisma.ApiServerDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.actionLog`: Exposes CRUD operations for the **ActionLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ActionLogs
    * const actionLogs = await prisma.actionLog.findMany()
    * ```
    */
  get actionLog(): Prisma.ActionLogDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.transaction`: Exposes CRUD operations for the **Transaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transactions
    * const transactions = await prisma.transaction.findMany()
    * ```
    */
  get transaction(): Prisma.TransactionDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.referralCode`: Exposes CRUD operations for the **ReferralCode** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReferralCodes
    * const referralCodes = await prisma.referralCode.findMany()
    * ```
    */
  get referralCode(): Prisma.ReferralCodeDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.referredUser`: Exposes CRUD operations for the **ReferredUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReferredUsers
    * const referredUsers = await prisma.referredUser.findMany()
    * ```
    */
  get referredUser(): Prisma.ReferredUserDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.network`: Exposes CRUD operations for the **Network** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Networks
    * const networks = await prisma.network.findMany()
    * ```
    */
  get network(): Prisma.NetworkDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.networkMember`: Exposes CRUD operations for the **NetworkMember** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NetworkMembers
    * const networkMembers = await prisma.networkMember.findMany()
    * ```
    */
  get networkMember(): Prisma.NetworkMemberDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.dailyStats`: Exposes CRUD operations for the **DailyStats** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DailyStats
    * const dailyStats = await prisma.dailyStats.findMany()
    * ```
    */
  get dailyStats(): Prisma.DailyStatsDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.shippingOrder`: Exposes CRUD operations for the **ShippingOrder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShippingOrders
    * const shippingOrders = await prisma.shippingOrder.findMany()
    * ```
    */
  get shippingOrder(): Prisma.ShippingOrderDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.rechargeRequest`: Exposes CRUD operations for the **RechargeRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RechargeRequests
    * const rechargeRequests = await prisma.rechargeRequest.findMany()
    * ```
    */
  get rechargeRequest(): Prisma.RechargeRequestDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.userPreferences`: Exposes CRUD operations for the **UserPreferences** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserPreferences
    * const userPreferences = await prisma.userPreferences.findMany()
    * ```
    */
  get userPreferences(): Prisma.UserPreferencesDelegate<GlobalReject, ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 4.16.2
   * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    ApiServer: 'ApiServer',
    ActionLog: 'ActionLog',
    User: 'User',
    Transaction: 'Transaction',
    ReferralCode: 'ReferralCode',
    ReferredUser: 'ReferredUser',
    Network: 'Network',
    NetworkMember: 'NetworkMember',
    DailyStats: 'DailyStats',
    ShippingOrder: 'ShippingOrder',
    RechargeRequest: 'RechargeRequest',
    UserPreferences: 'UserPreferences'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'apiServer' | 'actionLog' | 'user' | 'transaction' | 'referralCode' | 'referredUser' | 'network' | 'networkMember' | 'dailyStats' | 'shippingOrder' | 'rechargeRequest' | 'userPreferences'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      ApiServer: {
        payload: ApiServerPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ApiServerFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ApiServerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ApiServerFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ApiServerPayload>
          }
          findFirst: {
            args: Prisma.ApiServerFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ApiServerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ApiServerFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ApiServerPayload>
          }
          findMany: {
            args: Prisma.ApiServerFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ApiServerPayload>[]
          }
          create: {
            args: Prisma.ApiServerCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ApiServerPayload>
          }
          createMany: {
            args: Prisma.ApiServerCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ApiServerDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ApiServerPayload>
          }
          update: {
            args: Prisma.ApiServerUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ApiServerPayload>
          }
          deleteMany: {
            args: Prisma.ApiServerDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ApiServerUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ApiServerUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ApiServerPayload>
          }
          aggregate: {
            args: Prisma.ApiServerAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateApiServer>
          }
          groupBy: {
            args: Prisma.ApiServerGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ApiServerGroupByOutputType>[]
          }
          count: {
            args: Prisma.ApiServerCountArgs<ExtArgs>,
            result: $Utils.Optional<ApiServerCountAggregateOutputType> | number
          }
        }
      }
      ActionLog: {
        payload: ActionLogPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ActionLogFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ActionLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActionLogFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ActionLogPayload>
          }
          findFirst: {
            args: Prisma.ActionLogFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ActionLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActionLogFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ActionLogPayload>
          }
          findMany: {
            args: Prisma.ActionLogFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ActionLogPayload>[]
          }
          create: {
            args: Prisma.ActionLogCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ActionLogPayload>
          }
          createMany: {
            args: Prisma.ActionLogCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ActionLogDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ActionLogPayload>
          }
          update: {
            args: Prisma.ActionLogUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ActionLogPayload>
          }
          deleteMany: {
            args: Prisma.ActionLogDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ActionLogUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ActionLogUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ActionLogPayload>
          }
          aggregate: {
            args: Prisma.ActionLogAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateActionLog>
          }
          groupBy: {
            args: Prisma.ActionLogGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ActionLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActionLogCountArgs<ExtArgs>,
            result: $Utils.Optional<ActionLogCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: UserPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Transaction: {
        payload: TransactionPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.TransactionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransactionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TransactionPayload>
          }
          findFirst: {
            args: Prisma.TransactionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransactionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TransactionPayload>
          }
          findMany: {
            args: Prisma.TransactionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TransactionPayload>[]
          }
          create: {
            args: Prisma.TransactionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TransactionPayload>
          }
          createMany: {
            args: Prisma.TransactionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TransactionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TransactionPayload>
          }
          update: {
            args: Prisma.TransactionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TransactionPayload>
          }
          deleteMany: {
            args: Prisma.TransactionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TransactionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TransactionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TransactionPayload>
          }
          aggregate: {
            args: Prisma.TransactionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTransaction>
          }
          groupBy: {
            args: Prisma.TransactionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransactionCountArgs<ExtArgs>,
            result: $Utils.Optional<TransactionCountAggregateOutputType> | number
          }
        }
      }
      ReferralCode: {
        payload: ReferralCodePayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ReferralCodeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ReferralCodePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReferralCodeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ReferralCodePayload>
          }
          findFirst: {
            args: Prisma.ReferralCodeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ReferralCodePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReferralCodeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ReferralCodePayload>
          }
          findMany: {
            args: Prisma.ReferralCodeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ReferralCodePayload>[]
          }
          create: {
            args: Prisma.ReferralCodeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ReferralCodePayload>
          }
          createMany: {
            args: Prisma.ReferralCodeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ReferralCodeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ReferralCodePayload>
          }
          update: {
            args: Prisma.ReferralCodeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ReferralCodePayload>
          }
          deleteMany: {
            args: Prisma.ReferralCodeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ReferralCodeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ReferralCodeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ReferralCodePayload>
          }
          aggregate: {
            args: Prisma.ReferralCodeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateReferralCode>
          }
          groupBy: {
            args: Prisma.ReferralCodeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ReferralCodeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReferralCodeCountArgs<ExtArgs>,
            result: $Utils.Optional<ReferralCodeCountAggregateOutputType> | number
          }
        }
      }
      ReferredUser: {
        payload: ReferredUserPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ReferredUserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ReferredUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReferredUserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ReferredUserPayload>
          }
          findFirst: {
            args: Prisma.ReferredUserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ReferredUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReferredUserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ReferredUserPayload>
          }
          findMany: {
            args: Prisma.ReferredUserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ReferredUserPayload>[]
          }
          create: {
            args: Prisma.ReferredUserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ReferredUserPayload>
          }
          createMany: {
            args: Prisma.ReferredUserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ReferredUserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ReferredUserPayload>
          }
          update: {
            args: Prisma.ReferredUserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ReferredUserPayload>
          }
          deleteMany: {
            args: Prisma.ReferredUserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ReferredUserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ReferredUserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ReferredUserPayload>
          }
          aggregate: {
            args: Prisma.ReferredUserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateReferredUser>
          }
          groupBy: {
            args: Prisma.ReferredUserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ReferredUserGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReferredUserCountArgs<ExtArgs>,
            result: $Utils.Optional<ReferredUserCountAggregateOutputType> | number
          }
        }
      }
      Network: {
        payload: NetworkPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.NetworkFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NetworkPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NetworkFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NetworkPayload>
          }
          findFirst: {
            args: Prisma.NetworkFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NetworkPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NetworkFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NetworkPayload>
          }
          findMany: {
            args: Prisma.NetworkFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NetworkPayload>[]
          }
          create: {
            args: Prisma.NetworkCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NetworkPayload>
          }
          createMany: {
            args: Prisma.NetworkCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.NetworkDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NetworkPayload>
          }
          update: {
            args: Prisma.NetworkUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NetworkPayload>
          }
          deleteMany: {
            args: Prisma.NetworkDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NetworkUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NetworkUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NetworkPayload>
          }
          aggregate: {
            args: Prisma.NetworkAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNetwork>
          }
          groupBy: {
            args: Prisma.NetworkGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NetworkGroupByOutputType>[]
          }
          count: {
            args: Prisma.NetworkCountArgs<ExtArgs>,
            result: $Utils.Optional<NetworkCountAggregateOutputType> | number
          }
        }
      }
      NetworkMember: {
        payload: NetworkMemberPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.NetworkMemberFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NetworkMemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NetworkMemberFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NetworkMemberPayload>
          }
          findFirst: {
            args: Prisma.NetworkMemberFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NetworkMemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NetworkMemberFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NetworkMemberPayload>
          }
          findMany: {
            args: Prisma.NetworkMemberFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NetworkMemberPayload>[]
          }
          create: {
            args: Prisma.NetworkMemberCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NetworkMemberPayload>
          }
          createMany: {
            args: Prisma.NetworkMemberCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.NetworkMemberDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NetworkMemberPayload>
          }
          update: {
            args: Prisma.NetworkMemberUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NetworkMemberPayload>
          }
          deleteMany: {
            args: Prisma.NetworkMemberDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NetworkMemberUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NetworkMemberUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NetworkMemberPayload>
          }
          aggregate: {
            args: Prisma.NetworkMemberAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNetworkMember>
          }
          groupBy: {
            args: Prisma.NetworkMemberGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NetworkMemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.NetworkMemberCountArgs<ExtArgs>,
            result: $Utils.Optional<NetworkMemberCountAggregateOutputType> | number
          }
        }
      }
      DailyStats: {
        payload: DailyStatsPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.DailyStatsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DailyStatsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DailyStatsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DailyStatsPayload>
          }
          findFirst: {
            args: Prisma.DailyStatsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DailyStatsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DailyStatsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DailyStatsPayload>
          }
          findMany: {
            args: Prisma.DailyStatsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DailyStatsPayload>[]
          }
          create: {
            args: Prisma.DailyStatsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DailyStatsPayload>
          }
          createMany: {
            args: Prisma.DailyStatsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DailyStatsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DailyStatsPayload>
          }
          update: {
            args: Prisma.DailyStatsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DailyStatsPayload>
          }
          deleteMany: {
            args: Prisma.DailyStatsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DailyStatsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DailyStatsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DailyStatsPayload>
          }
          aggregate: {
            args: Prisma.DailyStatsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDailyStats>
          }
          groupBy: {
            args: Prisma.DailyStatsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DailyStatsGroupByOutputType>[]
          }
          count: {
            args: Prisma.DailyStatsCountArgs<ExtArgs>,
            result: $Utils.Optional<DailyStatsCountAggregateOutputType> | number
          }
        }
      }
      ShippingOrder: {
        payload: ShippingOrderPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ShippingOrderFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ShippingOrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShippingOrderFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ShippingOrderPayload>
          }
          findFirst: {
            args: Prisma.ShippingOrderFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ShippingOrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShippingOrderFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ShippingOrderPayload>
          }
          findMany: {
            args: Prisma.ShippingOrderFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ShippingOrderPayload>[]
          }
          create: {
            args: Prisma.ShippingOrderCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ShippingOrderPayload>
          }
          createMany: {
            args: Prisma.ShippingOrderCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ShippingOrderDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ShippingOrderPayload>
          }
          update: {
            args: Prisma.ShippingOrderUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ShippingOrderPayload>
          }
          deleteMany: {
            args: Prisma.ShippingOrderDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ShippingOrderUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ShippingOrderUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ShippingOrderPayload>
          }
          aggregate: {
            args: Prisma.ShippingOrderAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateShippingOrder>
          }
          groupBy: {
            args: Prisma.ShippingOrderGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ShippingOrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShippingOrderCountArgs<ExtArgs>,
            result: $Utils.Optional<ShippingOrderCountAggregateOutputType> | number
          }
        }
      }
      RechargeRequest: {
        payload: RechargeRequestPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.RechargeRequestFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RechargeRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RechargeRequestFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RechargeRequestPayload>
          }
          findFirst: {
            args: Prisma.RechargeRequestFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RechargeRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RechargeRequestFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RechargeRequestPayload>
          }
          findMany: {
            args: Prisma.RechargeRequestFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RechargeRequestPayload>[]
          }
          create: {
            args: Prisma.RechargeRequestCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RechargeRequestPayload>
          }
          createMany: {
            args: Prisma.RechargeRequestCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RechargeRequestDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RechargeRequestPayload>
          }
          update: {
            args: Prisma.RechargeRequestUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RechargeRequestPayload>
          }
          deleteMany: {
            args: Prisma.RechargeRequestDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RechargeRequestUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RechargeRequestUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RechargeRequestPayload>
          }
          aggregate: {
            args: Prisma.RechargeRequestAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRechargeRequest>
          }
          groupBy: {
            args: Prisma.RechargeRequestGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RechargeRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.RechargeRequestCountArgs<ExtArgs>,
            result: $Utils.Optional<RechargeRequestCountAggregateOutputType> | number
          }
        }
      }
      UserPreferences: {
        payload: UserPreferencesPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.UserPreferencesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPreferencesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserPreferencesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPreferencesPayload>
          }
          findFirst: {
            args: Prisma.UserPreferencesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPreferencesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserPreferencesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPreferencesPayload>
          }
          findMany: {
            args: Prisma.UserPreferencesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPreferencesPayload>[]
          }
          create: {
            args: Prisma.UserPreferencesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPreferencesPayload>
          }
          createMany: {
            args: Prisma.UserPreferencesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserPreferencesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPreferencesPayload>
          }
          update: {
            args: Prisma.UserPreferencesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPreferencesPayload>
          }
          deleteMany: {
            args: Prisma.UserPreferencesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserPreferencesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserPreferencesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPreferencesPayload>
          }
          aggregate: {
            args: Prisma.UserPreferencesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUserPreferences>
          }
          groupBy: {
            args: Prisma.UserPreferencesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserPreferencesGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserPreferencesCountArgs<ExtArgs>,
            result: $Utils.Optional<UserPreferencesCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ApiServerCountOutputType
   */


  export type ApiServerCountOutputType = {
    actionLogs: number
    networks: number
    transactions: number
    users: number
  }

  export type ApiServerCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    actionLogs?: boolean | ApiServerCountOutputTypeCountActionLogsArgs
    networks?: boolean | ApiServerCountOutputTypeCountNetworksArgs
    transactions?: boolean | ApiServerCountOutputTypeCountTransactionsArgs
    users?: boolean | ApiServerCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes

  /**
   * ApiServerCountOutputType without action
   */
  export type ApiServerCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiServerCountOutputType
     */
    select?: ApiServerCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ApiServerCountOutputType without action
   */
  export type ApiServerCountOutputTypeCountActionLogsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ActionLogWhereInput
  }


  /**
   * ApiServerCountOutputType without action
   */
  export type ApiServerCountOutputTypeCountNetworksArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: NetworkWhereInput
  }


  /**
   * ApiServerCountOutputType without action
   */
  export type ApiServerCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }


  /**
   * ApiServerCountOutputType without action
   */
  export type ApiServerCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }



  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    initiatedActions: number
    targetedActions: number
    referralCodes: number
    referredUsers: number
    shippingOrders: number
    transactions: number
    rechargeRequests: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    initiatedActions?: boolean | UserCountOutputTypeCountInitiatedActionsArgs
    targetedActions?: boolean | UserCountOutputTypeCountTargetedActionsArgs
    referralCodes?: boolean | UserCountOutputTypeCountReferralCodesArgs
    referredUsers?: boolean | UserCountOutputTypeCountReferredUsersArgs
    shippingOrders?: boolean | UserCountOutputTypeCountShippingOrdersArgs
    transactions?: boolean | UserCountOutputTypeCountTransactionsArgs
    rechargeRequests?: boolean | UserCountOutputTypeCountRechargeRequestsArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountInitiatedActionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ActionLogWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTargetedActionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ActionLogWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReferralCodesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ReferralCodeWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReferredUsersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ReferredUserWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountShippingOrdersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ShippingOrderWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRechargeRequestsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RechargeRequestWhereInput
  }



  /**
   * Count Type ReferralCodeCountOutputType
   */


  export type ReferralCodeCountOutputType = {
    referred: number
  }

  export type ReferralCodeCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    referred?: boolean | ReferralCodeCountOutputTypeCountReferredArgs
  }

  // Custom InputTypes

  /**
   * ReferralCodeCountOutputType without action
   */
  export type ReferralCodeCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCodeCountOutputType
     */
    select?: ReferralCodeCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ReferralCodeCountOutputType without action
   */
  export type ReferralCodeCountOutputTypeCountReferredArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ReferredUserWhereInput
  }



  /**
   * Count Type NetworkCountOutputType
   */


  export type NetworkCountOutputType = {
    members: number
  }

  export type NetworkCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    members?: boolean | NetworkCountOutputTypeCountMembersArgs
  }

  // Custom InputTypes

  /**
   * NetworkCountOutputType without action
   */
  export type NetworkCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NetworkCountOutputType
     */
    select?: NetworkCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * NetworkCountOutputType without action
   */
  export type NetworkCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: NetworkMemberWhereInput
  }



  /**
   * Models
   */

  /**
   * Model ApiServer
   */


  export type AggregateApiServer = {
    _count: ApiServerCountAggregateOutputType | null
    _min: ApiServerMinAggregateOutputType | null
    _max: ApiServerMaxAggregateOutputType | null
  }

  export type ApiServerMinAggregateOutputType = {
    id: string | null
    name: string | null
    ownerId: string | null
    apiKey: string | null
    createdAt: Date | null
  }

  export type ApiServerMaxAggregateOutputType = {
    id: string | null
    name: string | null
    ownerId: string | null
    apiKey: string | null
    createdAt: Date | null
  }

  export type ApiServerCountAggregateOutputType = {
    id: number
    name: number
    ownerId: number
    apiKey: number
    activeModules: number
    createdAt: number
    _all: number
  }


  export type ApiServerMinAggregateInputType = {
    id?: true
    name?: true
    ownerId?: true
    apiKey?: true
    createdAt?: true
  }

  export type ApiServerMaxAggregateInputType = {
    id?: true
    name?: true
    ownerId?: true
    apiKey?: true
    createdAt?: true
  }

  export type ApiServerCountAggregateInputType = {
    id?: true
    name?: true
    ownerId?: true
    apiKey?: true
    activeModules?: true
    createdAt?: true
    _all?: true
  }

  export type ApiServerAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ApiServer to aggregate.
     */
    where?: ApiServerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiServers to fetch.
     */
    orderBy?: Enumerable<ApiServerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApiServerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiServers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiServers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ApiServers
    **/
    _count?: true | ApiServerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApiServerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApiServerMaxAggregateInputType
  }

  export type GetApiServerAggregateType<T extends ApiServerAggregateArgs> = {
        [P in keyof T & keyof AggregateApiServer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApiServer[P]>
      : GetScalarType<T[P], AggregateApiServer[P]>
  }




  export type ApiServerGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ApiServerWhereInput
    orderBy?: Enumerable<ApiServerOrderByWithAggregationInput>
    by: ApiServerScalarFieldEnum[]
    having?: ApiServerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApiServerCountAggregateInputType | true
    _min?: ApiServerMinAggregateInputType
    _max?: ApiServerMaxAggregateInputType
  }


  export type ApiServerGroupByOutputType = {
    id: string
    name: string
    ownerId: string
    apiKey: string
    activeModules: string[]
    createdAt: Date
    _count: ApiServerCountAggregateOutputType | null
    _min: ApiServerMinAggregateOutputType | null
    _max: ApiServerMaxAggregateOutputType | null
  }

  type GetApiServerGroupByPayload<T extends ApiServerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ApiServerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApiServerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApiServerGroupByOutputType[P]>
            : GetScalarType<T[P], ApiServerGroupByOutputType[P]>
        }
      >
    >


  export type ApiServerSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    ownerId?: boolean
    apiKey?: boolean
    activeModules?: boolean
    createdAt?: boolean
    actionLogs?: boolean | ApiServer$actionLogsArgs<ExtArgs>
    networks?: boolean | ApiServer$networksArgs<ExtArgs>
    transactions?: boolean | ApiServer$transactionsArgs<ExtArgs>
    users?: boolean | ApiServer$usersArgs<ExtArgs>
    _count?: boolean | ApiServerCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["apiServer"]>

  export type ApiServerSelectScalar = {
    id?: boolean
    name?: boolean
    ownerId?: boolean
    apiKey?: boolean
    activeModules?: boolean
    createdAt?: boolean
  }

  export type ApiServerInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    actionLogs?: boolean | ApiServer$actionLogsArgs<ExtArgs>
    networks?: boolean | ApiServer$networksArgs<ExtArgs>
    transactions?: boolean | ApiServer$transactionsArgs<ExtArgs>
    users?: boolean | ApiServer$usersArgs<ExtArgs>
    _count?: boolean | ApiServerCountOutputTypeArgs<ExtArgs>
  }


  type ApiServerGetPayload<S extends boolean | null | undefined | ApiServerArgs> = $Types.GetResult<ApiServerPayload, S>

  type ApiServerCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ApiServerFindManyArgs, 'select' | 'include'> & {
      select?: ApiServerCountAggregateInputType | true
    }

  export interface ApiServerDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ApiServer'], meta: { name: 'ApiServer' } }
    /**
     * Find zero or one ApiServer that matches the filter.
     * @param {ApiServerFindUniqueArgs} args - Arguments to find a ApiServer
     * @example
     * // Get one ApiServer
     * const apiServer = await prisma.apiServer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ApiServerFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ApiServerFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ApiServer'> extends True ? Prisma__ApiServerClient<$Types.GetResult<ApiServerPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ApiServerClient<$Types.GetResult<ApiServerPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one ApiServer that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ApiServerFindUniqueOrThrowArgs} args - Arguments to find a ApiServer
     * @example
     * // Get one ApiServer
     * const apiServer = await prisma.apiServer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ApiServerFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ApiServerFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ApiServerClient<$Types.GetResult<ApiServerPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first ApiServer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiServerFindFirstArgs} args - Arguments to find a ApiServer
     * @example
     * // Get one ApiServer
     * const apiServer = await prisma.apiServer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ApiServerFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ApiServerFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ApiServer'> extends True ? Prisma__ApiServerClient<$Types.GetResult<ApiServerPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ApiServerClient<$Types.GetResult<ApiServerPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first ApiServer that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiServerFindFirstOrThrowArgs} args - Arguments to find a ApiServer
     * @example
     * // Get one ApiServer
     * const apiServer = await prisma.apiServer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ApiServerFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ApiServerFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ApiServerClient<$Types.GetResult<ApiServerPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more ApiServers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiServerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ApiServers
     * const apiServers = await prisma.apiServer.findMany()
     * 
     * // Get first 10 ApiServers
     * const apiServers = await prisma.apiServer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const apiServerWithIdOnly = await prisma.apiServer.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ApiServerFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ApiServerFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ApiServerPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a ApiServer.
     * @param {ApiServerCreateArgs} args - Arguments to create a ApiServer.
     * @example
     * // Create one ApiServer
     * const ApiServer = await prisma.apiServer.create({
     *   data: {
     *     // ... data to create a ApiServer
     *   }
     * })
     * 
    **/
    create<T extends ApiServerCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ApiServerCreateArgs<ExtArgs>>
    ): Prisma__ApiServerClient<$Types.GetResult<ApiServerPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many ApiServers.
     *     @param {ApiServerCreateManyArgs} args - Arguments to create many ApiServers.
     *     @example
     *     // Create many ApiServers
     *     const apiServer = await prisma.apiServer.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ApiServerCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ApiServerCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ApiServer.
     * @param {ApiServerDeleteArgs} args - Arguments to delete one ApiServer.
     * @example
     * // Delete one ApiServer
     * const ApiServer = await prisma.apiServer.delete({
     *   where: {
     *     // ... filter to delete one ApiServer
     *   }
     * })
     * 
    **/
    delete<T extends ApiServerDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ApiServerDeleteArgs<ExtArgs>>
    ): Prisma__ApiServerClient<$Types.GetResult<ApiServerPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one ApiServer.
     * @param {ApiServerUpdateArgs} args - Arguments to update one ApiServer.
     * @example
     * // Update one ApiServer
     * const apiServer = await prisma.apiServer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ApiServerUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ApiServerUpdateArgs<ExtArgs>>
    ): Prisma__ApiServerClient<$Types.GetResult<ApiServerPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more ApiServers.
     * @param {ApiServerDeleteManyArgs} args - Arguments to filter ApiServers to delete.
     * @example
     * // Delete a few ApiServers
     * const { count } = await prisma.apiServer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ApiServerDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ApiServerDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ApiServers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiServerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ApiServers
     * const apiServer = await prisma.apiServer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ApiServerUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ApiServerUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ApiServer.
     * @param {ApiServerUpsertArgs} args - Arguments to update or create a ApiServer.
     * @example
     * // Update or create a ApiServer
     * const apiServer = await prisma.apiServer.upsert({
     *   create: {
     *     // ... data to create a ApiServer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ApiServer we want to update
     *   }
     * })
    **/
    upsert<T extends ApiServerUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ApiServerUpsertArgs<ExtArgs>>
    ): Prisma__ApiServerClient<$Types.GetResult<ApiServerPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of ApiServers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiServerCountArgs} args - Arguments to filter ApiServers to count.
     * @example
     * // Count the number of ApiServers
     * const count = await prisma.apiServer.count({
     *   where: {
     *     // ... the filter for the ApiServers we want to count
     *   }
     * })
    **/
    count<T extends ApiServerCountArgs>(
      args?: Subset<T, ApiServerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApiServerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ApiServer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiServerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApiServerAggregateArgs>(args: Subset<T, ApiServerAggregateArgs>): Prisma.PrismaPromise<GetApiServerAggregateType<T>>

    /**
     * Group by ApiServer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiServerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApiServerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApiServerGroupByArgs['orderBy'] }
        : { orderBy?: ApiServerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApiServerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApiServerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ApiServer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ApiServerClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    actionLogs<T extends ApiServer$actionLogsArgs<ExtArgs> = {}>(args?: Subset<T, ApiServer$actionLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ActionLogPayload<ExtArgs>, T, 'findMany', never>| Null>;

    networks<T extends ApiServer$networksArgs<ExtArgs> = {}>(args?: Subset<T, ApiServer$networksArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<NetworkPayload<ExtArgs>, T, 'findMany', never>| Null>;

    transactions<T extends ApiServer$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, ApiServer$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<TransactionPayload<ExtArgs>, T, 'findMany', never>| Null>;

    users<T extends ApiServer$usersArgs<ExtArgs> = {}>(args?: Subset<T, ApiServer$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<UserPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ApiServer base type for findUnique actions
   */
  export type ApiServerFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiServer
     */
    select?: ApiServerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApiServerInclude<ExtArgs> | null
    /**
     * Filter, which ApiServer to fetch.
     */
    where: ApiServerWhereUniqueInput
  }

  /**
   * ApiServer findUnique
   */
  export interface ApiServerFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ApiServerFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ApiServer findUniqueOrThrow
   */
  export type ApiServerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiServer
     */
    select?: ApiServerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApiServerInclude<ExtArgs> | null
    /**
     * Filter, which ApiServer to fetch.
     */
    where: ApiServerWhereUniqueInput
  }


  /**
   * ApiServer base type for findFirst actions
   */
  export type ApiServerFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiServer
     */
    select?: ApiServerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApiServerInclude<ExtArgs> | null
    /**
     * Filter, which ApiServer to fetch.
     */
    where?: ApiServerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiServers to fetch.
     */
    orderBy?: Enumerable<ApiServerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApiServers.
     */
    cursor?: ApiServerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiServers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiServers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApiServers.
     */
    distinct?: Enumerable<ApiServerScalarFieldEnum>
  }

  /**
   * ApiServer findFirst
   */
  export interface ApiServerFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ApiServerFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ApiServer findFirstOrThrow
   */
  export type ApiServerFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiServer
     */
    select?: ApiServerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApiServerInclude<ExtArgs> | null
    /**
     * Filter, which ApiServer to fetch.
     */
    where?: ApiServerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiServers to fetch.
     */
    orderBy?: Enumerable<ApiServerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApiServers.
     */
    cursor?: ApiServerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiServers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiServers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApiServers.
     */
    distinct?: Enumerable<ApiServerScalarFieldEnum>
  }


  /**
   * ApiServer findMany
   */
  export type ApiServerFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiServer
     */
    select?: ApiServerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApiServerInclude<ExtArgs> | null
    /**
     * Filter, which ApiServers to fetch.
     */
    where?: ApiServerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiServers to fetch.
     */
    orderBy?: Enumerable<ApiServerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ApiServers.
     */
    cursor?: ApiServerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiServers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiServers.
     */
    skip?: number
    distinct?: Enumerable<ApiServerScalarFieldEnum>
  }


  /**
   * ApiServer create
   */
  export type ApiServerCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiServer
     */
    select?: ApiServerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApiServerInclude<ExtArgs> | null
    /**
     * The data needed to create a ApiServer.
     */
    data: XOR<ApiServerCreateInput, ApiServerUncheckedCreateInput>
  }


  /**
   * ApiServer createMany
   */
  export type ApiServerCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ApiServers.
     */
    data: Enumerable<ApiServerCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ApiServer update
   */
  export type ApiServerUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiServer
     */
    select?: ApiServerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApiServerInclude<ExtArgs> | null
    /**
     * The data needed to update a ApiServer.
     */
    data: XOR<ApiServerUpdateInput, ApiServerUncheckedUpdateInput>
    /**
     * Choose, which ApiServer to update.
     */
    where: ApiServerWhereUniqueInput
  }


  /**
   * ApiServer updateMany
   */
  export type ApiServerUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ApiServers.
     */
    data: XOR<ApiServerUpdateManyMutationInput, ApiServerUncheckedUpdateManyInput>
    /**
     * Filter which ApiServers to update
     */
    where?: ApiServerWhereInput
  }


  /**
   * ApiServer upsert
   */
  export type ApiServerUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiServer
     */
    select?: ApiServerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApiServerInclude<ExtArgs> | null
    /**
     * The filter to search for the ApiServer to update in case it exists.
     */
    where: ApiServerWhereUniqueInput
    /**
     * In case the ApiServer found by the `where` argument doesn't exist, create a new ApiServer with this data.
     */
    create: XOR<ApiServerCreateInput, ApiServerUncheckedCreateInput>
    /**
     * In case the ApiServer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApiServerUpdateInput, ApiServerUncheckedUpdateInput>
  }


  /**
   * ApiServer delete
   */
  export type ApiServerDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiServer
     */
    select?: ApiServerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApiServerInclude<ExtArgs> | null
    /**
     * Filter which ApiServer to delete.
     */
    where: ApiServerWhereUniqueInput
  }


  /**
   * ApiServer deleteMany
   */
  export type ApiServerDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ApiServers to delete
     */
    where?: ApiServerWhereInput
  }


  /**
   * ApiServer.actionLogs
   */
  export type ApiServer$actionLogsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionLog
     */
    select?: ActionLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActionLogInclude<ExtArgs> | null
    where?: ActionLogWhereInput
    orderBy?: Enumerable<ActionLogOrderByWithRelationInput>
    cursor?: ActionLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ActionLogScalarFieldEnum>
  }


  /**
   * ApiServer.networks
   */
  export type ApiServer$networksArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Network
     */
    select?: NetworkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NetworkInclude<ExtArgs> | null
    where?: NetworkWhereInput
    orderBy?: Enumerable<NetworkOrderByWithRelationInput>
    cursor?: NetworkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<NetworkScalarFieldEnum>
  }


  /**
   * ApiServer.transactions
   */
  export type ApiServer$transactionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: Enumerable<TransactionOrderByWithRelationInput>
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TransactionScalarFieldEnum>
  }


  /**
   * ApiServer.users
   */
  export type ApiServer$usersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * ApiServer without action
   */
  export type ApiServerArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiServer
     */
    select?: ApiServerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApiServerInclude<ExtArgs> | null
  }



  /**
   * Model ActionLog
   */


  export type AggregateActionLog = {
    _count: ActionLogCountAggregateOutputType | null
    _min: ActionLogMinAggregateOutputType | null
    _max: ActionLogMaxAggregateOutputType | null
  }

  export type ActionLogMinAggregateOutputType = {
    id: string | null
    serverId: string | null
    initiatorUserId: string | null
    targetUserId: string | null
    type: string | null
    isRevertable: boolean | null
    revertedAt: Date | null
    revertedBy: string | null
    createdAt: Date | null
  }

  export type ActionLogMaxAggregateOutputType = {
    id: string | null
    serverId: string | null
    initiatorUserId: string | null
    targetUserId: string | null
    type: string | null
    isRevertable: boolean | null
    revertedAt: Date | null
    revertedBy: string | null
    createdAt: Date | null
  }

  export type ActionLogCountAggregateOutputType = {
    id: number
    serverId: number
    initiatorUserId: number
    targetUserId: number
    type: number
    details: number
    isRevertable: number
    revertedAt: number
    revertedBy: number
    createdAt: number
    _all: number
  }


  export type ActionLogMinAggregateInputType = {
    id?: true
    serverId?: true
    initiatorUserId?: true
    targetUserId?: true
    type?: true
    isRevertable?: true
    revertedAt?: true
    revertedBy?: true
    createdAt?: true
  }

  export type ActionLogMaxAggregateInputType = {
    id?: true
    serverId?: true
    initiatorUserId?: true
    targetUserId?: true
    type?: true
    isRevertable?: true
    revertedAt?: true
    revertedBy?: true
    createdAt?: true
  }

  export type ActionLogCountAggregateInputType = {
    id?: true
    serverId?: true
    initiatorUserId?: true
    targetUserId?: true
    type?: true
    details?: true
    isRevertable?: true
    revertedAt?: true
    revertedBy?: true
    createdAt?: true
    _all?: true
  }

  export type ActionLogAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActionLog to aggregate.
     */
    where?: ActionLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActionLogs to fetch.
     */
    orderBy?: Enumerable<ActionLogOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActionLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActionLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActionLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ActionLogs
    **/
    _count?: true | ActionLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActionLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActionLogMaxAggregateInputType
  }

  export type GetActionLogAggregateType<T extends ActionLogAggregateArgs> = {
        [P in keyof T & keyof AggregateActionLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActionLog[P]>
      : GetScalarType<T[P], AggregateActionLog[P]>
  }




  export type ActionLogGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ActionLogWhereInput
    orderBy?: Enumerable<ActionLogOrderByWithAggregationInput>
    by: ActionLogScalarFieldEnum[]
    having?: ActionLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActionLogCountAggregateInputType | true
    _min?: ActionLogMinAggregateInputType
    _max?: ActionLogMaxAggregateInputType
  }


  export type ActionLogGroupByOutputType = {
    id: string
    serverId: string
    initiatorUserId: string | null
    targetUserId: string | null
    type: string
    details: JsonValue
    isRevertable: boolean
    revertedAt: Date | null
    revertedBy: string | null
    createdAt: Date
    _count: ActionLogCountAggregateOutputType | null
    _min: ActionLogMinAggregateOutputType | null
    _max: ActionLogMaxAggregateOutputType | null
  }

  type GetActionLogGroupByPayload<T extends ActionLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ActionLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActionLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActionLogGroupByOutputType[P]>
            : GetScalarType<T[P], ActionLogGroupByOutputType[P]>
        }
      >
    >


  export type ActionLogSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serverId?: boolean
    initiatorUserId?: boolean
    targetUserId?: boolean
    type?: boolean
    details?: boolean
    isRevertable?: boolean
    revertedAt?: boolean
    revertedBy?: boolean
    createdAt?: boolean
    initiatorUser?: boolean | UserArgs<ExtArgs>
    server?: boolean | ApiServerArgs<ExtArgs>
    targetUser?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["actionLog"]>

  export type ActionLogSelectScalar = {
    id?: boolean
    serverId?: boolean
    initiatorUserId?: boolean
    targetUserId?: boolean
    type?: boolean
    details?: boolean
    isRevertable?: boolean
    revertedAt?: boolean
    revertedBy?: boolean
    createdAt?: boolean
  }

  export type ActionLogInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    initiatorUser?: boolean | UserArgs<ExtArgs>
    server?: boolean | ApiServerArgs<ExtArgs>
    targetUser?: boolean | UserArgs<ExtArgs>
  }


  type ActionLogGetPayload<S extends boolean | null | undefined | ActionLogArgs> = $Types.GetResult<ActionLogPayload, S>

  type ActionLogCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ActionLogFindManyArgs, 'select' | 'include'> & {
      select?: ActionLogCountAggregateInputType | true
    }

  export interface ActionLogDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ActionLog'], meta: { name: 'ActionLog' } }
    /**
     * Find zero or one ActionLog that matches the filter.
     * @param {ActionLogFindUniqueArgs} args - Arguments to find a ActionLog
     * @example
     * // Get one ActionLog
     * const actionLog = await prisma.actionLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ActionLogFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ActionLogFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ActionLog'> extends True ? Prisma__ActionLogClient<$Types.GetResult<ActionLogPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ActionLogClient<$Types.GetResult<ActionLogPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one ActionLog that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ActionLogFindUniqueOrThrowArgs} args - Arguments to find a ActionLog
     * @example
     * // Get one ActionLog
     * const actionLog = await prisma.actionLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ActionLogFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ActionLogFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ActionLogClient<$Types.GetResult<ActionLogPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first ActionLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionLogFindFirstArgs} args - Arguments to find a ActionLog
     * @example
     * // Get one ActionLog
     * const actionLog = await prisma.actionLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ActionLogFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ActionLogFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ActionLog'> extends True ? Prisma__ActionLogClient<$Types.GetResult<ActionLogPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ActionLogClient<$Types.GetResult<ActionLogPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first ActionLog that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionLogFindFirstOrThrowArgs} args - Arguments to find a ActionLog
     * @example
     * // Get one ActionLog
     * const actionLog = await prisma.actionLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ActionLogFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ActionLogFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ActionLogClient<$Types.GetResult<ActionLogPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more ActionLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionLogFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ActionLogs
     * const actionLogs = await prisma.actionLog.findMany()
     * 
     * // Get first 10 ActionLogs
     * const actionLogs = await prisma.actionLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const actionLogWithIdOnly = await prisma.actionLog.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ActionLogFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ActionLogFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ActionLogPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a ActionLog.
     * @param {ActionLogCreateArgs} args - Arguments to create a ActionLog.
     * @example
     * // Create one ActionLog
     * const ActionLog = await prisma.actionLog.create({
     *   data: {
     *     // ... data to create a ActionLog
     *   }
     * })
     * 
    **/
    create<T extends ActionLogCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ActionLogCreateArgs<ExtArgs>>
    ): Prisma__ActionLogClient<$Types.GetResult<ActionLogPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many ActionLogs.
     *     @param {ActionLogCreateManyArgs} args - Arguments to create many ActionLogs.
     *     @example
     *     // Create many ActionLogs
     *     const actionLog = await prisma.actionLog.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ActionLogCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ActionLogCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ActionLog.
     * @param {ActionLogDeleteArgs} args - Arguments to delete one ActionLog.
     * @example
     * // Delete one ActionLog
     * const ActionLog = await prisma.actionLog.delete({
     *   where: {
     *     // ... filter to delete one ActionLog
     *   }
     * })
     * 
    **/
    delete<T extends ActionLogDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ActionLogDeleteArgs<ExtArgs>>
    ): Prisma__ActionLogClient<$Types.GetResult<ActionLogPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one ActionLog.
     * @param {ActionLogUpdateArgs} args - Arguments to update one ActionLog.
     * @example
     * // Update one ActionLog
     * const actionLog = await prisma.actionLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ActionLogUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ActionLogUpdateArgs<ExtArgs>>
    ): Prisma__ActionLogClient<$Types.GetResult<ActionLogPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more ActionLogs.
     * @param {ActionLogDeleteManyArgs} args - Arguments to filter ActionLogs to delete.
     * @example
     * // Delete a few ActionLogs
     * const { count } = await prisma.actionLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ActionLogDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ActionLogDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActionLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ActionLogs
     * const actionLog = await prisma.actionLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ActionLogUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ActionLogUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ActionLog.
     * @param {ActionLogUpsertArgs} args - Arguments to update or create a ActionLog.
     * @example
     * // Update or create a ActionLog
     * const actionLog = await prisma.actionLog.upsert({
     *   create: {
     *     // ... data to create a ActionLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ActionLog we want to update
     *   }
     * })
    **/
    upsert<T extends ActionLogUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ActionLogUpsertArgs<ExtArgs>>
    ): Prisma__ActionLogClient<$Types.GetResult<ActionLogPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of ActionLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionLogCountArgs} args - Arguments to filter ActionLogs to count.
     * @example
     * // Count the number of ActionLogs
     * const count = await prisma.actionLog.count({
     *   where: {
     *     // ... the filter for the ActionLogs we want to count
     *   }
     * })
    **/
    count<T extends ActionLogCountArgs>(
      args?: Subset<T, ActionLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActionLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ActionLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActionLogAggregateArgs>(args: Subset<T, ActionLogAggregateArgs>): Prisma.PrismaPromise<GetActionLogAggregateType<T>>

    /**
     * Group by ActionLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActionLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActionLogGroupByArgs['orderBy'] }
        : { orderBy?: ActionLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActionLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActionLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ActionLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ActionLogClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    initiatorUser<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    server<T extends ApiServerArgs<ExtArgs> = {}>(args?: Subset<T, ApiServerArgs<ExtArgs>>): Prisma__ApiServerClient<$Types.GetResult<ApiServerPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    targetUser<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ActionLog base type for findUnique actions
   */
  export type ActionLogFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionLog
     */
    select?: ActionLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActionLogInclude<ExtArgs> | null
    /**
     * Filter, which ActionLog to fetch.
     */
    where: ActionLogWhereUniqueInput
  }

  /**
   * ActionLog findUnique
   */
  export interface ActionLogFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ActionLogFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ActionLog findUniqueOrThrow
   */
  export type ActionLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionLog
     */
    select?: ActionLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActionLogInclude<ExtArgs> | null
    /**
     * Filter, which ActionLog to fetch.
     */
    where: ActionLogWhereUniqueInput
  }


  /**
   * ActionLog base type for findFirst actions
   */
  export type ActionLogFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionLog
     */
    select?: ActionLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActionLogInclude<ExtArgs> | null
    /**
     * Filter, which ActionLog to fetch.
     */
    where?: ActionLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActionLogs to fetch.
     */
    orderBy?: Enumerable<ActionLogOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActionLogs.
     */
    cursor?: ActionLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActionLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActionLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActionLogs.
     */
    distinct?: Enumerable<ActionLogScalarFieldEnum>
  }

  /**
   * ActionLog findFirst
   */
  export interface ActionLogFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ActionLogFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ActionLog findFirstOrThrow
   */
  export type ActionLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionLog
     */
    select?: ActionLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActionLogInclude<ExtArgs> | null
    /**
     * Filter, which ActionLog to fetch.
     */
    where?: ActionLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActionLogs to fetch.
     */
    orderBy?: Enumerable<ActionLogOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActionLogs.
     */
    cursor?: ActionLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActionLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActionLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActionLogs.
     */
    distinct?: Enumerable<ActionLogScalarFieldEnum>
  }


  /**
   * ActionLog findMany
   */
  export type ActionLogFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionLog
     */
    select?: ActionLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActionLogInclude<ExtArgs> | null
    /**
     * Filter, which ActionLogs to fetch.
     */
    where?: ActionLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActionLogs to fetch.
     */
    orderBy?: Enumerable<ActionLogOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ActionLogs.
     */
    cursor?: ActionLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActionLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActionLogs.
     */
    skip?: number
    distinct?: Enumerable<ActionLogScalarFieldEnum>
  }


  /**
   * ActionLog create
   */
  export type ActionLogCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionLog
     */
    select?: ActionLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActionLogInclude<ExtArgs> | null
    /**
     * The data needed to create a ActionLog.
     */
    data: XOR<ActionLogCreateInput, ActionLogUncheckedCreateInput>
  }


  /**
   * ActionLog createMany
   */
  export type ActionLogCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ActionLogs.
     */
    data: Enumerable<ActionLogCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ActionLog update
   */
  export type ActionLogUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionLog
     */
    select?: ActionLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActionLogInclude<ExtArgs> | null
    /**
     * The data needed to update a ActionLog.
     */
    data: XOR<ActionLogUpdateInput, ActionLogUncheckedUpdateInput>
    /**
     * Choose, which ActionLog to update.
     */
    where: ActionLogWhereUniqueInput
  }


  /**
   * ActionLog updateMany
   */
  export type ActionLogUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ActionLogs.
     */
    data: XOR<ActionLogUpdateManyMutationInput, ActionLogUncheckedUpdateManyInput>
    /**
     * Filter which ActionLogs to update
     */
    where?: ActionLogWhereInput
  }


  /**
   * ActionLog upsert
   */
  export type ActionLogUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionLog
     */
    select?: ActionLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActionLogInclude<ExtArgs> | null
    /**
     * The filter to search for the ActionLog to update in case it exists.
     */
    where: ActionLogWhereUniqueInput
    /**
     * In case the ActionLog found by the `where` argument doesn't exist, create a new ActionLog with this data.
     */
    create: XOR<ActionLogCreateInput, ActionLogUncheckedCreateInput>
    /**
     * In case the ActionLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActionLogUpdateInput, ActionLogUncheckedUpdateInput>
  }


  /**
   * ActionLog delete
   */
  export type ActionLogDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionLog
     */
    select?: ActionLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActionLogInclude<ExtArgs> | null
    /**
     * Filter which ActionLog to delete.
     */
    where: ActionLogWhereUniqueInput
  }


  /**
   * ActionLog deleteMany
   */
  export type ActionLogDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActionLogs to delete
     */
    where?: ActionLogWhereInput
  }


  /**
   * ActionLog without action
   */
  export type ActionLogArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionLog
     */
    select?: ActionLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActionLogInclude<ExtArgs> | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    balance: number | null
    xp: number | null
    level: number | null
    dailyStreak: number | null
    coinflipPlaysToday: number | null
    coinflipWinStreak: number | null
    xpBonusPerRicarica: number | null
    costoSpedizioneItalia: number | null
    costoSpedizioneEuropa: number | null
    scontoBonusRicarica: number | null
  }

  export type UserSumAggregateOutputType = {
    balance: number | null
    xp: number | null
    level: number | null
    dailyStreak: number | null
    coinflipPlaysToday: number | null
    coinflipWinStreak: number | null
    xpBonusPerRicarica: number | null
    costoSpedizioneItalia: number | null
    costoSpedizioneEuropa: number | null
    scontoBonusRicarica: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    serverId: string | null
    discordId: string | null
    username: string | null
    balance: number | null
    xp: number | null
    level: number | null
    dailyStreak: number | null
    lastDaily: Date | null
    hasReceivedWelcomeShipping: boolean | null
    lastCoinflip: Date | null
    coinflipPlaysToday: number | null
    coinflipWinStreak: number | null
    xpBonusPerRicarica: number | null
    costoSpedizioneItalia: number | null
    costoSpedizioneEuropa: number | null
    scontoBonusRicarica: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    serverId: string | null
    discordId: string | null
    username: string | null
    balance: number | null
    xp: number | null
    level: number | null
    dailyStreak: number | null
    lastDaily: Date | null
    hasReceivedWelcomeShipping: boolean | null
    lastCoinflip: Date | null
    coinflipPlaysToday: number | null
    coinflipWinStreak: number | null
    xpBonusPerRicarica: number | null
    costoSpedizioneItalia: number | null
    costoSpedizioneEuropa: number | null
    scontoBonusRicarica: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    serverId: number
    discordId: number
    username: number
    balance: number
    xp: number
    level: number
    dailyStreak: number
    lastDaily: number
    hasReceivedWelcomeShipping: number
    lastCoinflip: number
    coinflipPlaysToday: number
    coinflipWinStreak: number
    xpBonusPerRicarica: number
    costoSpedizioneItalia: number
    costoSpedizioneEuropa: number
    scontoBonusRicarica: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    balance?: true
    xp?: true
    level?: true
    dailyStreak?: true
    coinflipPlaysToday?: true
    coinflipWinStreak?: true
    xpBonusPerRicarica?: true
    costoSpedizioneItalia?: true
    costoSpedizioneEuropa?: true
    scontoBonusRicarica?: true
  }

  export type UserSumAggregateInputType = {
    balance?: true
    xp?: true
    level?: true
    dailyStreak?: true
    coinflipPlaysToday?: true
    coinflipWinStreak?: true
    xpBonusPerRicarica?: true
    costoSpedizioneItalia?: true
    costoSpedizioneEuropa?: true
    scontoBonusRicarica?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    serverId?: true
    discordId?: true
    username?: true
    balance?: true
    xp?: true
    level?: true
    dailyStreak?: true
    lastDaily?: true
    hasReceivedWelcomeShipping?: true
    lastCoinflip?: true
    coinflipPlaysToday?: true
    coinflipWinStreak?: true
    xpBonusPerRicarica?: true
    costoSpedizioneItalia?: true
    costoSpedizioneEuropa?: true
    scontoBonusRicarica?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    serverId?: true
    discordId?: true
    username?: true
    balance?: true
    xp?: true
    level?: true
    dailyStreak?: true
    lastDaily?: true
    hasReceivedWelcomeShipping?: true
    lastCoinflip?: true
    coinflipPlaysToday?: true
    coinflipWinStreak?: true
    xpBonusPerRicarica?: true
    costoSpedizioneItalia?: true
    costoSpedizioneEuropa?: true
    scontoBonusRicarica?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    serverId?: true
    discordId?: true
    username?: true
    balance?: true
    xp?: true
    level?: true
    dailyStreak?: true
    lastDaily?: true
    hasReceivedWelcomeShipping?: true
    lastCoinflip?: true
    coinflipPlaysToday?: true
    coinflipWinStreak?: true
    xpBonusPerRicarica?: true
    costoSpedizioneItalia?: true
    costoSpedizioneEuropa?: true
    scontoBonusRicarica?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    serverId: string
    discordId: string
    username: string
    balance: number
    xp: number
    level: number
    dailyStreak: number
    lastDaily: Date | null
    hasReceivedWelcomeShipping: boolean
    lastCoinflip: Date | null
    coinflipPlaysToday: number
    coinflipWinStreak: number
    xpBonusPerRicarica: number
    costoSpedizioneItalia: number
    costoSpedizioneEuropa: number
    scontoBonusRicarica: number
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serverId?: boolean
    discordId?: boolean
    username?: boolean
    balance?: boolean
    xp?: boolean
    level?: boolean
    dailyStreak?: boolean
    lastDaily?: boolean
    hasReceivedWelcomeShipping?: boolean
    lastCoinflip?: boolean
    coinflipPlaysToday?: boolean
    coinflipWinStreak?: boolean
    xpBonusPerRicarica?: boolean
    costoSpedizioneItalia?: boolean
    costoSpedizioneEuropa?: boolean
    scontoBonusRicarica?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    initiatedActions?: boolean | User$initiatedActionsArgs<ExtArgs>
    targetedActions?: boolean | User$targetedActionsArgs<ExtArgs>
    networkMember?: boolean | NetworkMemberArgs<ExtArgs>
    referralCodes?: boolean | User$referralCodesArgs<ExtArgs>
    referredUsers?: boolean | User$referredUsersArgs<ExtArgs>
    shippingOrders?: boolean | User$shippingOrdersArgs<ExtArgs>
    transactions?: boolean | User$transactionsArgs<ExtArgs>
    rechargeRequests?: boolean | User$rechargeRequestsArgs<ExtArgs>
    preferences?: boolean | UserPreferencesArgs<ExtArgs>
    server?: boolean | ApiServerArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    serverId?: boolean
    discordId?: boolean
    username?: boolean
    balance?: boolean
    xp?: boolean
    level?: boolean
    dailyStreak?: boolean
    lastDaily?: boolean
    hasReceivedWelcomeShipping?: boolean
    lastCoinflip?: boolean
    coinflipPlaysToday?: boolean
    coinflipWinStreak?: boolean
    xpBonusPerRicarica?: boolean
    costoSpedizioneItalia?: boolean
    costoSpedizioneEuropa?: boolean
    scontoBonusRicarica?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    initiatedActions?: boolean | User$initiatedActionsArgs<ExtArgs>
    targetedActions?: boolean | User$targetedActionsArgs<ExtArgs>
    networkMember?: boolean | NetworkMemberArgs<ExtArgs>
    referralCodes?: boolean | User$referralCodesArgs<ExtArgs>
    referredUsers?: boolean | User$referredUsersArgs<ExtArgs>
    shippingOrders?: boolean | User$shippingOrdersArgs<ExtArgs>
    transactions?: boolean | User$transactionsArgs<ExtArgs>
    rechargeRequests?: boolean | User$rechargeRequestsArgs<ExtArgs>
    preferences?: boolean | UserPreferencesArgs<ExtArgs>
    server?: boolean | ApiServerArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeArgs<ExtArgs>
  }


  type UserGetPayload<S extends boolean | null | undefined | UserArgs> = $Types.GetResult<UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<UserPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    initiatedActions<T extends User$initiatedActionsArgs<ExtArgs> = {}>(args?: Subset<T, User$initiatedActionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ActionLogPayload<ExtArgs>, T, 'findMany', never>| Null>;

    targetedActions<T extends User$targetedActionsArgs<ExtArgs> = {}>(args?: Subset<T, User$targetedActionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ActionLogPayload<ExtArgs>, T, 'findMany', never>| Null>;

    networkMember<T extends NetworkMemberArgs<ExtArgs> = {}>(args?: Subset<T, NetworkMemberArgs<ExtArgs>>): Prisma__NetworkMemberClient<$Types.GetResult<NetworkMemberPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    referralCodes<T extends User$referralCodesArgs<ExtArgs> = {}>(args?: Subset<T, User$referralCodesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ReferralCodePayload<ExtArgs>, T, 'findMany', never>| Null>;

    referredUsers<T extends User$referredUsersArgs<ExtArgs> = {}>(args?: Subset<T, User$referredUsersArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ReferredUserPayload<ExtArgs>, T, 'findMany', never>| Null>;

    shippingOrders<T extends User$shippingOrdersArgs<ExtArgs> = {}>(args?: Subset<T, User$shippingOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ShippingOrderPayload<ExtArgs>, T, 'findMany', never>| Null>;

    transactions<T extends User$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, User$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<TransactionPayload<ExtArgs>, T, 'findMany', never>| Null>;

    rechargeRequests<T extends User$rechargeRequestsArgs<ExtArgs> = {}>(args?: Subset<T, User$rechargeRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<RechargeRequestPayload<ExtArgs>, T, 'findMany', never>| Null>;

    preferences<T extends UserPreferencesArgs<ExtArgs> = {}>(args?: Subset<T, UserPreferencesArgs<ExtArgs>>): Prisma__UserPreferencesClient<$Types.GetResult<UserPreferencesPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    server<T extends ApiServerArgs<ExtArgs> = {}>(args?: Subset<T, ApiServerArgs<ExtArgs>>): Prisma__ApiServerClient<$Types.GetResult<ApiServerPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.initiatedActions
   */
  export type User$initiatedActionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionLog
     */
    select?: ActionLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActionLogInclude<ExtArgs> | null
    where?: ActionLogWhereInput
    orderBy?: Enumerable<ActionLogOrderByWithRelationInput>
    cursor?: ActionLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ActionLogScalarFieldEnum>
  }


  /**
   * User.targetedActions
   */
  export type User$targetedActionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionLog
     */
    select?: ActionLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActionLogInclude<ExtArgs> | null
    where?: ActionLogWhereInput
    orderBy?: Enumerable<ActionLogOrderByWithRelationInput>
    cursor?: ActionLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ActionLogScalarFieldEnum>
  }


  /**
   * User.referralCodes
   */
  export type User$referralCodesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    where?: ReferralCodeWhereInput
    orderBy?: Enumerable<ReferralCodeOrderByWithRelationInput>
    cursor?: ReferralCodeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ReferralCodeScalarFieldEnum>
  }


  /**
   * User.referredUsers
   */
  export type User$referredUsersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferredUser
     */
    select?: ReferredUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReferredUserInclude<ExtArgs> | null
    where?: ReferredUserWhereInput
    orderBy?: Enumerable<ReferredUserOrderByWithRelationInput>
    cursor?: ReferredUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ReferredUserScalarFieldEnum>
  }


  /**
   * User.shippingOrders
   */
  export type User$shippingOrdersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShippingOrder
     */
    select?: ShippingOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShippingOrderInclude<ExtArgs> | null
    where?: ShippingOrderWhereInput
    orderBy?: Enumerable<ShippingOrderOrderByWithRelationInput>
    cursor?: ShippingOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ShippingOrderScalarFieldEnum>
  }


  /**
   * User.transactions
   */
  export type User$transactionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: Enumerable<TransactionOrderByWithRelationInput>
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TransactionScalarFieldEnum>
  }


  /**
   * User.rechargeRequests
   */
  export type User$rechargeRequestsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RechargeRequest
     */
    select?: RechargeRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RechargeRequestInclude<ExtArgs> | null
    where?: RechargeRequestWhereInput
    orderBy?: Enumerable<RechargeRequestOrderByWithRelationInput>
    cursor?: RechargeRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RechargeRequestScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Transaction
   */


  export type AggregateTransaction = {
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  export type TransactionAvgAggregateOutputType = {
    amount: number | null
    baseAmount: number | null
  }

  export type TransactionSumAggregateOutputType = {
    amount: number | null
    baseAmount: number | null
  }

  export type TransactionMinAggregateOutputType = {
    id: string | null
    serverId: string | null
    userId: string | null
    type: string | null
    amount: number | null
    description: string | null
    networkId: string | null
    baseAmount: number | null
    createdAt: Date | null
  }

  export type TransactionMaxAggregateOutputType = {
    id: string | null
    serverId: string | null
    userId: string | null
    type: string | null
    amount: number | null
    description: string | null
    networkId: string | null
    baseAmount: number | null
    createdAt: Date | null
  }

  export type TransactionCountAggregateOutputType = {
    id: number
    serverId: number
    userId: number
    type: number
    amount: number
    description: number
    networkId: number
    baseAmount: number
    createdAt: number
    _all: number
  }


  export type TransactionAvgAggregateInputType = {
    amount?: true
    baseAmount?: true
  }

  export type TransactionSumAggregateInputType = {
    amount?: true
    baseAmount?: true
  }

  export type TransactionMinAggregateInputType = {
    id?: true
    serverId?: true
    userId?: true
    type?: true
    amount?: true
    description?: true
    networkId?: true
    baseAmount?: true
    createdAt?: true
  }

  export type TransactionMaxAggregateInputType = {
    id?: true
    serverId?: true
    userId?: true
    type?: true
    amount?: true
    description?: true
    networkId?: true
    baseAmount?: true
    createdAt?: true
  }

  export type TransactionCountAggregateInputType = {
    id?: true
    serverId?: true
    userId?: true
    type?: true
    amount?: true
    description?: true
    networkId?: true
    baseAmount?: true
    createdAt?: true
    _all?: true
  }

  export type TransactionAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transaction to aggregate.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: Enumerable<TransactionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transactions
    **/
    _count?: true | TransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionMaxAggregateInputType
  }

  export type GetTransactionAggregateType<T extends TransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransaction[P]>
      : GetScalarType<T[P], AggregateTransaction[P]>
  }




  export type TransactionGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
    orderBy?: Enumerable<TransactionOrderByWithAggregationInput>
    by: TransactionScalarFieldEnum[]
    having?: TransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionCountAggregateInputType | true
    _avg?: TransactionAvgAggregateInputType
    _sum?: TransactionSumAggregateInputType
    _min?: TransactionMinAggregateInputType
    _max?: TransactionMaxAggregateInputType
  }


  export type TransactionGroupByOutputType = {
    id: string
    serverId: string
    userId: string
    type: string
    amount: number
    description: string
    networkId: string | null
    baseAmount: number | null
    createdAt: Date
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  type GetTransactionGroupByPayload<T extends TransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionGroupByOutputType[P]>
        }
      >
    >


  export type TransactionSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serverId?: boolean
    userId?: boolean
    type?: boolean
    amount?: boolean
    description?: boolean
    networkId?: boolean
    baseAmount?: boolean
    createdAt?: boolean
    server?: boolean | ApiServerArgs<ExtArgs>
    user?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectScalar = {
    id?: boolean
    serverId?: boolean
    userId?: boolean
    type?: boolean
    amount?: boolean
    description?: boolean
    networkId?: boolean
    baseAmount?: boolean
    createdAt?: boolean
  }

  export type TransactionInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    server?: boolean | ApiServerArgs<ExtArgs>
    user?: boolean | UserArgs<ExtArgs>
  }


  type TransactionGetPayload<S extends boolean | null | undefined | TransactionArgs> = $Types.GetResult<TransactionPayload, S>

  type TransactionCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<TransactionFindManyArgs, 'select' | 'include'> & {
      select?: TransactionCountAggregateInputType | true
    }

  export interface TransactionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transaction'], meta: { name: 'Transaction' } }
    /**
     * Find zero or one Transaction that matches the filter.
     * @param {TransactionFindUniqueArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TransactionFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TransactionFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Transaction'> extends True ? Prisma__TransactionClient<$Types.GetResult<TransactionPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__TransactionClient<$Types.GetResult<TransactionPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Transaction that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TransactionFindUniqueOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TransactionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TransactionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TransactionClient<$Types.GetResult<TransactionPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Transaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TransactionFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TransactionFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Transaction'> extends True ? Prisma__TransactionClient<$Types.GetResult<TransactionPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__TransactionClient<$Types.GetResult<TransactionPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Transaction that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TransactionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TransactionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TransactionClient<$Types.GetResult<TransactionPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transactions
     * const transactions = await prisma.transaction.findMany()
     * 
     * // Get first 10 Transactions
     * const transactions = await prisma.transaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionWithIdOnly = await prisma.transaction.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TransactionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TransactionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<TransactionPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Transaction.
     * @param {TransactionCreateArgs} args - Arguments to create a Transaction.
     * @example
     * // Create one Transaction
     * const Transaction = await prisma.transaction.create({
     *   data: {
     *     // ... data to create a Transaction
     *   }
     * })
     * 
    **/
    create<T extends TransactionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TransactionCreateArgs<ExtArgs>>
    ): Prisma__TransactionClient<$Types.GetResult<TransactionPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Transactions.
     *     @param {TransactionCreateManyArgs} args - Arguments to create many Transactions.
     *     @example
     *     // Create many Transactions
     *     const transaction = await prisma.transaction.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TransactionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TransactionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Transaction.
     * @param {TransactionDeleteArgs} args - Arguments to delete one Transaction.
     * @example
     * // Delete one Transaction
     * const Transaction = await prisma.transaction.delete({
     *   where: {
     *     // ... filter to delete one Transaction
     *   }
     * })
     * 
    **/
    delete<T extends TransactionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TransactionDeleteArgs<ExtArgs>>
    ): Prisma__TransactionClient<$Types.GetResult<TransactionPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Transaction.
     * @param {TransactionUpdateArgs} args - Arguments to update one Transaction.
     * @example
     * // Update one Transaction
     * const transaction = await prisma.transaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TransactionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TransactionUpdateArgs<ExtArgs>>
    ): Prisma__TransactionClient<$Types.GetResult<TransactionPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Transactions.
     * @param {TransactionDeleteManyArgs} args - Arguments to filter Transactions to delete.
     * @example
     * // Delete a few Transactions
     * const { count } = await prisma.transaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TransactionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TransactionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TransactionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TransactionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Transaction.
     * @param {TransactionUpsertArgs} args - Arguments to update or create a Transaction.
     * @example
     * // Update or create a Transaction
     * const transaction = await prisma.transaction.upsert({
     *   create: {
     *     // ... data to create a Transaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transaction we want to update
     *   }
     * })
    **/
    upsert<T extends TransactionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TransactionUpsertArgs<ExtArgs>>
    ): Prisma__TransactionClient<$Types.GetResult<TransactionPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionCountArgs} args - Arguments to filter Transactions to count.
     * @example
     * // Count the number of Transactions
     * const count = await prisma.transaction.count({
     *   where: {
     *     // ... the filter for the Transactions we want to count
     *   }
     * })
    **/
    count<T extends TransactionCountArgs>(
      args?: Subset<T, TransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionAggregateArgs>(args: Subset<T, TransactionAggregateArgs>): Prisma.PrismaPromise<GetTransactionAggregateType<T>>

    /**
     * Group by Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionGroupByArgs['orderBy'] }
        : { orderBy?: TransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Transaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TransactionClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    server<T extends ApiServerArgs<ExtArgs> = {}>(args?: Subset<T, ApiServerArgs<ExtArgs>>): Prisma__ApiServerClient<$Types.GetResult<ApiServerPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Transaction base type for findUnique actions
   */
  export type TransactionFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findUnique
   */
  export interface TransactionFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends TransactionFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Transaction findUniqueOrThrow
   */
  export type TransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }


  /**
   * Transaction base type for findFirst actions
   */
  export type TransactionFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: Enumerable<TransactionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: Enumerable<TransactionScalarFieldEnum>
  }

  /**
   * Transaction findFirst
   */
  export interface TransactionFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends TransactionFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Transaction findFirstOrThrow
   */
  export type TransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: Enumerable<TransactionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: Enumerable<TransactionScalarFieldEnum>
  }


  /**
   * Transaction findMany
   */
  export type TransactionFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transactions to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: Enumerable<TransactionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    distinct?: Enumerable<TransactionScalarFieldEnum>
  }


  /**
   * Transaction create
   */
  export type TransactionCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a Transaction.
     */
    data: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
  }


  /**
   * Transaction createMany
   */
  export type TransactionCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Transactions.
     */
    data: Enumerable<TransactionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Transaction update
   */
  export type TransactionUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a Transaction.
     */
    data: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
    /**
     * Choose, which Transaction to update.
     */
    where: TransactionWhereUniqueInput
  }


  /**
   * Transaction updateMany
   */
  export type TransactionUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Transactions.
     */
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     */
    where?: TransactionWhereInput
  }


  /**
   * Transaction upsert
   */
  export type TransactionUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the Transaction to update in case it exists.
     */
    where: TransactionWhereUniqueInput
    /**
     * In case the Transaction found by the `where` argument doesn't exist, create a new Transaction with this data.
     */
    create: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
    /**
     * In case the Transaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
  }


  /**
   * Transaction delete
   */
  export type TransactionDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter which Transaction to delete.
     */
    where: TransactionWhereUniqueInput
  }


  /**
   * Transaction deleteMany
   */
  export type TransactionDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transactions to delete
     */
    where?: TransactionWhereInput
  }


  /**
   * Transaction without action
   */
  export type TransactionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransactionInclude<ExtArgs> | null
  }



  /**
   * Model ReferralCode
   */


  export type AggregateReferralCode = {
    _count: ReferralCodeCountAggregateOutputType | null
    _min: ReferralCodeMinAggregateOutputType | null
    _max: ReferralCodeMaxAggregateOutputType | null
  }

  export type ReferralCodeMinAggregateOutputType = {
    id: string | null
    serverId: string | null
    code: string | null
    ownerId: string | null
    createdAt: Date | null
  }

  export type ReferralCodeMaxAggregateOutputType = {
    id: string | null
    serverId: string | null
    code: string | null
    ownerId: string | null
    createdAt: Date | null
  }

  export type ReferralCodeCountAggregateOutputType = {
    id: number
    serverId: number
    code: number
    ownerId: number
    createdAt: number
    _all: number
  }


  export type ReferralCodeMinAggregateInputType = {
    id?: true
    serverId?: true
    code?: true
    ownerId?: true
    createdAt?: true
  }

  export type ReferralCodeMaxAggregateInputType = {
    id?: true
    serverId?: true
    code?: true
    ownerId?: true
    createdAt?: true
  }

  export type ReferralCodeCountAggregateInputType = {
    id?: true
    serverId?: true
    code?: true
    ownerId?: true
    createdAt?: true
    _all?: true
  }

  export type ReferralCodeAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReferralCode to aggregate.
     */
    where?: ReferralCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReferralCodes to fetch.
     */
    orderBy?: Enumerable<ReferralCodeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReferralCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReferralCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReferralCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReferralCodes
    **/
    _count?: true | ReferralCodeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReferralCodeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReferralCodeMaxAggregateInputType
  }

  export type GetReferralCodeAggregateType<T extends ReferralCodeAggregateArgs> = {
        [P in keyof T & keyof AggregateReferralCode]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReferralCode[P]>
      : GetScalarType<T[P], AggregateReferralCode[P]>
  }




  export type ReferralCodeGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ReferralCodeWhereInput
    orderBy?: Enumerable<ReferralCodeOrderByWithAggregationInput>
    by: ReferralCodeScalarFieldEnum[]
    having?: ReferralCodeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReferralCodeCountAggregateInputType | true
    _min?: ReferralCodeMinAggregateInputType
    _max?: ReferralCodeMaxAggregateInputType
  }


  export type ReferralCodeGroupByOutputType = {
    id: string
    serverId: string
    code: string
    ownerId: string
    createdAt: Date
    _count: ReferralCodeCountAggregateOutputType | null
    _min: ReferralCodeMinAggregateOutputType | null
    _max: ReferralCodeMaxAggregateOutputType | null
  }

  type GetReferralCodeGroupByPayload<T extends ReferralCodeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ReferralCodeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReferralCodeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReferralCodeGroupByOutputType[P]>
            : GetScalarType<T[P], ReferralCodeGroupByOutputType[P]>
        }
      >
    >


  export type ReferralCodeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serverId?: boolean
    code?: boolean
    ownerId?: boolean
    createdAt?: boolean
    owner?: boolean | UserArgs<ExtArgs>
    referred?: boolean | ReferralCode$referredArgs<ExtArgs>
    _count?: boolean | ReferralCodeCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["referralCode"]>

  export type ReferralCodeSelectScalar = {
    id?: boolean
    serverId?: boolean
    code?: boolean
    ownerId?: boolean
    createdAt?: boolean
  }

  export type ReferralCodeInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    owner?: boolean | UserArgs<ExtArgs>
    referred?: boolean | ReferralCode$referredArgs<ExtArgs>
    _count?: boolean | ReferralCodeCountOutputTypeArgs<ExtArgs>
  }


  type ReferralCodeGetPayload<S extends boolean | null | undefined | ReferralCodeArgs> = $Types.GetResult<ReferralCodePayload, S>

  type ReferralCodeCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ReferralCodeFindManyArgs, 'select' | 'include'> & {
      select?: ReferralCodeCountAggregateInputType | true
    }

  export interface ReferralCodeDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReferralCode'], meta: { name: 'ReferralCode' } }
    /**
     * Find zero or one ReferralCode that matches the filter.
     * @param {ReferralCodeFindUniqueArgs} args - Arguments to find a ReferralCode
     * @example
     * // Get one ReferralCode
     * const referralCode = await prisma.referralCode.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReferralCodeFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ReferralCodeFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ReferralCode'> extends True ? Prisma__ReferralCodeClient<$Types.GetResult<ReferralCodePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ReferralCodeClient<$Types.GetResult<ReferralCodePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one ReferralCode that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ReferralCodeFindUniqueOrThrowArgs} args - Arguments to find a ReferralCode
     * @example
     * // Get one ReferralCode
     * const referralCode = await prisma.referralCode.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReferralCodeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReferralCodeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ReferralCodeClient<$Types.GetResult<ReferralCodePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first ReferralCode that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralCodeFindFirstArgs} args - Arguments to find a ReferralCode
     * @example
     * // Get one ReferralCode
     * const referralCode = await prisma.referralCode.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReferralCodeFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ReferralCodeFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ReferralCode'> extends True ? Prisma__ReferralCodeClient<$Types.GetResult<ReferralCodePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ReferralCodeClient<$Types.GetResult<ReferralCodePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first ReferralCode that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralCodeFindFirstOrThrowArgs} args - Arguments to find a ReferralCode
     * @example
     * // Get one ReferralCode
     * const referralCode = await prisma.referralCode.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReferralCodeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReferralCodeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ReferralCodeClient<$Types.GetResult<ReferralCodePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more ReferralCodes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralCodeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReferralCodes
     * const referralCodes = await prisma.referralCode.findMany()
     * 
     * // Get first 10 ReferralCodes
     * const referralCodes = await prisma.referralCode.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const referralCodeWithIdOnly = await prisma.referralCode.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ReferralCodeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReferralCodeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ReferralCodePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a ReferralCode.
     * @param {ReferralCodeCreateArgs} args - Arguments to create a ReferralCode.
     * @example
     * // Create one ReferralCode
     * const ReferralCode = await prisma.referralCode.create({
     *   data: {
     *     // ... data to create a ReferralCode
     *   }
     * })
     * 
    **/
    create<T extends ReferralCodeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ReferralCodeCreateArgs<ExtArgs>>
    ): Prisma__ReferralCodeClient<$Types.GetResult<ReferralCodePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many ReferralCodes.
     *     @param {ReferralCodeCreateManyArgs} args - Arguments to create many ReferralCodes.
     *     @example
     *     // Create many ReferralCodes
     *     const referralCode = await prisma.referralCode.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReferralCodeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReferralCodeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ReferralCode.
     * @param {ReferralCodeDeleteArgs} args - Arguments to delete one ReferralCode.
     * @example
     * // Delete one ReferralCode
     * const ReferralCode = await prisma.referralCode.delete({
     *   where: {
     *     // ... filter to delete one ReferralCode
     *   }
     * })
     * 
    **/
    delete<T extends ReferralCodeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ReferralCodeDeleteArgs<ExtArgs>>
    ): Prisma__ReferralCodeClient<$Types.GetResult<ReferralCodePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one ReferralCode.
     * @param {ReferralCodeUpdateArgs} args - Arguments to update one ReferralCode.
     * @example
     * // Update one ReferralCode
     * const referralCode = await prisma.referralCode.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReferralCodeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ReferralCodeUpdateArgs<ExtArgs>>
    ): Prisma__ReferralCodeClient<$Types.GetResult<ReferralCodePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more ReferralCodes.
     * @param {ReferralCodeDeleteManyArgs} args - Arguments to filter ReferralCodes to delete.
     * @example
     * // Delete a few ReferralCodes
     * const { count } = await prisma.referralCode.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReferralCodeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReferralCodeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReferralCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralCodeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReferralCodes
     * const referralCode = await prisma.referralCode.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReferralCodeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ReferralCodeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ReferralCode.
     * @param {ReferralCodeUpsertArgs} args - Arguments to update or create a ReferralCode.
     * @example
     * // Update or create a ReferralCode
     * const referralCode = await prisma.referralCode.upsert({
     *   create: {
     *     // ... data to create a ReferralCode
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReferralCode we want to update
     *   }
     * })
    **/
    upsert<T extends ReferralCodeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ReferralCodeUpsertArgs<ExtArgs>>
    ): Prisma__ReferralCodeClient<$Types.GetResult<ReferralCodePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of ReferralCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralCodeCountArgs} args - Arguments to filter ReferralCodes to count.
     * @example
     * // Count the number of ReferralCodes
     * const count = await prisma.referralCode.count({
     *   where: {
     *     // ... the filter for the ReferralCodes we want to count
     *   }
     * })
    **/
    count<T extends ReferralCodeCountArgs>(
      args?: Subset<T, ReferralCodeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReferralCodeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReferralCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralCodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReferralCodeAggregateArgs>(args: Subset<T, ReferralCodeAggregateArgs>): Prisma.PrismaPromise<GetReferralCodeAggregateType<T>>

    /**
     * Group by ReferralCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralCodeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReferralCodeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReferralCodeGroupByArgs['orderBy'] }
        : { orderBy?: ReferralCodeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReferralCodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReferralCodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ReferralCode.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ReferralCodeClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    owner<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    referred<T extends ReferralCode$referredArgs<ExtArgs> = {}>(args?: Subset<T, ReferralCode$referredArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ReferredUserPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ReferralCode base type for findUnique actions
   */
  export type ReferralCodeFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    /**
     * Filter, which ReferralCode to fetch.
     */
    where: ReferralCodeWhereUniqueInput
  }

  /**
   * ReferralCode findUnique
   */
  export interface ReferralCodeFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ReferralCodeFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ReferralCode findUniqueOrThrow
   */
  export type ReferralCodeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    /**
     * Filter, which ReferralCode to fetch.
     */
    where: ReferralCodeWhereUniqueInput
  }


  /**
   * ReferralCode base type for findFirst actions
   */
  export type ReferralCodeFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    /**
     * Filter, which ReferralCode to fetch.
     */
    where?: ReferralCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReferralCodes to fetch.
     */
    orderBy?: Enumerable<ReferralCodeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReferralCodes.
     */
    cursor?: ReferralCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReferralCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReferralCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReferralCodes.
     */
    distinct?: Enumerable<ReferralCodeScalarFieldEnum>
  }

  /**
   * ReferralCode findFirst
   */
  export interface ReferralCodeFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ReferralCodeFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ReferralCode findFirstOrThrow
   */
  export type ReferralCodeFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    /**
     * Filter, which ReferralCode to fetch.
     */
    where?: ReferralCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReferralCodes to fetch.
     */
    orderBy?: Enumerable<ReferralCodeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReferralCodes.
     */
    cursor?: ReferralCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReferralCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReferralCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReferralCodes.
     */
    distinct?: Enumerable<ReferralCodeScalarFieldEnum>
  }


  /**
   * ReferralCode findMany
   */
  export type ReferralCodeFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    /**
     * Filter, which ReferralCodes to fetch.
     */
    where?: ReferralCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReferralCodes to fetch.
     */
    orderBy?: Enumerable<ReferralCodeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReferralCodes.
     */
    cursor?: ReferralCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReferralCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReferralCodes.
     */
    skip?: number
    distinct?: Enumerable<ReferralCodeScalarFieldEnum>
  }


  /**
   * ReferralCode create
   */
  export type ReferralCodeCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    /**
     * The data needed to create a ReferralCode.
     */
    data: XOR<ReferralCodeCreateInput, ReferralCodeUncheckedCreateInput>
  }


  /**
   * ReferralCode createMany
   */
  export type ReferralCodeCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReferralCodes.
     */
    data: Enumerable<ReferralCodeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ReferralCode update
   */
  export type ReferralCodeUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    /**
     * The data needed to update a ReferralCode.
     */
    data: XOR<ReferralCodeUpdateInput, ReferralCodeUncheckedUpdateInput>
    /**
     * Choose, which ReferralCode to update.
     */
    where: ReferralCodeWhereUniqueInput
  }


  /**
   * ReferralCode updateMany
   */
  export type ReferralCodeUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReferralCodes.
     */
    data: XOR<ReferralCodeUpdateManyMutationInput, ReferralCodeUncheckedUpdateManyInput>
    /**
     * Filter which ReferralCodes to update
     */
    where?: ReferralCodeWhereInput
  }


  /**
   * ReferralCode upsert
   */
  export type ReferralCodeUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    /**
     * The filter to search for the ReferralCode to update in case it exists.
     */
    where: ReferralCodeWhereUniqueInput
    /**
     * In case the ReferralCode found by the `where` argument doesn't exist, create a new ReferralCode with this data.
     */
    create: XOR<ReferralCodeCreateInput, ReferralCodeUncheckedCreateInput>
    /**
     * In case the ReferralCode was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReferralCodeUpdateInput, ReferralCodeUncheckedUpdateInput>
  }


  /**
   * ReferralCode delete
   */
  export type ReferralCodeDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    /**
     * Filter which ReferralCode to delete.
     */
    where: ReferralCodeWhereUniqueInput
  }


  /**
   * ReferralCode deleteMany
   */
  export type ReferralCodeDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReferralCodes to delete
     */
    where?: ReferralCodeWhereInput
  }


  /**
   * ReferralCode.referred
   */
  export type ReferralCode$referredArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferredUser
     */
    select?: ReferredUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReferredUserInclude<ExtArgs> | null
    where?: ReferredUserWhereInput
    orderBy?: Enumerable<ReferredUserOrderByWithRelationInput>
    cursor?: ReferredUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ReferredUserScalarFieldEnum>
  }


  /**
   * ReferralCode without action
   */
  export type ReferralCodeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReferralCodeInclude<ExtArgs> | null
  }



  /**
   * Model ReferredUser
   */


  export type AggregateReferredUser = {
    _count: ReferredUserCountAggregateOutputType | null
    _min: ReferredUserMinAggregateOutputType | null
    _max: ReferredUserMaxAggregateOutputType | null
  }

  export type ReferredUserMinAggregateOutputType = {
    id: string | null
    serverId: string | null
    userId: string | null
    referredByCode: string | null
    referralBonusGiven: boolean | null
    createdAt: Date | null
  }

  export type ReferredUserMaxAggregateOutputType = {
    id: string | null
    serverId: string | null
    userId: string | null
    referredByCode: string | null
    referralBonusGiven: boolean | null
    createdAt: Date | null
  }

  export type ReferredUserCountAggregateOutputType = {
    id: number
    serverId: number
    userId: number
    referredByCode: number
    referralBonusGiven: number
    createdAt: number
    _all: number
  }


  export type ReferredUserMinAggregateInputType = {
    id?: true
    serverId?: true
    userId?: true
    referredByCode?: true
    referralBonusGiven?: true
    createdAt?: true
  }

  export type ReferredUserMaxAggregateInputType = {
    id?: true
    serverId?: true
    userId?: true
    referredByCode?: true
    referralBonusGiven?: true
    createdAt?: true
  }

  export type ReferredUserCountAggregateInputType = {
    id?: true
    serverId?: true
    userId?: true
    referredByCode?: true
    referralBonusGiven?: true
    createdAt?: true
    _all?: true
  }

  export type ReferredUserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReferredUser to aggregate.
     */
    where?: ReferredUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReferredUsers to fetch.
     */
    orderBy?: Enumerable<ReferredUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReferredUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReferredUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReferredUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReferredUsers
    **/
    _count?: true | ReferredUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReferredUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReferredUserMaxAggregateInputType
  }

  export type GetReferredUserAggregateType<T extends ReferredUserAggregateArgs> = {
        [P in keyof T & keyof AggregateReferredUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReferredUser[P]>
      : GetScalarType<T[P], AggregateReferredUser[P]>
  }




  export type ReferredUserGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ReferredUserWhereInput
    orderBy?: Enumerable<ReferredUserOrderByWithAggregationInput>
    by: ReferredUserScalarFieldEnum[]
    having?: ReferredUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReferredUserCountAggregateInputType | true
    _min?: ReferredUserMinAggregateInputType
    _max?: ReferredUserMaxAggregateInputType
  }


  export type ReferredUserGroupByOutputType = {
    id: string
    serverId: string
    userId: string
    referredByCode: string
    referralBonusGiven: boolean
    createdAt: Date
    _count: ReferredUserCountAggregateOutputType | null
    _min: ReferredUserMinAggregateOutputType | null
    _max: ReferredUserMaxAggregateOutputType | null
  }

  type GetReferredUserGroupByPayload<T extends ReferredUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ReferredUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReferredUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReferredUserGroupByOutputType[P]>
            : GetScalarType<T[P], ReferredUserGroupByOutputType[P]>
        }
      >
    >


  export type ReferredUserSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serverId?: boolean
    userId?: boolean
    referredByCode?: boolean
    referralBonusGiven?: boolean
    createdAt?: boolean
    referralCode?: boolean | ReferralCodeArgs<ExtArgs>
    user?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["referredUser"]>

  export type ReferredUserSelectScalar = {
    id?: boolean
    serverId?: boolean
    userId?: boolean
    referredByCode?: boolean
    referralBonusGiven?: boolean
    createdAt?: boolean
  }

  export type ReferredUserInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    referralCode?: boolean | ReferralCodeArgs<ExtArgs>
    user?: boolean | UserArgs<ExtArgs>
  }


  type ReferredUserGetPayload<S extends boolean | null | undefined | ReferredUserArgs> = $Types.GetResult<ReferredUserPayload, S>

  type ReferredUserCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ReferredUserFindManyArgs, 'select' | 'include'> & {
      select?: ReferredUserCountAggregateInputType | true
    }

  export interface ReferredUserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReferredUser'], meta: { name: 'ReferredUser' } }
    /**
     * Find zero or one ReferredUser that matches the filter.
     * @param {ReferredUserFindUniqueArgs} args - Arguments to find a ReferredUser
     * @example
     * // Get one ReferredUser
     * const referredUser = await prisma.referredUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReferredUserFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ReferredUserFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ReferredUser'> extends True ? Prisma__ReferredUserClient<$Types.GetResult<ReferredUserPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ReferredUserClient<$Types.GetResult<ReferredUserPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one ReferredUser that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ReferredUserFindUniqueOrThrowArgs} args - Arguments to find a ReferredUser
     * @example
     * // Get one ReferredUser
     * const referredUser = await prisma.referredUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReferredUserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReferredUserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ReferredUserClient<$Types.GetResult<ReferredUserPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first ReferredUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferredUserFindFirstArgs} args - Arguments to find a ReferredUser
     * @example
     * // Get one ReferredUser
     * const referredUser = await prisma.referredUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReferredUserFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ReferredUserFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ReferredUser'> extends True ? Prisma__ReferredUserClient<$Types.GetResult<ReferredUserPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ReferredUserClient<$Types.GetResult<ReferredUserPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first ReferredUser that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferredUserFindFirstOrThrowArgs} args - Arguments to find a ReferredUser
     * @example
     * // Get one ReferredUser
     * const referredUser = await prisma.referredUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReferredUserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReferredUserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ReferredUserClient<$Types.GetResult<ReferredUserPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more ReferredUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferredUserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReferredUsers
     * const referredUsers = await prisma.referredUser.findMany()
     * 
     * // Get first 10 ReferredUsers
     * const referredUsers = await prisma.referredUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const referredUserWithIdOnly = await prisma.referredUser.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ReferredUserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReferredUserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ReferredUserPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a ReferredUser.
     * @param {ReferredUserCreateArgs} args - Arguments to create a ReferredUser.
     * @example
     * // Create one ReferredUser
     * const ReferredUser = await prisma.referredUser.create({
     *   data: {
     *     // ... data to create a ReferredUser
     *   }
     * })
     * 
    **/
    create<T extends ReferredUserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ReferredUserCreateArgs<ExtArgs>>
    ): Prisma__ReferredUserClient<$Types.GetResult<ReferredUserPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many ReferredUsers.
     *     @param {ReferredUserCreateManyArgs} args - Arguments to create many ReferredUsers.
     *     @example
     *     // Create many ReferredUsers
     *     const referredUser = await prisma.referredUser.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReferredUserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReferredUserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ReferredUser.
     * @param {ReferredUserDeleteArgs} args - Arguments to delete one ReferredUser.
     * @example
     * // Delete one ReferredUser
     * const ReferredUser = await prisma.referredUser.delete({
     *   where: {
     *     // ... filter to delete one ReferredUser
     *   }
     * })
     * 
    **/
    delete<T extends ReferredUserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ReferredUserDeleteArgs<ExtArgs>>
    ): Prisma__ReferredUserClient<$Types.GetResult<ReferredUserPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one ReferredUser.
     * @param {ReferredUserUpdateArgs} args - Arguments to update one ReferredUser.
     * @example
     * // Update one ReferredUser
     * const referredUser = await prisma.referredUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReferredUserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ReferredUserUpdateArgs<ExtArgs>>
    ): Prisma__ReferredUserClient<$Types.GetResult<ReferredUserPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more ReferredUsers.
     * @param {ReferredUserDeleteManyArgs} args - Arguments to filter ReferredUsers to delete.
     * @example
     * // Delete a few ReferredUsers
     * const { count } = await prisma.referredUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReferredUserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReferredUserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReferredUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferredUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReferredUsers
     * const referredUser = await prisma.referredUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReferredUserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ReferredUserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ReferredUser.
     * @param {ReferredUserUpsertArgs} args - Arguments to update or create a ReferredUser.
     * @example
     * // Update or create a ReferredUser
     * const referredUser = await prisma.referredUser.upsert({
     *   create: {
     *     // ... data to create a ReferredUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReferredUser we want to update
     *   }
     * })
    **/
    upsert<T extends ReferredUserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ReferredUserUpsertArgs<ExtArgs>>
    ): Prisma__ReferredUserClient<$Types.GetResult<ReferredUserPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of ReferredUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferredUserCountArgs} args - Arguments to filter ReferredUsers to count.
     * @example
     * // Count the number of ReferredUsers
     * const count = await prisma.referredUser.count({
     *   where: {
     *     // ... the filter for the ReferredUsers we want to count
     *   }
     * })
    **/
    count<T extends ReferredUserCountArgs>(
      args?: Subset<T, ReferredUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReferredUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReferredUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferredUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReferredUserAggregateArgs>(args: Subset<T, ReferredUserAggregateArgs>): Prisma.PrismaPromise<GetReferredUserAggregateType<T>>

    /**
     * Group by ReferredUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferredUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReferredUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReferredUserGroupByArgs['orderBy'] }
        : { orderBy?: ReferredUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReferredUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReferredUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ReferredUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ReferredUserClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    referralCode<T extends ReferralCodeArgs<ExtArgs> = {}>(args?: Subset<T, ReferralCodeArgs<ExtArgs>>): Prisma__ReferralCodeClient<$Types.GetResult<ReferralCodePayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ReferredUser base type for findUnique actions
   */
  export type ReferredUserFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferredUser
     */
    select?: ReferredUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReferredUserInclude<ExtArgs> | null
    /**
     * Filter, which ReferredUser to fetch.
     */
    where: ReferredUserWhereUniqueInput
  }

  /**
   * ReferredUser findUnique
   */
  export interface ReferredUserFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ReferredUserFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ReferredUser findUniqueOrThrow
   */
  export type ReferredUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferredUser
     */
    select?: ReferredUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReferredUserInclude<ExtArgs> | null
    /**
     * Filter, which ReferredUser to fetch.
     */
    where: ReferredUserWhereUniqueInput
  }


  /**
   * ReferredUser base type for findFirst actions
   */
  export type ReferredUserFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferredUser
     */
    select?: ReferredUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReferredUserInclude<ExtArgs> | null
    /**
     * Filter, which ReferredUser to fetch.
     */
    where?: ReferredUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReferredUsers to fetch.
     */
    orderBy?: Enumerable<ReferredUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReferredUsers.
     */
    cursor?: ReferredUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReferredUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReferredUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReferredUsers.
     */
    distinct?: Enumerable<ReferredUserScalarFieldEnum>
  }

  /**
   * ReferredUser findFirst
   */
  export interface ReferredUserFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ReferredUserFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ReferredUser findFirstOrThrow
   */
  export type ReferredUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferredUser
     */
    select?: ReferredUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReferredUserInclude<ExtArgs> | null
    /**
     * Filter, which ReferredUser to fetch.
     */
    where?: ReferredUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReferredUsers to fetch.
     */
    orderBy?: Enumerable<ReferredUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReferredUsers.
     */
    cursor?: ReferredUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReferredUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReferredUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReferredUsers.
     */
    distinct?: Enumerable<ReferredUserScalarFieldEnum>
  }


  /**
   * ReferredUser findMany
   */
  export type ReferredUserFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferredUser
     */
    select?: ReferredUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReferredUserInclude<ExtArgs> | null
    /**
     * Filter, which ReferredUsers to fetch.
     */
    where?: ReferredUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReferredUsers to fetch.
     */
    orderBy?: Enumerable<ReferredUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReferredUsers.
     */
    cursor?: ReferredUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReferredUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReferredUsers.
     */
    skip?: number
    distinct?: Enumerable<ReferredUserScalarFieldEnum>
  }


  /**
   * ReferredUser create
   */
  export type ReferredUserCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferredUser
     */
    select?: ReferredUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReferredUserInclude<ExtArgs> | null
    /**
     * The data needed to create a ReferredUser.
     */
    data: XOR<ReferredUserCreateInput, ReferredUserUncheckedCreateInput>
  }


  /**
   * ReferredUser createMany
   */
  export type ReferredUserCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReferredUsers.
     */
    data: Enumerable<ReferredUserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ReferredUser update
   */
  export type ReferredUserUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferredUser
     */
    select?: ReferredUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReferredUserInclude<ExtArgs> | null
    /**
     * The data needed to update a ReferredUser.
     */
    data: XOR<ReferredUserUpdateInput, ReferredUserUncheckedUpdateInput>
    /**
     * Choose, which ReferredUser to update.
     */
    where: ReferredUserWhereUniqueInput
  }


  /**
   * ReferredUser updateMany
   */
  export type ReferredUserUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReferredUsers.
     */
    data: XOR<ReferredUserUpdateManyMutationInput, ReferredUserUncheckedUpdateManyInput>
    /**
     * Filter which ReferredUsers to update
     */
    where?: ReferredUserWhereInput
  }


  /**
   * ReferredUser upsert
   */
  export type ReferredUserUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferredUser
     */
    select?: ReferredUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReferredUserInclude<ExtArgs> | null
    /**
     * The filter to search for the ReferredUser to update in case it exists.
     */
    where: ReferredUserWhereUniqueInput
    /**
     * In case the ReferredUser found by the `where` argument doesn't exist, create a new ReferredUser with this data.
     */
    create: XOR<ReferredUserCreateInput, ReferredUserUncheckedCreateInput>
    /**
     * In case the ReferredUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReferredUserUpdateInput, ReferredUserUncheckedUpdateInput>
  }


  /**
   * ReferredUser delete
   */
  export type ReferredUserDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferredUser
     */
    select?: ReferredUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReferredUserInclude<ExtArgs> | null
    /**
     * Filter which ReferredUser to delete.
     */
    where: ReferredUserWhereUniqueInput
  }


  /**
   * ReferredUser deleteMany
   */
  export type ReferredUserDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReferredUsers to delete
     */
    where?: ReferredUserWhereInput
  }


  /**
   * ReferredUser without action
   */
  export type ReferredUserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferredUser
     */
    select?: ReferredUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReferredUserInclude<ExtArgs> | null
  }



  /**
   * Model Network
   */


  export type AggregateNetwork = {
    _count: NetworkCountAggregateOutputType | null
    _avg: NetworkAvgAggregateOutputType | null
    _sum: NetworkSumAggregateOutputType | null
    _min: NetworkMinAggregateOutputType | null
    _max: NetworkMaxAggregateOutputType | null
  }

  export type NetworkAvgAggregateOutputType = {
    bankBalance: number | null
    level: number | null
  }

  export type NetworkSumAggregateOutputType = {
    bankBalance: number | null
    level: number | null
  }

  export type NetworkMinAggregateOutputType = {
    id: string | null
    serverId: string | null
    name: string | null
    leaderId: string | null
    bankBalance: number | null
    level: number | null
    roleId: string | null
    logChannelId: string | null
    status: string | null
    disbandRequestAt: Date | null
  }

  export type NetworkMaxAggregateOutputType = {
    id: string | null
    serverId: string | null
    name: string | null
    leaderId: string | null
    bankBalance: number | null
    level: number | null
    roleId: string | null
    logChannelId: string | null
    status: string | null
    disbandRequestAt: Date | null
  }

  export type NetworkCountAggregateOutputType = {
    id: number
    serverId: number
    name: number
    leaderId: number
    bankBalance: number
    level: number
    roleId: number
    logChannelId: number
    status: number
    disbandRequestAt: number
    _all: number
  }


  export type NetworkAvgAggregateInputType = {
    bankBalance?: true
    level?: true
  }

  export type NetworkSumAggregateInputType = {
    bankBalance?: true
    level?: true
  }

  export type NetworkMinAggregateInputType = {
    id?: true
    serverId?: true
    name?: true
    leaderId?: true
    bankBalance?: true
    level?: true
    roleId?: true
    logChannelId?: true
    status?: true
    disbandRequestAt?: true
  }

  export type NetworkMaxAggregateInputType = {
    id?: true
    serverId?: true
    name?: true
    leaderId?: true
    bankBalance?: true
    level?: true
    roleId?: true
    logChannelId?: true
    status?: true
    disbandRequestAt?: true
  }

  export type NetworkCountAggregateInputType = {
    id?: true
    serverId?: true
    name?: true
    leaderId?: true
    bankBalance?: true
    level?: true
    roleId?: true
    logChannelId?: true
    status?: true
    disbandRequestAt?: true
    _all?: true
  }

  export type NetworkAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Network to aggregate.
     */
    where?: NetworkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Networks to fetch.
     */
    orderBy?: Enumerable<NetworkOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NetworkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Networks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Networks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Networks
    **/
    _count?: true | NetworkCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NetworkAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NetworkSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NetworkMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NetworkMaxAggregateInputType
  }

  export type GetNetworkAggregateType<T extends NetworkAggregateArgs> = {
        [P in keyof T & keyof AggregateNetwork]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNetwork[P]>
      : GetScalarType<T[P], AggregateNetwork[P]>
  }




  export type NetworkGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: NetworkWhereInput
    orderBy?: Enumerable<NetworkOrderByWithAggregationInput>
    by: NetworkScalarFieldEnum[]
    having?: NetworkScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NetworkCountAggregateInputType | true
    _avg?: NetworkAvgAggregateInputType
    _sum?: NetworkSumAggregateInputType
    _min?: NetworkMinAggregateInputType
    _max?: NetworkMaxAggregateInputType
  }


  export type NetworkGroupByOutputType = {
    id: string
    serverId: string
    name: string
    leaderId: string
    bankBalance: number
    level: number
    roleId: string | null
    logChannelId: string | null
    status: string
    disbandRequestAt: Date | null
    _count: NetworkCountAggregateOutputType | null
    _avg: NetworkAvgAggregateOutputType | null
    _sum: NetworkSumAggregateOutputType | null
    _min: NetworkMinAggregateOutputType | null
    _max: NetworkMaxAggregateOutputType | null
  }

  type GetNetworkGroupByPayload<T extends NetworkGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<NetworkGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NetworkGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NetworkGroupByOutputType[P]>
            : GetScalarType<T[P], NetworkGroupByOutputType[P]>
        }
      >
    >


  export type NetworkSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serverId?: boolean
    name?: boolean
    leaderId?: boolean
    bankBalance?: boolean
    level?: boolean
    roleId?: boolean
    logChannelId?: boolean
    status?: boolean
    disbandRequestAt?: boolean
    server?: boolean | ApiServerArgs<ExtArgs>
    members?: boolean | Network$membersArgs<ExtArgs>
    _count?: boolean | NetworkCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["network"]>

  export type NetworkSelectScalar = {
    id?: boolean
    serverId?: boolean
    name?: boolean
    leaderId?: boolean
    bankBalance?: boolean
    level?: boolean
    roleId?: boolean
    logChannelId?: boolean
    status?: boolean
    disbandRequestAt?: boolean
  }

  export type NetworkInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    server?: boolean | ApiServerArgs<ExtArgs>
    members?: boolean | Network$membersArgs<ExtArgs>
    _count?: boolean | NetworkCountOutputTypeArgs<ExtArgs>
  }


  type NetworkGetPayload<S extends boolean | null | undefined | NetworkArgs> = $Types.GetResult<NetworkPayload, S>

  type NetworkCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<NetworkFindManyArgs, 'select' | 'include'> & {
      select?: NetworkCountAggregateInputType | true
    }

  export interface NetworkDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Network'], meta: { name: 'Network' } }
    /**
     * Find zero or one Network that matches the filter.
     * @param {NetworkFindUniqueArgs} args - Arguments to find a Network
     * @example
     * // Get one Network
     * const network = await prisma.network.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NetworkFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, NetworkFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Network'> extends True ? Prisma__NetworkClient<$Types.GetResult<NetworkPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__NetworkClient<$Types.GetResult<NetworkPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Network that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NetworkFindUniqueOrThrowArgs} args - Arguments to find a Network
     * @example
     * // Get one Network
     * const network = await prisma.network.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NetworkFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NetworkFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NetworkClient<$Types.GetResult<NetworkPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Network that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NetworkFindFirstArgs} args - Arguments to find a Network
     * @example
     * // Get one Network
     * const network = await prisma.network.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NetworkFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, NetworkFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Network'> extends True ? Prisma__NetworkClient<$Types.GetResult<NetworkPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__NetworkClient<$Types.GetResult<NetworkPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Network that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NetworkFindFirstOrThrowArgs} args - Arguments to find a Network
     * @example
     * // Get one Network
     * const network = await prisma.network.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NetworkFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NetworkFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NetworkClient<$Types.GetResult<NetworkPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Networks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NetworkFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Networks
     * const networks = await prisma.network.findMany()
     * 
     * // Get first 10 Networks
     * const networks = await prisma.network.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const networkWithIdOnly = await prisma.network.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NetworkFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NetworkFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<NetworkPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Network.
     * @param {NetworkCreateArgs} args - Arguments to create a Network.
     * @example
     * // Create one Network
     * const Network = await prisma.network.create({
     *   data: {
     *     // ... data to create a Network
     *   }
     * })
     * 
    **/
    create<T extends NetworkCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NetworkCreateArgs<ExtArgs>>
    ): Prisma__NetworkClient<$Types.GetResult<NetworkPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Networks.
     *     @param {NetworkCreateManyArgs} args - Arguments to create many Networks.
     *     @example
     *     // Create many Networks
     *     const network = await prisma.network.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NetworkCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NetworkCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Network.
     * @param {NetworkDeleteArgs} args - Arguments to delete one Network.
     * @example
     * // Delete one Network
     * const Network = await prisma.network.delete({
     *   where: {
     *     // ... filter to delete one Network
     *   }
     * })
     * 
    **/
    delete<T extends NetworkDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NetworkDeleteArgs<ExtArgs>>
    ): Prisma__NetworkClient<$Types.GetResult<NetworkPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Network.
     * @param {NetworkUpdateArgs} args - Arguments to update one Network.
     * @example
     * // Update one Network
     * const network = await prisma.network.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NetworkUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NetworkUpdateArgs<ExtArgs>>
    ): Prisma__NetworkClient<$Types.GetResult<NetworkPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Networks.
     * @param {NetworkDeleteManyArgs} args - Arguments to filter Networks to delete.
     * @example
     * // Delete a few Networks
     * const { count } = await prisma.network.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NetworkDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NetworkDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Networks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NetworkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Networks
     * const network = await prisma.network.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NetworkUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NetworkUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Network.
     * @param {NetworkUpsertArgs} args - Arguments to update or create a Network.
     * @example
     * // Update or create a Network
     * const network = await prisma.network.upsert({
     *   create: {
     *     // ... data to create a Network
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Network we want to update
     *   }
     * })
    **/
    upsert<T extends NetworkUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NetworkUpsertArgs<ExtArgs>>
    ): Prisma__NetworkClient<$Types.GetResult<NetworkPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Networks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NetworkCountArgs} args - Arguments to filter Networks to count.
     * @example
     * // Count the number of Networks
     * const count = await prisma.network.count({
     *   where: {
     *     // ... the filter for the Networks we want to count
     *   }
     * })
    **/
    count<T extends NetworkCountArgs>(
      args?: Subset<T, NetworkCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NetworkCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Network.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NetworkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NetworkAggregateArgs>(args: Subset<T, NetworkAggregateArgs>): Prisma.PrismaPromise<GetNetworkAggregateType<T>>

    /**
     * Group by Network.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NetworkGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NetworkGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NetworkGroupByArgs['orderBy'] }
        : { orderBy?: NetworkGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NetworkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNetworkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Network.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__NetworkClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    server<T extends ApiServerArgs<ExtArgs> = {}>(args?: Subset<T, ApiServerArgs<ExtArgs>>): Prisma__ApiServerClient<$Types.GetResult<ApiServerPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    members<T extends Network$membersArgs<ExtArgs> = {}>(args?: Subset<T, Network$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<NetworkMemberPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Network base type for findUnique actions
   */
  export type NetworkFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Network
     */
    select?: NetworkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NetworkInclude<ExtArgs> | null
    /**
     * Filter, which Network to fetch.
     */
    where: NetworkWhereUniqueInput
  }

  /**
   * Network findUnique
   */
  export interface NetworkFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends NetworkFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Network findUniqueOrThrow
   */
  export type NetworkFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Network
     */
    select?: NetworkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NetworkInclude<ExtArgs> | null
    /**
     * Filter, which Network to fetch.
     */
    where: NetworkWhereUniqueInput
  }


  /**
   * Network base type for findFirst actions
   */
  export type NetworkFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Network
     */
    select?: NetworkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NetworkInclude<ExtArgs> | null
    /**
     * Filter, which Network to fetch.
     */
    where?: NetworkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Networks to fetch.
     */
    orderBy?: Enumerable<NetworkOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Networks.
     */
    cursor?: NetworkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Networks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Networks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Networks.
     */
    distinct?: Enumerable<NetworkScalarFieldEnum>
  }

  /**
   * Network findFirst
   */
  export interface NetworkFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends NetworkFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Network findFirstOrThrow
   */
  export type NetworkFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Network
     */
    select?: NetworkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NetworkInclude<ExtArgs> | null
    /**
     * Filter, which Network to fetch.
     */
    where?: NetworkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Networks to fetch.
     */
    orderBy?: Enumerable<NetworkOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Networks.
     */
    cursor?: NetworkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Networks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Networks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Networks.
     */
    distinct?: Enumerable<NetworkScalarFieldEnum>
  }


  /**
   * Network findMany
   */
  export type NetworkFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Network
     */
    select?: NetworkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NetworkInclude<ExtArgs> | null
    /**
     * Filter, which Networks to fetch.
     */
    where?: NetworkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Networks to fetch.
     */
    orderBy?: Enumerable<NetworkOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Networks.
     */
    cursor?: NetworkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Networks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Networks.
     */
    skip?: number
    distinct?: Enumerable<NetworkScalarFieldEnum>
  }


  /**
   * Network create
   */
  export type NetworkCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Network
     */
    select?: NetworkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NetworkInclude<ExtArgs> | null
    /**
     * The data needed to create a Network.
     */
    data: XOR<NetworkCreateInput, NetworkUncheckedCreateInput>
  }


  /**
   * Network createMany
   */
  export type NetworkCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Networks.
     */
    data: Enumerable<NetworkCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Network update
   */
  export type NetworkUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Network
     */
    select?: NetworkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NetworkInclude<ExtArgs> | null
    /**
     * The data needed to update a Network.
     */
    data: XOR<NetworkUpdateInput, NetworkUncheckedUpdateInput>
    /**
     * Choose, which Network to update.
     */
    where: NetworkWhereUniqueInput
  }


  /**
   * Network updateMany
   */
  export type NetworkUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Networks.
     */
    data: XOR<NetworkUpdateManyMutationInput, NetworkUncheckedUpdateManyInput>
    /**
     * Filter which Networks to update
     */
    where?: NetworkWhereInput
  }


  /**
   * Network upsert
   */
  export type NetworkUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Network
     */
    select?: NetworkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NetworkInclude<ExtArgs> | null
    /**
     * The filter to search for the Network to update in case it exists.
     */
    where: NetworkWhereUniqueInput
    /**
     * In case the Network found by the `where` argument doesn't exist, create a new Network with this data.
     */
    create: XOR<NetworkCreateInput, NetworkUncheckedCreateInput>
    /**
     * In case the Network was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NetworkUpdateInput, NetworkUncheckedUpdateInput>
  }


  /**
   * Network delete
   */
  export type NetworkDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Network
     */
    select?: NetworkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NetworkInclude<ExtArgs> | null
    /**
     * Filter which Network to delete.
     */
    where: NetworkWhereUniqueInput
  }


  /**
   * Network deleteMany
   */
  export type NetworkDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Networks to delete
     */
    where?: NetworkWhereInput
  }


  /**
   * Network.members
   */
  export type Network$membersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NetworkMember
     */
    select?: NetworkMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NetworkMemberInclude<ExtArgs> | null
    where?: NetworkMemberWhereInput
    orderBy?: Enumerable<NetworkMemberOrderByWithRelationInput>
    cursor?: NetworkMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<NetworkMemberScalarFieldEnum>
  }


  /**
   * Network without action
   */
  export type NetworkArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Network
     */
    select?: NetworkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NetworkInclude<ExtArgs> | null
  }



  /**
   * Model NetworkMember
   */


  export type AggregateNetworkMember = {
    _count: NetworkMemberCountAggregateOutputType | null
    _min: NetworkMemberMinAggregateOutputType | null
    _max: NetworkMemberMaxAggregateOutputType | null
  }

  export type NetworkMemberMinAggregateOutputType = {
    networkId: string | null
    userId: string | null
    joinDate: Date | null
  }

  export type NetworkMemberMaxAggregateOutputType = {
    networkId: string | null
    userId: string | null
    joinDate: Date | null
  }

  export type NetworkMemberCountAggregateOutputType = {
    networkId: number
    userId: number
    joinDate: number
    _all: number
  }


  export type NetworkMemberMinAggregateInputType = {
    networkId?: true
    userId?: true
    joinDate?: true
  }

  export type NetworkMemberMaxAggregateInputType = {
    networkId?: true
    userId?: true
    joinDate?: true
  }

  export type NetworkMemberCountAggregateInputType = {
    networkId?: true
    userId?: true
    joinDate?: true
    _all?: true
  }

  export type NetworkMemberAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which NetworkMember to aggregate.
     */
    where?: NetworkMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NetworkMembers to fetch.
     */
    orderBy?: Enumerable<NetworkMemberOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NetworkMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NetworkMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NetworkMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NetworkMembers
    **/
    _count?: true | NetworkMemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NetworkMemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NetworkMemberMaxAggregateInputType
  }

  export type GetNetworkMemberAggregateType<T extends NetworkMemberAggregateArgs> = {
        [P in keyof T & keyof AggregateNetworkMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNetworkMember[P]>
      : GetScalarType<T[P], AggregateNetworkMember[P]>
  }




  export type NetworkMemberGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: NetworkMemberWhereInput
    orderBy?: Enumerable<NetworkMemberOrderByWithAggregationInput>
    by: NetworkMemberScalarFieldEnum[]
    having?: NetworkMemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NetworkMemberCountAggregateInputType | true
    _min?: NetworkMemberMinAggregateInputType
    _max?: NetworkMemberMaxAggregateInputType
  }


  export type NetworkMemberGroupByOutputType = {
    networkId: string
    userId: string
    joinDate: Date
    _count: NetworkMemberCountAggregateOutputType | null
    _min: NetworkMemberMinAggregateOutputType | null
    _max: NetworkMemberMaxAggregateOutputType | null
  }

  type GetNetworkMemberGroupByPayload<T extends NetworkMemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<NetworkMemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NetworkMemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NetworkMemberGroupByOutputType[P]>
            : GetScalarType<T[P], NetworkMemberGroupByOutputType[P]>
        }
      >
    >


  export type NetworkMemberSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    networkId?: boolean
    userId?: boolean
    joinDate?: boolean
    network?: boolean | NetworkArgs<ExtArgs>
    user?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["networkMember"]>

  export type NetworkMemberSelectScalar = {
    networkId?: boolean
    userId?: boolean
    joinDate?: boolean
  }

  export type NetworkMemberInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    network?: boolean | NetworkArgs<ExtArgs>
    user?: boolean | UserArgs<ExtArgs>
  }


  type NetworkMemberGetPayload<S extends boolean | null | undefined | NetworkMemberArgs> = $Types.GetResult<NetworkMemberPayload, S>

  type NetworkMemberCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<NetworkMemberFindManyArgs, 'select' | 'include'> & {
      select?: NetworkMemberCountAggregateInputType | true
    }

  export interface NetworkMemberDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NetworkMember'], meta: { name: 'NetworkMember' } }
    /**
     * Find zero or one NetworkMember that matches the filter.
     * @param {NetworkMemberFindUniqueArgs} args - Arguments to find a NetworkMember
     * @example
     * // Get one NetworkMember
     * const networkMember = await prisma.networkMember.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NetworkMemberFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, NetworkMemberFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'NetworkMember'> extends True ? Prisma__NetworkMemberClient<$Types.GetResult<NetworkMemberPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__NetworkMemberClient<$Types.GetResult<NetworkMemberPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one NetworkMember that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NetworkMemberFindUniqueOrThrowArgs} args - Arguments to find a NetworkMember
     * @example
     * // Get one NetworkMember
     * const networkMember = await prisma.networkMember.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NetworkMemberFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NetworkMemberFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NetworkMemberClient<$Types.GetResult<NetworkMemberPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first NetworkMember that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NetworkMemberFindFirstArgs} args - Arguments to find a NetworkMember
     * @example
     * // Get one NetworkMember
     * const networkMember = await prisma.networkMember.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NetworkMemberFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, NetworkMemberFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'NetworkMember'> extends True ? Prisma__NetworkMemberClient<$Types.GetResult<NetworkMemberPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__NetworkMemberClient<$Types.GetResult<NetworkMemberPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first NetworkMember that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NetworkMemberFindFirstOrThrowArgs} args - Arguments to find a NetworkMember
     * @example
     * // Get one NetworkMember
     * const networkMember = await prisma.networkMember.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NetworkMemberFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NetworkMemberFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NetworkMemberClient<$Types.GetResult<NetworkMemberPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more NetworkMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NetworkMemberFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NetworkMembers
     * const networkMembers = await prisma.networkMember.findMany()
     * 
     * // Get first 10 NetworkMembers
     * const networkMembers = await prisma.networkMember.findMany({ take: 10 })
     * 
     * // Only select the `networkId`
     * const networkMemberWithNetworkIdOnly = await prisma.networkMember.findMany({ select: { networkId: true } })
     * 
    **/
    findMany<T extends NetworkMemberFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NetworkMemberFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<NetworkMemberPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a NetworkMember.
     * @param {NetworkMemberCreateArgs} args - Arguments to create a NetworkMember.
     * @example
     * // Create one NetworkMember
     * const NetworkMember = await prisma.networkMember.create({
     *   data: {
     *     // ... data to create a NetworkMember
     *   }
     * })
     * 
    **/
    create<T extends NetworkMemberCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NetworkMemberCreateArgs<ExtArgs>>
    ): Prisma__NetworkMemberClient<$Types.GetResult<NetworkMemberPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many NetworkMembers.
     *     @param {NetworkMemberCreateManyArgs} args - Arguments to create many NetworkMembers.
     *     @example
     *     // Create many NetworkMembers
     *     const networkMember = await prisma.networkMember.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NetworkMemberCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NetworkMemberCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a NetworkMember.
     * @param {NetworkMemberDeleteArgs} args - Arguments to delete one NetworkMember.
     * @example
     * // Delete one NetworkMember
     * const NetworkMember = await prisma.networkMember.delete({
     *   where: {
     *     // ... filter to delete one NetworkMember
     *   }
     * })
     * 
    **/
    delete<T extends NetworkMemberDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NetworkMemberDeleteArgs<ExtArgs>>
    ): Prisma__NetworkMemberClient<$Types.GetResult<NetworkMemberPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one NetworkMember.
     * @param {NetworkMemberUpdateArgs} args - Arguments to update one NetworkMember.
     * @example
     * // Update one NetworkMember
     * const networkMember = await prisma.networkMember.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NetworkMemberUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NetworkMemberUpdateArgs<ExtArgs>>
    ): Prisma__NetworkMemberClient<$Types.GetResult<NetworkMemberPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more NetworkMembers.
     * @param {NetworkMemberDeleteManyArgs} args - Arguments to filter NetworkMembers to delete.
     * @example
     * // Delete a few NetworkMembers
     * const { count } = await prisma.networkMember.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NetworkMemberDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NetworkMemberDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NetworkMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NetworkMemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NetworkMembers
     * const networkMember = await prisma.networkMember.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NetworkMemberUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NetworkMemberUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one NetworkMember.
     * @param {NetworkMemberUpsertArgs} args - Arguments to update or create a NetworkMember.
     * @example
     * // Update or create a NetworkMember
     * const networkMember = await prisma.networkMember.upsert({
     *   create: {
     *     // ... data to create a NetworkMember
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NetworkMember we want to update
     *   }
     * })
    **/
    upsert<T extends NetworkMemberUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NetworkMemberUpsertArgs<ExtArgs>>
    ): Prisma__NetworkMemberClient<$Types.GetResult<NetworkMemberPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of NetworkMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NetworkMemberCountArgs} args - Arguments to filter NetworkMembers to count.
     * @example
     * // Count the number of NetworkMembers
     * const count = await prisma.networkMember.count({
     *   where: {
     *     // ... the filter for the NetworkMembers we want to count
     *   }
     * })
    **/
    count<T extends NetworkMemberCountArgs>(
      args?: Subset<T, NetworkMemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NetworkMemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NetworkMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NetworkMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NetworkMemberAggregateArgs>(args: Subset<T, NetworkMemberAggregateArgs>): Prisma.PrismaPromise<GetNetworkMemberAggregateType<T>>

    /**
     * Group by NetworkMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NetworkMemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NetworkMemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NetworkMemberGroupByArgs['orderBy'] }
        : { orderBy?: NetworkMemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NetworkMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNetworkMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for NetworkMember.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__NetworkMemberClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    network<T extends NetworkArgs<ExtArgs> = {}>(args?: Subset<T, NetworkArgs<ExtArgs>>): Prisma__NetworkClient<$Types.GetResult<NetworkPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * NetworkMember base type for findUnique actions
   */
  export type NetworkMemberFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NetworkMember
     */
    select?: NetworkMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NetworkMemberInclude<ExtArgs> | null
    /**
     * Filter, which NetworkMember to fetch.
     */
    where: NetworkMemberWhereUniqueInput
  }

  /**
   * NetworkMember findUnique
   */
  export interface NetworkMemberFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends NetworkMemberFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * NetworkMember findUniqueOrThrow
   */
  export type NetworkMemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NetworkMember
     */
    select?: NetworkMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NetworkMemberInclude<ExtArgs> | null
    /**
     * Filter, which NetworkMember to fetch.
     */
    where: NetworkMemberWhereUniqueInput
  }


  /**
   * NetworkMember base type for findFirst actions
   */
  export type NetworkMemberFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NetworkMember
     */
    select?: NetworkMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NetworkMemberInclude<ExtArgs> | null
    /**
     * Filter, which NetworkMember to fetch.
     */
    where?: NetworkMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NetworkMembers to fetch.
     */
    orderBy?: Enumerable<NetworkMemberOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NetworkMembers.
     */
    cursor?: NetworkMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NetworkMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NetworkMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NetworkMembers.
     */
    distinct?: Enumerable<NetworkMemberScalarFieldEnum>
  }

  /**
   * NetworkMember findFirst
   */
  export interface NetworkMemberFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends NetworkMemberFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * NetworkMember findFirstOrThrow
   */
  export type NetworkMemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NetworkMember
     */
    select?: NetworkMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NetworkMemberInclude<ExtArgs> | null
    /**
     * Filter, which NetworkMember to fetch.
     */
    where?: NetworkMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NetworkMembers to fetch.
     */
    orderBy?: Enumerable<NetworkMemberOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NetworkMembers.
     */
    cursor?: NetworkMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NetworkMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NetworkMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NetworkMembers.
     */
    distinct?: Enumerable<NetworkMemberScalarFieldEnum>
  }


  /**
   * NetworkMember findMany
   */
  export type NetworkMemberFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NetworkMember
     */
    select?: NetworkMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NetworkMemberInclude<ExtArgs> | null
    /**
     * Filter, which NetworkMembers to fetch.
     */
    where?: NetworkMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NetworkMembers to fetch.
     */
    orderBy?: Enumerable<NetworkMemberOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NetworkMembers.
     */
    cursor?: NetworkMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NetworkMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NetworkMembers.
     */
    skip?: number
    distinct?: Enumerable<NetworkMemberScalarFieldEnum>
  }


  /**
   * NetworkMember create
   */
  export type NetworkMemberCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NetworkMember
     */
    select?: NetworkMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NetworkMemberInclude<ExtArgs> | null
    /**
     * The data needed to create a NetworkMember.
     */
    data: XOR<NetworkMemberCreateInput, NetworkMemberUncheckedCreateInput>
  }


  /**
   * NetworkMember createMany
   */
  export type NetworkMemberCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NetworkMembers.
     */
    data: Enumerable<NetworkMemberCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * NetworkMember update
   */
  export type NetworkMemberUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NetworkMember
     */
    select?: NetworkMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NetworkMemberInclude<ExtArgs> | null
    /**
     * The data needed to update a NetworkMember.
     */
    data: XOR<NetworkMemberUpdateInput, NetworkMemberUncheckedUpdateInput>
    /**
     * Choose, which NetworkMember to update.
     */
    where: NetworkMemberWhereUniqueInput
  }


  /**
   * NetworkMember updateMany
   */
  export type NetworkMemberUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NetworkMembers.
     */
    data: XOR<NetworkMemberUpdateManyMutationInput, NetworkMemberUncheckedUpdateManyInput>
    /**
     * Filter which NetworkMembers to update
     */
    where?: NetworkMemberWhereInput
  }


  /**
   * NetworkMember upsert
   */
  export type NetworkMemberUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NetworkMember
     */
    select?: NetworkMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NetworkMemberInclude<ExtArgs> | null
    /**
     * The filter to search for the NetworkMember to update in case it exists.
     */
    where: NetworkMemberWhereUniqueInput
    /**
     * In case the NetworkMember found by the `where` argument doesn't exist, create a new NetworkMember with this data.
     */
    create: XOR<NetworkMemberCreateInput, NetworkMemberUncheckedCreateInput>
    /**
     * In case the NetworkMember was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NetworkMemberUpdateInput, NetworkMemberUncheckedUpdateInput>
  }


  /**
   * NetworkMember delete
   */
  export type NetworkMemberDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NetworkMember
     */
    select?: NetworkMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NetworkMemberInclude<ExtArgs> | null
    /**
     * Filter which NetworkMember to delete.
     */
    where: NetworkMemberWhereUniqueInput
  }


  /**
   * NetworkMember deleteMany
   */
  export type NetworkMemberDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which NetworkMembers to delete
     */
    where?: NetworkMemberWhereInput
  }


  /**
   * NetworkMember without action
   */
  export type NetworkMemberArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NetworkMember
     */
    select?: NetworkMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NetworkMemberInclude<ExtArgs> | null
  }



  /**
   * Model DailyStats
   */


  export type AggregateDailyStats = {
    _count: DailyStatsCountAggregateOutputType | null
    _avg: DailyStatsAvgAggregateOutputType | null
    _sum: DailyStatsSumAggregateOutputType | null
    _min: DailyStatsMinAggregateOutputType | null
    _max: DailyStatsMaxAggregateOutputType | null
  }

  export type DailyStatsAvgAggregateOutputType = {
    totalCredits: number | null
    totalUsers: number | null
    totalReferrals: number | null
    netBalance: number | null
    newUsers: number | null
    newReferrals: number | null
  }

  export type DailyStatsSumAggregateOutputType = {
    totalCredits: number | null
    totalUsers: number | null
    totalReferrals: number | null
    netBalance: number | null
    newUsers: number | null
    newReferrals: number | null
  }

  export type DailyStatsMinAggregateOutputType = {
    id: string | null
    serverId: string | null
    date: Date | null
    totalCredits: number | null
    totalUsers: number | null
    totalReferrals: number | null
    netBalance: number | null
    newUsers: number | null
    newReferrals: number | null
  }

  export type DailyStatsMaxAggregateOutputType = {
    id: string | null
    serverId: string | null
    date: Date | null
    totalCredits: number | null
    totalUsers: number | null
    totalReferrals: number | null
    netBalance: number | null
    newUsers: number | null
    newReferrals: number | null
  }

  export type DailyStatsCountAggregateOutputType = {
    id: number
    serverId: number
    date: number
    totalCredits: number
    totalUsers: number
    totalReferrals: number
    netBalance: number
    newUsers: number
    newReferrals: number
    _all: number
  }


  export type DailyStatsAvgAggregateInputType = {
    totalCredits?: true
    totalUsers?: true
    totalReferrals?: true
    netBalance?: true
    newUsers?: true
    newReferrals?: true
  }

  export type DailyStatsSumAggregateInputType = {
    totalCredits?: true
    totalUsers?: true
    totalReferrals?: true
    netBalance?: true
    newUsers?: true
    newReferrals?: true
  }

  export type DailyStatsMinAggregateInputType = {
    id?: true
    serverId?: true
    date?: true
    totalCredits?: true
    totalUsers?: true
    totalReferrals?: true
    netBalance?: true
    newUsers?: true
    newReferrals?: true
  }

  export type DailyStatsMaxAggregateInputType = {
    id?: true
    serverId?: true
    date?: true
    totalCredits?: true
    totalUsers?: true
    totalReferrals?: true
    netBalance?: true
    newUsers?: true
    newReferrals?: true
  }

  export type DailyStatsCountAggregateInputType = {
    id?: true
    serverId?: true
    date?: true
    totalCredits?: true
    totalUsers?: true
    totalReferrals?: true
    netBalance?: true
    newUsers?: true
    newReferrals?: true
    _all?: true
  }

  export type DailyStatsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which DailyStats to aggregate.
     */
    where?: DailyStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyStats to fetch.
     */
    orderBy?: Enumerable<DailyStatsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DailyStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DailyStats
    **/
    _count?: true | DailyStatsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DailyStatsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DailyStatsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DailyStatsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DailyStatsMaxAggregateInputType
  }

  export type GetDailyStatsAggregateType<T extends DailyStatsAggregateArgs> = {
        [P in keyof T & keyof AggregateDailyStats]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDailyStats[P]>
      : GetScalarType<T[P], AggregateDailyStats[P]>
  }




  export type DailyStatsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: DailyStatsWhereInput
    orderBy?: Enumerable<DailyStatsOrderByWithAggregationInput>
    by: DailyStatsScalarFieldEnum[]
    having?: DailyStatsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DailyStatsCountAggregateInputType | true
    _avg?: DailyStatsAvgAggregateInputType
    _sum?: DailyStatsSumAggregateInputType
    _min?: DailyStatsMinAggregateInputType
    _max?: DailyStatsMaxAggregateInputType
  }


  export type DailyStatsGroupByOutputType = {
    id: string
    serverId: string
    date: Date
    totalCredits: number
    totalUsers: number
    totalReferrals: number
    netBalance: number
    newUsers: number
    newReferrals: number
    _count: DailyStatsCountAggregateOutputType | null
    _avg: DailyStatsAvgAggregateOutputType | null
    _sum: DailyStatsSumAggregateOutputType | null
    _min: DailyStatsMinAggregateOutputType | null
    _max: DailyStatsMaxAggregateOutputType | null
  }

  type GetDailyStatsGroupByPayload<T extends DailyStatsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DailyStatsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DailyStatsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DailyStatsGroupByOutputType[P]>
            : GetScalarType<T[P], DailyStatsGroupByOutputType[P]>
        }
      >
    >


  export type DailyStatsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serverId?: boolean
    date?: boolean
    totalCredits?: boolean
    totalUsers?: boolean
    totalReferrals?: boolean
    netBalance?: boolean
    newUsers?: boolean
    newReferrals?: boolean
  }, ExtArgs["result"]["dailyStats"]>

  export type DailyStatsSelectScalar = {
    id?: boolean
    serverId?: boolean
    date?: boolean
    totalCredits?: boolean
    totalUsers?: boolean
    totalReferrals?: boolean
    netBalance?: boolean
    newUsers?: boolean
    newReferrals?: boolean
  }


  type DailyStatsGetPayload<S extends boolean | null | undefined | DailyStatsArgs> = $Types.GetResult<DailyStatsPayload, S>

  type DailyStatsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<DailyStatsFindManyArgs, 'select' | 'include'> & {
      select?: DailyStatsCountAggregateInputType | true
    }

  export interface DailyStatsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DailyStats'], meta: { name: 'DailyStats' } }
    /**
     * Find zero or one DailyStats that matches the filter.
     * @param {DailyStatsFindUniqueArgs} args - Arguments to find a DailyStats
     * @example
     * // Get one DailyStats
     * const dailyStats = await prisma.dailyStats.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DailyStatsFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DailyStatsFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'DailyStats'> extends True ? Prisma__DailyStatsClient<$Types.GetResult<DailyStatsPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__DailyStatsClient<$Types.GetResult<DailyStatsPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one DailyStats that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DailyStatsFindUniqueOrThrowArgs} args - Arguments to find a DailyStats
     * @example
     * // Get one DailyStats
     * const dailyStats = await prisma.dailyStats.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DailyStatsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DailyStatsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DailyStatsClient<$Types.GetResult<DailyStatsPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first DailyStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyStatsFindFirstArgs} args - Arguments to find a DailyStats
     * @example
     * // Get one DailyStats
     * const dailyStats = await prisma.dailyStats.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DailyStatsFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DailyStatsFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'DailyStats'> extends True ? Prisma__DailyStatsClient<$Types.GetResult<DailyStatsPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__DailyStatsClient<$Types.GetResult<DailyStatsPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first DailyStats that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyStatsFindFirstOrThrowArgs} args - Arguments to find a DailyStats
     * @example
     * // Get one DailyStats
     * const dailyStats = await prisma.dailyStats.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DailyStatsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DailyStatsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DailyStatsClient<$Types.GetResult<DailyStatsPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more DailyStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyStatsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DailyStats
     * const dailyStats = await prisma.dailyStats.findMany()
     * 
     * // Get first 10 DailyStats
     * const dailyStats = await prisma.dailyStats.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dailyStatsWithIdOnly = await prisma.dailyStats.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DailyStatsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DailyStatsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<DailyStatsPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a DailyStats.
     * @param {DailyStatsCreateArgs} args - Arguments to create a DailyStats.
     * @example
     * // Create one DailyStats
     * const DailyStats = await prisma.dailyStats.create({
     *   data: {
     *     // ... data to create a DailyStats
     *   }
     * })
     * 
    **/
    create<T extends DailyStatsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DailyStatsCreateArgs<ExtArgs>>
    ): Prisma__DailyStatsClient<$Types.GetResult<DailyStatsPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many DailyStats.
     *     @param {DailyStatsCreateManyArgs} args - Arguments to create many DailyStats.
     *     @example
     *     // Create many DailyStats
     *     const dailyStats = await prisma.dailyStats.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DailyStatsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DailyStatsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DailyStats.
     * @param {DailyStatsDeleteArgs} args - Arguments to delete one DailyStats.
     * @example
     * // Delete one DailyStats
     * const DailyStats = await prisma.dailyStats.delete({
     *   where: {
     *     // ... filter to delete one DailyStats
     *   }
     * })
     * 
    **/
    delete<T extends DailyStatsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DailyStatsDeleteArgs<ExtArgs>>
    ): Prisma__DailyStatsClient<$Types.GetResult<DailyStatsPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one DailyStats.
     * @param {DailyStatsUpdateArgs} args - Arguments to update one DailyStats.
     * @example
     * // Update one DailyStats
     * const dailyStats = await prisma.dailyStats.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DailyStatsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DailyStatsUpdateArgs<ExtArgs>>
    ): Prisma__DailyStatsClient<$Types.GetResult<DailyStatsPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more DailyStats.
     * @param {DailyStatsDeleteManyArgs} args - Arguments to filter DailyStats to delete.
     * @example
     * // Delete a few DailyStats
     * const { count } = await prisma.dailyStats.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DailyStatsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DailyStatsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DailyStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyStatsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DailyStats
     * const dailyStats = await prisma.dailyStats.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DailyStatsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DailyStatsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DailyStats.
     * @param {DailyStatsUpsertArgs} args - Arguments to update or create a DailyStats.
     * @example
     * // Update or create a DailyStats
     * const dailyStats = await prisma.dailyStats.upsert({
     *   create: {
     *     // ... data to create a DailyStats
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DailyStats we want to update
     *   }
     * })
    **/
    upsert<T extends DailyStatsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DailyStatsUpsertArgs<ExtArgs>>
    ): Prisma__DailyStatsClient<$Types.GetResult<DailyStatsPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of DailyStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyStatsCountArgs} args - Arguments to filter DailyStats to count.
     * @example
     * // Count the number of DailyStats
     * const count = await prisma.dailyStats.count({
     *   where: {
     *     // ... the filter for the DailyStats we want to count
     *   }
     * })
    **/
    count<T extends DailyStatsCountArgs>(
      args?: Subset<T, DailyStatsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DailyStatsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DailyStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyStatsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DailyStatsAggregateArgs>(args: Subset<T, DailyStatsAggregateArgs>): Prisma.PrismaPromise<GetDailyStatsAggregateType<T>>

    /**
     * Group by DailyStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyStatsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DailyStatsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DailyStatsGroupByArgs['orderBy'] }
        : { orderBy?: DailyStatsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DailyStatsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDailyStatsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for DailyStats.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DailyStatsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * DailyStats base type for findUnique actions
   */
  export type DailyStatsFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyStats
     */
    select?: DailyStatsSelect<ExtArgs> | null
    /**
     * Filter, which DailyStats to fetch.
     */
    where: DailyStatsWhereUniqueInput
  }

  /**
   * DailyStats findUnique
   */
  export interface DailyStatsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends DailyStatsFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * DailyStats findUniqueOrThrow
   */
  export type DailyStatsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyStats
     */
    select?: DailyStatsSelect<ExtArgs> | null
    /**
     * Filter, which DailyStats to fetch.
     */
    where: DailyStatsWhereUniqueInput
  }


  /**
   * DailyStats base type for findFirst actions
   */
  export type DailyStatsFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyStats
     */
    select?: DailyStatsSelect<ExtArgs> | null
    /**
     * Filter, which DailyStats to fetch.
     */
    where?: DailyStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyStats to fetch.
     */
    orderBy?: Enumerable<DailyStatsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DailyStats.
     */
    cursor?: DailyStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DailyStats.
     */
    distinct?: Enumerable<DailyStatsScalarFieldEnum>
  }

  /**
   * DailyStats findFirst
   */
  export interface DailyStatsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends DailyStatsFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * DailyStats findFirstOrThrow
   */
  export type DailyStatsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyStats
     */
    select?: DailyStatsSelect<ExtArgs> | null
    /**
     * Filter, which DailyStats to fetch.
     */
    where?: DailyStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyStats to fetch.
     */
    orderBy?: Enumerable<DailyStatsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DailyStats.
     */
    cursor?: DailyStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DailyStats.
     */
    distinct?: Enumerable<DailyStatsScalarFieldEnum>
  }


  /**
   * DailyStats findMany
   */
  export type DailyStatsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyStats
     */
    select?: DailyStatsSelect<ExtArgs> | null
    /**
     * Filter, which DailyStats to fetch.
     */
    where?: DailyStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyStats to fetch.
     */
    orderBy?: Enumerable<DailyStatsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DailyStats.
     */
    cursor?: DailyStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyStats.
     */
    skip?: number
    distinct?: Enumerable<DailyStatsScalarFieldEnum>
  }


  /**
   * DailyStats create
   */
  export type DailyStatsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyStats
     */
    select?: DailyStatsSelect<ExtArgs> | null
    /**
     * The data needed to create a DailyStats.
     */
    data: XOR<DailyStatsCreateInput, DailyStatsUncheckedCreateInput>
  }


  /**
   * DailyStats createMany
   */
  export type DailyStatsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DailyStats.
     */
    data: Enumerable<DailyStatsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * DailyStats update
   */
  export type DailyStatsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyStats
     */
    select?: DailyStatsSelect<ExtArgs> | null
    /**
     * The data needed to update a DailyStats.
     */
    data: XOR<DailyStatsUpdateInput, DailyStatsUncheckedUpdateInput>
    /**
     * Choose, which DailyStats to update.
     */
    where: DailyStatsWhereUniqueInput
  }


  /**
   * DailyStats updateMany
   */
  export type DailyStatsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DailyStats.
     */
    data: XOR<DailyStatsUpdateManyMutationInput, DailyStatsUncheckedUpdateManyInput>
    /**
     * Filter which DailyStats to update
     */
    where?: DailyStatsWhereInput
  }


  /**
   * DailyStats upsert
   */
  export type DailyStatsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyStats
     */
    select?: DailyStatsSelect<ExtArgs> | null
    /**
     * The filter to search for the DailyStats to update in case it exists.
     */
    where: DailyStatsWhereUniqueInput
    /**
     * In case the DailyStats found by the `where` argument doesn't exist, create a new DailyStats with this data.
     */
    create: XOR<DailyStatsCreateInput, DailyStatsUncheckedCreateInput>
    /**
     * In case the DailyStats was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DailyStatsUpdateInput, DailyStatsUncheckedUpdateInput>
  }


  /**
   * DailyStats delete
   */
  export type DailyStatsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyStats
     */
    select?: DailyStatsSelect<ExtArgs> | null
    /**
     * Filter which DailyStats to delete.
     */
    where: DailyStatsWhereUniqueInput
  }


  /**
   * DailyStats deleteMany
   */
  export type DailyStatsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which DailyStats to delete
     */
    where?: DailyStatsWhereInput
  }


  /**
   * DailyStats without action
   */
  export type DailyStatsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyStats
     */
    select?: DailyStatsSelect<ExtArgs> | null
  }



  /**
   * Model ShippingOrder
   */


  export type AggregateShippingOrder = {
    _count: ShippingOrderCountAggregateOutputType | null
    _avg: ShippingOrderAvgAggregateOutputType | null
    _sum: ShippingOrderSumAggregateOutputType | null
    _min: ShippingOrderMinAggregateOutputType | null
    _max: ShippingOrderMaxAggregateOutputType | null
  }

  export type ShippingOrderAvgAggregateOutputType = {
    formatLabel: number | null
    cost: number | null
  }

  export type ShippingOrderSumAggregateOutputType = {
    formatLabel: number | null
    cost: number | null
  }

  export type ShippingOrderMinAggregateOutputType = {
    id: string | null
    serverId: string | null
    userId: string | null
    externalOrderId: string | null
    status: string | null
    senderName: string | null
    senderAddress: string | null
    senderAddress2: string | null
    senderZipcode: string | null
    senderCity: string | null
    senderPhone: string | null
    senderCountry: string | null
    recipientName: string | null
    recipientAddress: string | null
    recipientAddress2: string | null
    recipientZipcode: string | null
    recipientCity: string | null
    recipientPhone: string | null
    recipientCountry: string | null
    carrier: string | null
    weight: string | null
    formatLabel: number | null
    trackingId: string | null
    trackingUrl: string | null
    labelUrl: string | null
    createdAt: Date | null
    processedAt: Date | null
    cost: number | null
  }

  export type ShippingOrderMaxAggregateOutputType = {
    id: string | null
    serverId: string | null
    userId: string | null
    externalOrderId: string | null
    status: string | null
    senderName: string | null
    senderAddress: string | null
    senderAddress2: string | null
    senderZipcode: string | null
    senderCity: string | null
    senderPhone: string | null
    senderCountry: string | null
    recipientName: string | null
    recipientAddress: string | null
    recipientAddress2: string | null
    recipientZipcode: string | null
    recipientCity: string | null
    recipientPhone: string | null
    recipientCountry: string | null
    carrier: string | null
    weight: string | null
    formatLabel: number | null
    trackingId: string | null
    trackingUrl: string | null
    labelUrl: string | null
    createdAt: Date | null
    processedAt: Date | null
    cost: number | null
  }

  export type ShippingOrderCountAggregateOutputType = {
    id: number
    serverId: number
    userId: number
    externalOrderId: number
    status: number
    senderName: number
    senderAddress: number
    senderAddress2: number
    senderZipcode: number
    senderCity: number
    senderPhone: number
    senderCountry: number
    recipientName: number
    recipientAddress: number
    recipientAddress2: number
    recipientZipcode: number
    recipientCity: number
    recipientPhone: number
    recipientCountry: number
    carrier: number
    weight: number
    formatLabel: number
    trackingId: number
    trackingUrl: number
    labelUrl: number
    createdAt: number
    processedAt: number
    cost: number
    _all: number
  }


  export type ShippingOrderAvgAggregateInputType = {
    formatLabel?: true
    cost?: true
  }

  export type ShippingOrderSumAggregateInputType = {
    formatLabel?: true
    cost?: true
  }

  export type ShippingOrderMinAggregateInputType = {
    id?: true
    serverId?: true
    userId?: true
    externalOrderId?: true
    status?: true
    senderName?: true
    senderAddress?: true
    senderAddress2?: true
    senderZipcode?: true
    senderCity?: true
    senderPhone?: true
    senderCountry?: true
    recipientName?: true
    recipientAddress?: true
    recipientAddress2?: true
    recipientZipcode?: true
    recipientCity?: true
    recipientPhone?: true
    recipientCountry?: true
    carrier?: true
    weight?: true
    formatLabel?: true
    trackingId?: true
    trackingUrl?: true
    labelUrl?: true
    createdAt?: true
    processedAt?: true
    cost?: true
  }

  export type ShippingOrderMaxAggregateInputType = {
    id?: true
    serverId?: true
    userId?: true
    externalOrderId?: true
    status?: true
    senderName?: true
    senderAddress?: true
    senderAddress2?: true
    senderZipcode?: true
    senderCity?: true
    senderPhone?: true
    senderCountry?: true
    recipientName?: true
    recipientAddress?: true
    recipientAddress2?: true
    recipientZipcode?: true
    recipientCity?: true
    recipientPhone?: true
    recipientCountry?: true
    carrier?: true
    weight?: true
    formatLabel?: true
    trackingId?: true
    trackingUrl?: true
    labelUrl?: true
    createdAt?: true
    processedAt?: true
    cost?: true
  }

  export type ShippingOrderCountAggregateInputType = {
    id?: true
    serverId?: true
    userId?: true
    externalOrderId?: true
    status?: true
    senderName?: true
    senderAddress?: true
    senderAddress2?: true
    senderZipcode?: true
    senderCity?: true
    senderPhone?: true
    senderCountry?: true
    recipientName?: true
    recipientAddress?: true
    recipientAddress2?: true
    recipientZipcode?: true
    recipientCity?: true
    recipientPhone?: true
    recipientCountry?: true
    carrier?: true
    weight?: true
    formatLabel?: true
    trackingId?: true
    trackingUrl?: true
    labelUrl?: true
    createdAt?: true
    processedAt?: true
    cost?: true
    _all?: true
  }

  export type ShippingOrderAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShippingOrder to aggregate.
     */
    where?: ShippingOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShippingOrders to fetch.
     */
    orderBy?: Enumerable<ShippingOrderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShippingOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShippingOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShippingOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShippingOrders
    **/
    _count?: true | ShippingOrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShippingOrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShippingOrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShippingOrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShippingOrderMaxAggregateInputType
  }

  export type GetShippingOrderAggregateType<T extends ShippingOrderAggregateArgs> = {
        [P in keyof T & keyof AggregateShippingOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShippingOrder[P]>
      : GetScalarType<T[P], AggregateShippingOrder[P]>
  }




  export type ShippingOrderGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ShippingOrderWhereInput
    orderBy?: Enumerable<ShippingOrderOrderByWithAggregationInput>
    by: ShippingOrderScalarFieldEnum[]
    having?: ShippingOrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShippingOrderCountAggregateInputType | true
    _avg?: ShippingOrderAvgAggregateInputType
    _sum?: ShippingOrderSumAggregateInputType
    _min?: ShippingOrderMinAggregateInputType
    _max?: ShippingOrderMaxAggregateInputType
  }


  export type ShippingOrderGroupByOutputType = {
    id: string
    serverId: string
    userId: string
    externalOrderId: string
    status: string
    senderName: string
    senderAddress: string
    senderAddress2: string | null
    senderZipcode: string
    senderCity: string
    senderPhone: string
    senderCountry: string
    recipientName: string
    recipientAddress: string
    recipientAddress2: string | null
    recipientZipcode: string
    recipientCity: string
    recipientPhone: string
    recipientCountry: string
    carrier: string
    weight: string
    formatLabel: number
    trackingId: string | null
    trackingUrl: string | null
    labelUrl: string | null
    createdAt: Date
    processedAt: Date | null
    cost: number | null
    _count: ShippingOrderCountAggregateOutputType | null
    _avg: ShippingOrderAvgAggregateOutputType | null
    _sum: ShippingOrderSumAggregateOutputType | null
    _min: ShippingOrderMinAggregateOutputType | null
    _max: ShippingOrderMaxAggregateOutputType | null
  }

  type GetShippingOrderGroupByPayload<T extends ShippingOrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ShippingOrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShippingOrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShippingOrderGroupByOutputType[P]>
            : GetScalarType<T[P], ShippingOrderGroupByOutputType[P]>
        }
      >
    >


  export type ShippingOrderSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serverId?: boolean
    userId?: boolean
    externalOrderId?: boolean
    status?: boolean
    senderName?: boolean
    senderAddress?: boolean
    senderAddress2?: boolean
    senderZipcode?: boolean
    senderCity?: boolean
    senderPhone?: boolean
    senderCountry?: boolean
    recipientName?: boolean
    recipientAddress?: boolean
    recipientAddress2?: boolean
    recipientZipcode?: boolean
    recipientCity?: boolean
    recipientPhone?: boolean
    recipientCountry?: boolean
    carrier?: boolean
    weight?: boolean
    formatLabel?: boolean
    trackingId?: boolean
    trackingUrl?: boolean
    labelUrl?: boolean
    createdAt?: boolean
    processedAt?: boolean
    cost?: boolean
    user?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["shippingOrder"]>

  export type ShippingOrderSelectScalar = {
    id?: boolean
    serverId?: boolean
    userId?: boolean
    externalOrderId?: boolean
    status?: boolean
    senderName?: boolean
    senderAddress?: boolean
    senderAddress2?: boolean
    senderZipcode?: boolean
    senderCity?: boolean
    senderPhone?: boolean
    senderCountry?: boolean
    recipientName?: boolean
    recipientAddress?: boolean
    recipientAddress2?: boolean
    recipientZipcode?: boolean
    recipientCity?: boolean
    recipientPhone?: boolean
    recipientCountry?: boolean
    carrier?: boolean
    weight?: boolean
    formatLabel?: boolean
    trackingId?: boolean
    trackingUrl?: boolean
    labelUrl?: boolean
    createdAt?: boolean
    processedAt?: boolean
    cost?: boolean
  }

  export type ShippingOrderInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
  }


  type ShippingOrderGetPayload<S extends boolean | null | undefined | ShippingOrderArgs> = $Types.GetResult<ShippingOrderPayload, S>

  type ShippingOrderCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ShippingOrderFindManyArgs, 'select' | 'include'> & {
      select?: ShippingOrderCountAggregateInputType | true
    }

  export interface ShippingOrderDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ShippingOrder'], meta: { name: 'ShippingOrder' } }
    /**
     * Find zero or one ShippingOrder that matches the filter.
     * @param {ShippingOrderFindUniqueArgs} args - Arguments to find a ShippingOrder
     * @example
     * // Get one ShippingOrder
     * const shippingOrder = await prisma.shippingOrder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ShippingOrderFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ShippingOrderFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ShippingOrder'> extends True ? Prisma__ShippingOrderClient<$Types.GetResult<ShippingOrderPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ShippingOrderClient<$Types.GetResult<ShippingOrderPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one ShippingOrder that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ShippingOrderFindUniqueOrThrowArgs} args - Arguments to find a ShippingOrder
     * @example
     * // Get one ShippingOrder
     * const shippingOrder = await prisma.shippingOrder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ShippingOrderFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ShippingOrderFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ShippingOrderClient<$Types.GetResult<ShippingOrderPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first ShippingOrder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShippingOrderFindFirstArgs} args - Arguments to find a ShippingOrder
     * @example
     * // Get one ShippingOrder
     * const shippingOrder = await prisma.shippingOrder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ShippingOrderFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ShippingOrderFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ShippingOrder'> extends True ? Prisma__ShippingOrderClient<$Types.GetResult<ShippingOrderPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ShippingOrderClient<$Types.GetResult<ShippingOrderPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first ShippingOrder that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShippingOrderFindFirstOrThrowArgs} args - Arguments to find a ShippingOrder
     * @example
     * // Get one ShippingOrder
     * const shippingOrder = await prisma.shippingOrder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ShippingOrderFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ShippingOrderFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ShippingOrderClient<$Types.GetResult<ShippingOrderPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more ShippingOrders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShippingOrderFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShippingOrders
     * const shippingOrders = await prisma.shippingOrder.findMany()
     * 
     * // Get first 10 ShippingOrders
     * const shippingOrders = await prisma.shippingOrder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shippingOrderWithIdOnly = await prisma.shippingOrder.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ShippingOrderFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ShippingOrderFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ShippingOrderPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a ShippingOrder.
     * @param {ShippingOrderCreateArgs} args - Arguments to create a ShippingOrder.
     * @example
     * // Create one ShippingOrder
     * const ShippingOrder = await prisma.shippingOrder.create({
     *   data: {
     *     // ... data to create a ShippingOrder
     *   }
     * })
     * 
    **/
    create<T extends ShippingOrderCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ShippingOrderCreateArgs<ExtArgs>>
    ): Prisma__ShippingOrderClient<$Types.GetResult<ShippingOrderPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many ShippingOrders.
     *     @param {ShippingOrderCreateManyArgs} args - Arguments to create many ShippingOrders.
     *     @example
     *     // Create many ShippingOrders
     *     const shippingOrder = await prisma.shippingOrder.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ShippingOrderCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ShippingOrderCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ShippingOrder.
     * @param {ShippingOrderDeleteArgs} args - Arguments to delete one ShippingOrder.
     * @example
     * // Delete one ShippingOrder
     * const ShippingOrder = await prisma.shippingOrder.delete({
     *   where: {
     *     // ... filter to delete one ShippingOrder
     *   }
     * })
     * 
    **/
    delete<T extends ShippingOrderDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ShippingOrderDeleteArgs<ExtArgs>>
    ): Prisma__ShippingOrderClient<$Types.GetResult<ShippingOrderPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one ShippingOrder.
     * @param {ShippingOrderUpdateArgs} args - Arguments to update one ShippingOrder.
     * @example
     * // Update one ShippingOrder
     * const shippingOrder = await prisma.shippingOrder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ShippingOrderUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ShippingOrderUpdateArgs<ExtArgs>>
    ): Prisma__ShippingOrderClient<$Types.GetResult<ShippingOrderPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more ShippingOrders.
     * @param {ShippingOrderDeleteManyArgs} args - Arguments to filter ShippingOrders to delete.
     * @example
     * // Delete a few ShippingOrders
     * const { count } = await prisma.shippingOrder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ShippingOrderDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ShippingOrderDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShippingOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShippingOrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShippingOrders
     * const shippingOrder = await prisma.shippingOrder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ShippingOrderUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ShippingOrderUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ShippingOrder.
     * @param {ShippingOrderUpsertArgs} args - Arguments to update or create a ShippingOrder.
     * @example
     * // Update or create a ShippingOrder
     * const shippingOrder = await prisma.shippingOrder.upsert({
     *   create: {
     *     // ... data to create a ShippingOrder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShippingOrder we want to update
     *   }
     * })
    **/
    upsert<T extends ShippingOrderUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ShippingOrderUpsertArgs<ExtArgs>>
    ): Prisma__ShippingOrderClient<$Types.GetResult<ShippingOrderPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of ShippingOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShippingOrderCountArgs} args - Arguments to filter ShippingOrders to count.
     * @example
     * // Count the number of ShippingOrders
     * const count = await prisma.shippingOrder.count({
     *   where: {
     *     // ... the filter for the ShippingOrders we want to count
     *   }
     * })
    **/
    count<T extends ShippingOrderCountArgs>(
      args?: Subset<T, ShippingOrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShippingOrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShippingOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShippingOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShippingOrderAggregateArgs>(args: Subset<T, ShippingOrderAggregateArgs>): Prisma.PrismaPromise<GetShippingOrderAggregateType<T>>

    /**
     * Group by ShippingOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShippingOrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShippingOrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShippingOrderGroupByArgs['orderBy'] }
        : { orderBy?: ShippingOrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShippingOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShippingOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ShippingOrder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ShippingOrderClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ShippingOrder base type for findUnique actions
   */
  export type ShippingOrderFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShippingOrder
     */
    select?: ShippingOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShippingOrderInclude<ExtArgs> | null
    /**
     * Filter, which ShippingOrder to fetch.
     */
    where: ShippingOrderWhereUniqueInput
  }

  /**
   * ShippingOrder findUnique
   */
  export interface ShippingOrderFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ShippingOrderFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ShippingOrder findUniqueOrThrow
   */
  export type ShippingOrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShippingOrder
     */
    select?: ShippingOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShippingOrderInclude<ExtArgs> | null
    /**
     * Filter, which ShippingOrder to fetch.
     */
    where: ShippingOrderWhereUniqueInput
  }


  /**
   * ShippingOrder base type for findFirst actions
   */
  export type ShippingOrderFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShippingOrder
     */
    select?: ShippingOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShippingOrderInclude<ExtArgs> | null
    /**
     * Filter, which ShippingOrder to fetch.
     */
    where?: ShippingOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShippingOrders to fetch.
     */
    orderBy?: Enumerable<ShippingOrderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShippingOrders.
     */
    cursor?: ShippingOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShippingOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShippingOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShippingOrders.
     */
    distinct?: Enumerable<ShippingOrderScalarFieldEnum>
  }

  /**
   * ShippingOrder findFirst
   */
  export interface ShippingOrderFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ShippingOrderFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ShippingOrder findFirstOrThrow
   */
  export type ShippingOrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShippingOrder
     */
    select?: ShippingOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShippingOrderInclude<ExtArgs> | null
    /**
     * Filter, which ShippingOrder to fetch.
     */
    where?: ShippingOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShippingOrders to fetch.
     */
    orderBy?: Enumerable<ShippingOrderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShippingOrders.
     */
    cursor?: ShippingOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShippingOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShippingOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShippingOrders.
     */
    distinct?: Enumerable<ShippingOrderScalarFieldEnum>
  }


  /**
   * ShippingOrder findMany
   */
  export type ShippingOrderFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShippingOrder
     */
    select?: ShippingOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShippingOrderInclude<ExtArgs> | null
    /**
     * Filter, which ShippingOrders to fetch.
     */
    where?: ShippingOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShippingOrders to fetch.
     */
    orderBy?: Enumerable<ShippingOrderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShippingOrders.
     */
    cursor?: ShippingOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShippingOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShippingOrders.
     */
    skip?: number
    distinct?: Enumerable<ShippingOrderScalarFieldEnum>
  }


  /**
   * ShippingOrder create
   */
  export type ShippingOrderCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShippingOrder
     */
    select?: ShippingOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShippingOrderInclude<ExtArgs> | null
    /**
     * The data needed to create a ShippingOrder.
     */
    data: XOR<ShippingOrderCreateInput, ShippingOrderUncheckedCreateInput>
  }


  /**
   * ShippingOrder createMany
   */
  export type ShippingOrderCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ShippingOrders.
     */
    data: Enumerable<ShippingOrderCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ShippingOrder update
   */
  export type ShippingOrderUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShippingOrder
     */
    select?: ShippingOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShippingOrderInclude<ExtArgs> | null
    /**
     * The data needed to update a ShippingOrder.
     */
    data: XOR<ShippingOrderUpdateInput, ShippingOrderUncheckedUpdateInput>
    /**
     * Choose, which ShippingOrder to update.
     */
    where: ShippingOrderWhereUniqueInput
  }


  /**
   * ShippingOrder updateMany
   */
  export type ShippingOrderUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ShippingOrders.
     */
    data: XOR<ShippingOrderUpdateManyMutationInput, ShippingOrderUncheckedUpdateManyInput>
    /**
     * Filter which ShippingOrders to update
     */
    where?: ShippingOrderWhereInput
  }


  /**
   * ShippingOrder upsert
   */
  export type ShippingOrderUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShippingOrder
     */
    select?: ShippingOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShippingOrderInclude<ExtArgs> | null
    /**
     * The filter to search for the ShippingOrder to update in case it exists.
     */
    where: ShippingOrderWhereUniqueInput
    /**
     * In case the ShippingOrder found by the `where` argument doesn't exist, create a new ShippingOrder with this data.
     */
    create: XOR<ShippingOrderCreateInput, ShippingOrderUncheckedCreateInput>
    /**
     * In case the ShippingOrder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShippingOrderUpdateInput, ShippingOrderUncheckedUpdateInput>
  }


  /**
   * ShippingOrder delete
   */
  export type ShippingOrderDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShippingOrder
     */
    select?: ShippingOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShippingOrderInclude<ExtArgs> | null
    /**
     * Filter which ShippingOrder to delete.
     */
    where: ShippingOrderWhereUniqueInput
  }


  /**
   * ShippingOrder deleteMany
   */
  export type ShippingOrderDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShippingOrders to delete
     */
    where?: ShippingOrderWhereInput
  }


  /**
   * ShippingOrder without action
   */
  export type ShippingOrderArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShippingOrder
     */
    select?: ShippingOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShippingOrderInclude<ExtArgs> | null
  }



  /**
   * Model RechargeRequest
   */


  export type AggregateRechargeRequest = {
    _count: RechargeRequestCountAggregateOutputType | null
    _avg: RechargeRequestAvgAggregateOutputType | null
    _sum: RechargeRequestSumAggregateOutputType | null
    _min: RechargeRequestMinAggregateOutputType | null
    _max: RechargeRequestMaxAggregateOutputType | null
  }

  export type RechargeRequestAvgAggregateOutputType = {
    amount: number | null
  }

  export type RechargeRequestSumAggregateOutputType = {
    amount: number | null
  }

  export type RechargeRequestMinAggregateOutputType = {
    id: string | null
    serverId: string | null
    userId: string | null
    amount: number | null
    status: string | null
    requestMessage: string | null
    reviewedByUserId: string | null
    reviewMessage: string | null
    reviewedAt: Date | null
    notificationSent: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RechargeRequestMaxAggregateOutputType = {
    id: string | null
    serverId: string | null
    userId: string | null
    amount: number | null
    status: string | null
    requestMessage: string | null
    reviewedByUserId: string | null
    reviewMessage: string | null
    reviewedAt: Date | null
    notificationSent: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RechargeRequestCountAggregateOutputType = {
    id: number
    serverId: number
    userId: number
    amount: number
    status: number
    requestMessage: number
    reviewedByUserId: number
    reviewMessage: number
    reviewedAt: number
    notificationSent: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RechargeRequestAvgAggregateInputType = {
    amount?: true
  }

  export type RechargeRequestSumAggregateInputType = {
    amount?: true
  }

  export type RechargeRequestMinAggregateInputType = {
    id?: true
    serverId?: true
    userId?: true
    amount?: true
    status?: true
    requestMessage?: true
    reviewedByUserId?: true
    reviewMessage?: true
    reviewedAt?: true
    notificationSent?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RechargeRequestMaxAggregateInputType = {
    id?: true
    serverId?: true
    userId?: true
    amount?: true
    status?: true
    requestMessage?: true
    reviewedByUserId?: true
    reviewMessage?: true
    reviewedAt?: true
    notificationSent?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RechargeRequestCountAggregateInputType = {
    id?: true
    serverId?: true
    userId?: true
    amount?: true
    status?: true
    requestMessage?: true
    reviewedByUserId?: true
    reviewMessage?: true
    reviewedAt?: true
    notificationSent?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RechargeRequestAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which RechargeRequest to aggregate.
     */
    where?: RechargeRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RechargeRequests to fetch.
     */
    orderBy?: Enumerable<RechargeRequestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RechargeRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RechargeRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RechargeRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RechargeRequests
    **/
    _count?: true | RechargeRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RechargeRequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RechargeRequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RechargeRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RechargeRequestMaxAggregateInputType
  }

  export type GetRechargeRequestAggregateType<T extends RechargeRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateRechargeRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRechargeRequest[P]>
      : GetScalarType<T[P], AggregateRechargeRequest[P]>
  }




  export type RechargeRequestGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RechargeRequestWhereInput
    orderBy?: Enumerable<RechargeRequestOrderByWithAggregationInput>
    by: RechargeRequestScalarFieldEnum[]
    having?: RechargeRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RechargeRequestCountAggregateInputType | true
    _avg?: RechargeRequestAvgAggregateInputType
    _sum?: RechargeRequestSumAggregateInputType
    _min?: RechargeRequestMinAggregateInputType
    _max?: RechargeRequestMaxAggregateInputType
  }


  export type RechargeRequestGroupByOutputType = {
    id: string
    serverId: string
    userId: string
    amount: number
    status: string
    requestMessage: string | null
    reviewedByUserId: string | null
    reviewMessage: string | null
    reviewedAt: Date | null
    notificationSent: boolean
    createdAt: Date
    updatedAt: Date
    _count: RechargeRequestCountAggregateOutputType | null
    _avg: RechargeRequestAvgAggregateOutputType | null
    _sum: RechargeRequestSumAggregateOutputType | null
    _min: RechargeRequestMinAggregateOutputType | null
    _max: RechargeRequestMaxAggregateOutputType | null
  }

  type GetRechargeRequestGroupByPayload<T extends RechargeRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<RechargeRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RechargeRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RechargeRequestGroupByOutputType[P]>
            : GetScalarType<T[P], RechargeRequestGroupByOutputType[P]>
        }
      >
    >


  export type RechargeRequestSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serverId?: boolean
    userId?: boolean
    amount?: boolean
    status?: boolean
    requestMessage?: boolean
    reviewedByUserId?: boolean
    reviewMessage?: boolean
    reviewedAt?: boolean
    notificationSent?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["rechargeRequest"]>

  export type RechargeRequestSelectScalar = {
    id?: boolean
    serverId?: boolean
    userId?: boolean
    amount?: boolean
    status?: boolean
    requestMessage?: boolean
    reviewedByUserId?: boolean
    reviewMessage?: boolean
    reviewedAt?: boolean
    notificationSent?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RechargeRequestInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
  }


  type RechargeRequestGetPayload<S extends boolean | null | undefined | RechargeRequestArgs> = $Types.GetResult<RechargeRequestPayload, S>

  type RechargeRequestCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<RechargeRequestFindManyArgs, 'select' | 'include'> & {
      select?: RechargeRequestCountAggregateInputType | true
    }

  export interface RechargeRequestDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RechargeRequest'], meta: { name: 'RechargeRequest' } }
    /**
     * Find zero or one RechargeRequest that matches the filter.
     * @param {RechargeRequestFindUniqueArgs} args - Arguments to find a RechargeRequest
     * @example
     * // Get one RechargeRequest
     * const rechargeRequest = await prisma.rechargeRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RechargeRequestFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RechargeRequestFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'RechargeRequest'> extends True ? Prisma__RechargeRequestClient<$Types.GetResult<RechargeRequestPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__RechargeRequestClient<$Types.GetResult<RechargeRequestPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one RechargeRequest that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RechargeRequestFindUniqueOrThrowArgs} args - Arguments to find a RechargeRequest
     * @example
     * // Get one RechargeRequest
     * const rechargeRequest = await prisma.rechargeRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RechargeRequestFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RechargeRequestFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RechargeRequestClient<$Types.GetResult<RechargeRequestPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first RechargeRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RechargeRequestFindFirstArgs} args - Arguments to find a RechargeRequest
     * @example
     * // Get one RechargeRequest
     * const rechargeRequest = await prisma.rechargeRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RechargeRequestFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RechargeRequestFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'RechargeRequest'> extends True ? Prisma__RechargeRequestClient<$Types.GetResult<RechargeRequestPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__RechargeRequestClient<$Types.GetResult<RechargeRequestPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first RechargeRequest that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RechargeRequestFindFirstOrThrowArgs} args - Arguments to find a RechargeRequest
     * @example
     * // Get one RechargeRequest
     * const rechargeRequest = await prisma.rechargeRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RechargeRequestFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RechargeRequestFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RechargeRequestClient<$Types.GetResult<RechargeRequestPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more RechargeRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RechargeRequestFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RechargeRequests
     * const rechargeRequests = await prisma.rechargeRequest.findMany()
     * 
     * // Get first 10 RechargeRequests
     * const rechargeRequests = await prisma.rechargeRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rechargeRequestWithIdOnly = await prisma.rechargeRequest.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RechargeRequestFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RechargeRequestFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<RechargeRequestPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a RechargeRequest.
     * @param {RechargeRequestCreateArgs} args - Arguments to create a RechargeRequest.
     * @example
     * // Create one RechargeRequest
     * const RechargeRequest = await prisma.rechargeRequest.create({
     *   data: {
     *     // ... data to create a RechargeRequest
     *   }
     * })
     * 
    **/
    create<T extends RechargeRequestCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RechargeRequestCreateArgs<ExtArgs>>
    ): Prisma__RechargeRequestClient<$Types.GetResult<RechargeRequestPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many RechargeRequests.
     *     @param {RechargeRequestCreateManyArgs} args - Arguments to create many RechargeRequests.
     *     @example
     *     // Create many RechargeRequests
     *     const rechargeRequest = await prisma.rechargeRequest.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RechargeRequestCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RechargeRequestCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a RechargeRequest.
     * @param {RechargeRequestDeleteArgs} args - Arguments to delete one RechargeRequest.
     * @example
     * // Delete one RechargeRequest
     * const RechargeRequest = await prisma.rechargeRequest.delete({
     *   where: {
     *     // ... filter to delete one RechargeRequest
     *   }
     * })
     * 
    **/
    delete<T extends RechargeRequestDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RechargeRequestDeleteArgs<ExtArgs>>
    ): Prisma__RechargeRequestClient<$Types.GetResult<RechargeRequestPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one RechargeRequest.
     * @param {RechargeRequestUpdateArgs} args - Arguments to update one RechargeRequest.
     * @example
     * // Update one RechargeRequest
     * const rechargeRequest = await prisma.rechargeRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RechargeRequestUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RechargeRequestUpdateArgs<ExtArgs>>
    ): Prisma__RechargeRequestClient<$Types.GetResult<RechargeRequestPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more RechargeRequests.
     * @param {RechargeRequestDeleteManyArgs} args - Arguments to filter RechargeRequests to delete.
     * @example
     * // Delete a few RechargeRequests
     * const { count } = await prisma.rechargeRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RechargeRequestDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RechargeRequestDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RechargeRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RechargeRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RechargeRequests
     * const rechargeRequest = await prisma.rechargeRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RechargeRequestUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RechargeRequestUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RechargeRequest.
     * @param {RechargeRequestUpsertArgs} args - Arguments to update or create a RechargeRequest.
     * @example
     * // Update or create a RechargeRequest
     * const rechargeRequest = await prisma.rechargeRequest.upsert({
     *   create: {
     *     // ... data to create a RechargeRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RechargeRequest we want to update
     *   }
     * })
    **/
    upsert<T extends RechargeRequestUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RechargeRequestUpsertArgs<ExtArgs>>
    ): Prisma__RechargeRequestClient<$Types.GetResult<RechargeRequestPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of RechargeRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RechargeRequestCountArgs} args - Arguments to filter RechargeRequests to count.
     * @example
     * // Count the number of RechargeRequests
     * const count = await prisma.rechargeRequest.count({
     *   where: {
     *     // ... the filter for the RechargeRequests we want to count
     *   }
     * })
    **/
    count<T extends RechargeRequestCountArgs>(
      args?: Subset<T, RechargeRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RechargeRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RechargeRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RechargeRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RechargeRequestAggregateArgs>(args: Subset<T, RechargeRequestAggregateArgs>): Prisma.PrismaPromise<GetRechargeRequestAggregateType<T>>

    /**
     * Group by RechargeRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RechargeRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RechargeRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RechargeRequestGroupByArgs['orderBy'] }
        : { orderBy?: RechargeRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RechargeRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRechargeRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for RechargeRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RechargeRequestClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * RechargeRequest base type for findUnique actions
   */
  export type RechargeRequestFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RechargeRequest
     */
    select?: RechargeRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RechargeRequestInclude<ExtArgs> | null
    /**
     * Filter, which RechargeRequest to fetch.
     */
    where: RechargeRequestWhereUniqueInput
  }

  /**
   * RechargeRequest findUnique
   */
  export interface RechargeRequestFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends RechargeRequestFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * RechargeRequest findUniqueOrThrow
   */
  export type RechargeRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RechargeRequest
     */
    select?: RechargeRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RechargeRequestInclude<ExtArgs> | null
    /**
     * Filter, which RechargeRequest to fetch.
     */
    where: RechargeRequestWhereUniqueInput
  }


  /**
   * RechargeRequest base type for findFirst actions
   */
  export type RechargeRequestFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RechargeRequest
     */
    select?: RechargeRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RechargeRequestInclude<ExtArgs> | null
    /**
     * Filter, which RechargeRequest to fetch.
     */
    where?: RechargeRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RechargeRequests to fetch.
     */
    orderBy?: Enumerable<RechargeRequestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RechargeRequests.
     */
    cursor?: RechargeRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RechargeRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RechargeRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RechargeRequests.
     */
    distinct?: Enumerable<RechargeRequestScalarFieldEnum>
  }

  /**
   * RechargeRequest findFirst
   */
  export interface RechargeRequestFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends RechargeRequestFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * RechargeRequest findFirstOrThrow
   */
  export type RechargeRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RechargeRequest
     */
    select?: RechargeRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RechargeRequestInclude<ExtArgs> | null
    /**
     * Filter, which RechargeRequest to fetch.
     */
    where?: RechargeRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RechargeRequests to fetch.
     */
    orderBy?: Enumerable<RechargeRequestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RechargeRequests.
     */
    cursor?: RechargeRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RechargeRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RechargeRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RechargeRequests.
     */
    distinct?: Enumerable<RechargeRequestScalarFieldEnum>
  }


  /**
   * RechargeRequest findMany
   */
  export type RechargeRequestFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RechargeRequest
     */
    select?: RechargeRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RechargeRequestInclude<ExtArgs> | null
    /**
     * Filter, which RechargeRequests to fetch.
     */
    where?: RechargeRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RechargeRequests to fetch.
     */
    orderBy?: Enumerable<RechargeRequestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RechargeRequests.
     */
    cursor?: RechargeRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RechargeRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RechargeRequests.
     */
    skip?: number
    distinct?: Enumerable<RechargeRequestScalarFieldEnum>
  }


  /**
   * RechargeRequest create
   */
  export type RechargeRequestCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RechargeRequest
     */
    select?: RechargeRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RechargeRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a RechargeRequest.
     */
    data: XOR<RechargeRequestCreateInput, RechargeRequestUncheckedCreateInput>
  }


  /**
   * RechargeRequest createMany
   */
  export type RechargeRequestCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RechargeRequests.
     */
    data: Enumerable<RechargeRequestCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * RechargeRequest update
   */
  export type RechargeRequestUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RechargeRequest
     */
    select?: RechargeRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RechargeRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a RechargeRequest.
     */
    data: XOR<RechargeRequestUpdateInput, RechargeRequestUncheckedUpdateInput>
    /**
     * Choose, which RechargeRequest to update.
     */
    where: RechargeRequestWhereUniqueInput
  }


  /**
   * RechargeRequest updateMany
   */
  export type RechargeRequestUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RechargeRequests.
     */
    data: XOR<RechargeRequestUpdateManyMutationInput, RechargeRequestUncheckedUpdateManyInput>
    /**
     * Filter which RechargeRequests to update
     */
    where?: RechargeRequestWhereInput
  }


  /**
   * RechargeRequest upsert
   */
  export type RechargeRequestUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RechargeRequest
     */
    select?: RechargeRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RechargeRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the RechargeRequest to update in case it exists.
     */
    where: RechargeRequestWhereUniqueInput
    /**
     * In case the RechargeRequest found by the `where` argument doesn't exist, create a new RechargeRequest with this data.
     */
    create: XOR<RechargeRequestCreateInput, RechargeRequestUncheckedCreateInput>
    /**
     * In case the RechargeRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RechargeRequestUpdateInput, RechargeRequestUncheckedUpdateInput>
  }


  /**
   * RechargeRequest delete
   */
  export type RechargeRequestDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RechargeRequest
     */
    select?: RechargeRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RechargeRequestInclude<ExtArgs> | null
    /**
     * Filter which RechargeRequest to delete.
     */
    where: RechargeRequestWhereUniqueInput
  }


  /**
   * RechargeRequest deleteMany
   */
  export type RechargeRequestDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which RechargeRequests to delete
     */
    where?: RechargeRequestWhereInput
  }


  /**
   * RechargeRequest without action
   */
  export type RechargeRequestArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RechargeRequest
     */
    select?: RechargeRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RechargeRequestInclude<ExtArgs> | null
  }



  /**
   * Model UserPreferences
   */


  export type AggregateUserPreferences = {
    _count: UserPreferencesCountAggregateOutputType | null
    _avg: UserPreferencesAvgAggregateOutputType | null
    _sum: UserPreferencesSumAggregateOutputType | null
    _min: UserPreferencesMinAggregateOutputType | null
    _max: UserPreferencesMaxAggregateOutputType | null
  }

  export type UserPreferencesAvgAggregateOutputType = {
    defaultLabelFormat: number | null
  }

  export type UserPreferencesSumAggregateOutputType = {
    defaultLabelFormat: number | null
  }

  export type UserPreferencesMinAggregateOutputType = {
    id: string | null
    serverId: string | null
    userId: string | null
    notifyOrderStatus: boolean | null
    notifyCredits: boolean | null
    notifyRechargeStatus: boolean | null
    defaultCarrier: string | null
    defaultLabelFormat: number | null
    language: string | null
    theme: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserPreferencesMaxAggregateOutputType = {
    id: string | null
    serverId: string | null
    userId: string | null
    notifyOrderStatus: boolean | null
    notifyCredits: boolean | null
    notifyRechargeStatus: boolean | null
    defaultCarrier: string | null
    defaultLabelFormat: number | null
    language: string | null
    theme: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserPreferencesCountAggregateOutputType = {
    id: number
    serverId: number
    userId: number
    notifyOrderStatus: number
    notifyCredits: number
    notifyRechargeStatus: number
    defaultCarrier: number
    defaultLabelFormat: number
    language: number
    theme: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserPreferencesAvgAggregateInputType = {
    defaultLabelFormat?: true
  }

  export type UserPreferencesSumAggregateInputType = {
    defaultLabelFormat?: true
  }

  export type UserPreferencesMinAggregateInputType = {
    id?: true
    serverId?: true
    userId?: true
    notifyOrderStatus?: true
    notifyCredits?: true
    notifyRechargeStatus?: true
    defaultCarrier?: true
    defaultLabelFormat?: true
    language?: true
    theme?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserPreferencesMaxAggregateInputType = {
    id?: true
    serverId?: true
    userId?: true
    notifyOrderStatus?: true
    notifyCredits?: true
    notifyRechargeStatus?: true
    defaultCarrier?: true
    defaultLabelFormat?: true
    language?: true
    theme?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserPreferencesCountAggregateInputType = {
    id?: true
    serverId?: true
    userId?: true
    notifyOrderStatus?: true
    notifyCredits?: true
    notifyRechargeStatus?: true
    defaultCarrier?: true
    defaultLabelFormat?: true
    language?: true
    theme?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserPreferencesAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPreferences to aggregate.
     */
    where?: UserPreferencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPreferences to fetch.
     */
    orderBy?: Enumerable<UserPreferencesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserPreferencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserPreferences
    **/
    _count?: true | UserPreferencesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserPreferencesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserPreferencesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserPreferencesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserPreferencesMaxAggregateInputType
  }

  export type GetUserPreferencesAggregateType<T extends UserPreferencesAggregateArgs> = {
        [P in keyof T & keyof AggregateUserPreferences]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserPreferences[P]>
      : GetScalarType<T[P], AggregateUserPreferences[P]>
  }




  export type UserPreferencesGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserPreferencesWhereInput
    orderBy?: Enumerable<UserPreferencesOrderByWithAggregationInput>
    by: UserPreferencesScalarFieldEnum[]
    having?: UserPreferencesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserPreferencesCountAggregateInputType | true
    _avg?: UserPreferencesAvgAggregateInputType
    _sum?: UserPreferencesSumAggregateInputType
    _min?: UserPreferencesMinAggregateInputType
    _max?: UserPreferencesMaxAggregateInputType
  }


  export type UserPreferencesGroupByOutputType = {
    id: string
    serverId: string
    userId: string
    notifyOrderStatus: boolean
    notifyCredits: boolean
    notifyRechargeStatus: boolean
    defaultCarrier: string | null
    defaultLabelFormat: number
    language: string
    theme: string
    createdAt: Date
    updatedAt: Date
    _count: UserPreferencesCountAggregateOutputType | null
    _avg: UserPreferencesAvgAggregateOutputType | null
    _sum: UserPreferencesSumAggregateOutputType | null
    _min: UserPreferencesMinAggregateOutputType | null
    _max: UserPreferencesMaxAggregateOutputType | null
  }

  type GetUserPreferencesGroupByPayload<T extends UserPreferencesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserPreferencesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserPreferencesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserPreferencesGroupByOutputType[P]>
            : GetScalarType<T[P], UserPreferencesGroupByOutputType[P]>
        }
      >
    >


  export type UserPreferencesSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serverId?: boolean
    userId?: boolean
    notifyOrderStatus?: boolean
    notifyCredits?: boolean
    notifyRechargeStatus?: boolean
    defaultCarrier?: boolean
    defaultLabelFormat?: boolean
    language?: boolean
    theme?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["userPreferences"]>

  export type UserPreferencesSelectScalar = {
    id?: boolean
    serverId?: boolean
    userId?: boolean
    notifyOrderStatus?: boolean
    notifyCredits?: boolean
    notifyRechargeStatus?: boolean
    defaultCarrier?: boolean
    defaultLabelFormat?: boolean
    language?: boolean
    theme?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserPreferencesInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
  }


  type UserPreferencesGetPayload<S extends boolean | null | undefined | UserPreferencesArgs> = $Types.GetResult<UserPreferencesPayload, S>

  type UserPreferencesCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserPreferencesFindManyArgs, 'select' | 'include'> & {
      select?: UserPreferencesCountAggregateInputType | true
    }

  export interface UserPreferencesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserPreferences'], meta: { name: 'UserPreferences' } }
    /**
     * Find zero or one UserPreferences that matches the filter.
     * @param {UserPreferencesFindUniqueArgs} args - Arguments to find a UserPreferences
     * @example
     * // Get one UserPreferences
     * const userPreferences = await prisma.userPreferences.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserPreferencesFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserPreferencesFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserPreferences'> extends True ? Prisma__UserPreferencesClient<$Types.GetResult<UserPreferencesPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__UserPreferencesClient<$Types.GetResult<UserPreferencesPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one UserPreferences that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserPreferencesFindUniqueOrThrowArgs} args - Arguments to find a UserPreferences
     * @example
     * // Get one UserPreferences
     * const userPreferences = await prisma.userPreferences.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserPreferencesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserPreferencesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserPreferencesClient<$Types.GetResult<UserPreferencesPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first UserPreferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferencesFindFirstArgs} args - Arguments to find a UserPreferences
     * @example
     * // Get one UserPreferences
     * const userPreferences = await prisma.userPreferences.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserPreferencesFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserPreferencesFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserPreferences'> extends True ? Prisma__UserPreferencesClient<$Types.GetResult<UserPreferencesPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__UserPreferencesClient<$Types.GetResult<UserPreferencesPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first UserPreferences that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferencesFindFirstOrThrowArgs} args - Arguments to find a UserPreferences
     * @example
     * // Get one UserPreferences
     * const userPreferences = await prisma.userPreferences.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserPreferencesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserPreferencesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserPreferencesClient<$Types.GetResult<UserPreferencesPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more UserPreferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferencesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserPreferences
     * const userPreferences = await prisma.userPreferences.findMany()
     * 
     * // Get first 10 UserPreferences
     * const userPreferences = await prisma.userPreferences.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userPreferencesWithIdOnly = await prisma.userPreferences.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserPreferencesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserPreferencesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<UserPreferencesPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a UserPreferences.
     * @param {UserPreferencesCreateArgs} args - Arguments to create a UserPreferences.
     * @example
     * // Create one UserPreferences
     * const UserPreferences = await prisma.userPreferences.create({
     *   data: {
     *     // ... data to create a UserPreferences
     *   }
     * })
     * 
    **/
    create<T extends UserPreferencesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserPreferencesCreateArgs<ExtArgs>>
    ): Prisma__UserPreferencesClient<$Types.GetResult<UserPreferencesPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many UserPreferences.
     *     @param {UserPreferencesCreateManyArgs} args - Arguments to create many UserPreferences.
     *     @example
     *     // Create many UserPreferences
     *     const userPreferences = await prisma.userPreferences.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserPreferencesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserPreferencesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserPreferences.
     * @param {UserPreferencesDeleteArgs} args - Arguments to delete one UserPreferences.
     * @example
     * // Delete one UserPreferences
     * const UserPreferences = await prisma.userPreferences.delete({
     *   where: {
     *     // ... filter to delete one UserPreferences
     *   }
     * })
     * 
    **/
    delete<T extends UserPreferencesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserPreferencesDeleteArgs<ExtArgs>>
    ): Prisma__UserPreferencesClient<$Types.GetResult<UserPreferencesPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one UserPreferences.
     * @param {UserPreferencesUpdateArgs} args - Arguments to update one UserPreferences.
     * @example
     * // Update one UserPreferences
     * const userPreferences = await prisma.userPreferences.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserPreferencesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserPreferencesUpdateArgs<ExtArgs>>
    ): Prisma__UserPreferencesClient<$Types.GetResult<UserPreferencesPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more UserPreferences.
     * @param {UserPreferencesDeleteManyArgs} args - Arguments to filter UserPreferences to delete.
     * @example
     * // Delete a few UserPreferences
     * const { count } = await prisma.userPreferences.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserPreferencesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserPreferencesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferencesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserPreferences
     * const userPreferences = await prisma.userPreferences.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserPreferencesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserPreferencesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserPreferences.
     * @param {UserPreferencesUpsertArgs} args - Arguments to update or create a UserPreferences.
     * @example
     * // Update or create a UserPreferences
     * const userPreferences = await prisma.userPreferences.upsert({
     *   create: {
     *     // ... data to create a UserPreferences
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserPreferences we want to update
     *   }
     * })
    **/
    upsert<T extends UserPreferencesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserPreferencesUpsertArgs<ExtArgs>>
    ): Prisma__UserPreferencesClient<$Types.GetResult<UserPreferencesPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of UserPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferencesCountArgs} args - Arguments to filter UserPreferences to count.
     * @example
     * // Count the number of UserPreferences
     * const count = await prisma.userPreferences.count({
     *   where: {
     *     // ... the filter for the UserPreferences we want to count
     *   }
     * })
    **/
    count<T extends UserPreferencesCountArgs>(
      args?: Subset<T, UserPreferencesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserPreferencesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferencesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserPreferencesAggregateArgs>(args: Subset<T, UserPreferencesAggregateArgs>): Prisma.PrismaPromise<GetUserPreferencesAggregateType<T>>

    /**
     * Group by UserPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferencesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserPreferencesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserPreferencesGroupByArgs['orderBy'] }
        : { orderBy?: UserPreferencesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserPreferencesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserPreferencesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for UserPreferences.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserPreferencesClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * UserPreferences base type for findUnique actions
   */
  export type UserPreferencesFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * Filter, which UserPreferences to fetch.
     */
    where: UserPreferencesWhereUniqueInput
  }

  /**
   * UserPreferences findUnique
   */
  export interface UserPreferencesFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserPreferencesFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserPreferences findUniqueOrThrow
   */
  export type UserPreferencesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * Filter, which UserPreferences to fetch.
     */
    where: UserPreferencesWhereUniqueInput
  }


  /**
   * UserPreferences base type for findFirst actions
   */
  export type UserPreferencesFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * Filter, which UserPreferences to fetch.
     */
    where?: UserPreferencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPreferences to fetch.
     */
    orderBy?: Enumerable<UserPreferencesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPreferences.
     */
    cursor?: UserPreferencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPreferences.
     */
    distinct?: Enumerable<UserPreferencesScalarFieldEnum>
  }

  /**
   * UserPreferences findFirst
   */
  export interface UserPreferencesFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserPreferencesFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserPreferences findFirstOrThrow
   */
  export type UserPreferencesFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * Filter, which UserPreferences to fetch.
     */
    where?: UserPreferencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPreferences to fetch.
     */
    orderBy?: Enumerable<UserPreferencesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPreferences.
     */
    cursor?: UserPreferencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPreferences.
     */
    distinct?: Enumerable<UserPreferencesScalarFieldEnum>
  }


  /**
   * UserPreferences findMany
   */
  export type UserPreferencesFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * Filter, which UserPreferences to fetch.
     */
    where?: UserPreferencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPreferences to fetch.
     */
    orderBy?: Enumerable<UserPreferencesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserPreferences.
     */
    cursor?: UserPreferencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPreferences.
     */
    skip?: number
    distinct?: Enumerable<UserPreferencesScalarFieldEnum>
  }


  /**
   * UserPreferences create
   */
  export type UserPreferencesCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * The data needed to create a UserPreferences.
     */
    data: XOR<UserPreferencesCreateInput, UserPreferencesUncheckedCreateInput>
  }


  /**
   * UserPreferences createMany
   */
  export type UserPreferencesCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserPreferences.
     */
    data: Enumerable<UserPreferencesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * UserPreferences update
   */
  export type UserPreferencesUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * The data needed to update a UserPreferences.
     */
    data: XOR<UserPreferencesUpdateInput, UserPreferencesUncheckedUpdateInput>
    /**
     * Choose, which UserPreferences to update.
     */
    where: UserPreferencesWhereUniqueInput
  }


  /**
   * UserPreferences updateMany
   */
  export type UserPreferencesUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserPreferences.
     */
    data: XOR<UserPreferencesUpdateManyMutationInput, UserPreferencesUncheckedUpdateManyInput>
    /**
     * Filter which UserPreferences to update
     */
    where?: UserPreferencesWhereInput
  }


  /**
   * UserPreferences upsert
   */
  export type UserPreferencesUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * The filter to search for the UserPreferences to update in case it exists.
     */
    where: UserPreferencesWhereUniqueInput
    /**
     * In case the UserPreferences found by the `where` argument doesn't exist, create a new UserPreferences with this data.
     */
    create: XOR<UserPreferencesCreateInput, UserPreferencesUncheckedCreateInput>
    /**
     * In case the UserPreferences was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserPreferencesUpdateInput, UserPreferencesUncheckedUpdateInput>
  }


  /**
   * UserPreferences delete
   */
  export type UserPreferencesDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * Filter which UserPreferences to delete.
     */
    where: UserPreferencesWhereUniqueInput
  }


  /**
   * UserPreferences deleteMany
   */
  export type UserPreferencesDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPreferences to delete
     */
    where?: UserPreferencesWhereInput
  }


  /**
   * UserPreferences without action
   */
  export type UserPreferencesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPreferencesInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ApiServerScalarFieldEnum: {
    id: 'id',
    name: 'name',
    ownerId: 'ownerId',
    apiKey: 'apiKey',
    activeModules: 'activeModules',
    createdAt: 'createdAt'
  };

  export type ApiServerScalarFieldEnum = (typeof ApiServerScalarFieldEnum)[keyof typeof ApiServerScalarFieldEnum]


  export const ActionLogScalarFieldEnum: {
    id: 'id',
    serverId: 'serverId',
    initiatorUserId: 'initiatorUserId',
    targetUserId: 'targetUserId',
    type: 'type',
    details: 'details',
    isRevertable: 'isRevertable',
    revertedAt: 'revertedAt',
    revertedBy: 'revertedBy',
    createdAt: 'createdAt'
  };

  export type ActionLogScalarFieldEnum = (typeof ActionLogScalarFieldEnum)[keyof typeof ActionLogScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    serverId: 'serverId',
    discordId: 'discordId',
    username: 'username',
    balance: 'balance',
    xp: 'xp',
    level: 'level',
    dailyStreak: 'dailyStreak',
    lastDaily: 'lastDaily',
    hasReceivedWelcomeShipping: 'hasReceivedWelcomeShipping',
    lastCoinflip: 'lastCoinflip',
    coinflipPlaysToday: 'coinflipPlaysToday',
    coinflipWinStreak: 'coinflipWinStreak',
    xpBonusPerRicarica: 'xpBonusPerRicarica',
    costoSpedizioneItalia: 'costoSpedizioneItalia',
    costoSpedizioneEuropa: 'costoSpedizioneEuropa',
    scontoBonusRicarica: 'scontoBonusRicarica',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const TransactionScalarFieldEnum: {
    id: 'id',
    serverId: 'serverId',
    userId: 'userId',
    type: 'type',
    amount: 'amount',
    description: 'description',
    networkId: 'networkId',
    baseAmount: 'baseAmount',
    createdAt: 'createdAt'
  };

  export type TransactionScalarFieldEnum = (typeof TransactionScalarFieldEnum)[keyof typeof TransactionScalarFieldEnum]


  export const ReferralCodeScalarFieldEnum: {
    id: 'id',
    serverId: 'serverId',
    code: 'code',
    ownerId: 'ownerId',
    createdAt: 'createdAt'
  };

  export type ReferralCodeScalarFieldEnum = (typeof ReferralCodeScalarFieldEnum)[keyof typeof ReferralCodeScalarFieldEnum]


  export const ReferredUserScalarFieldEnum: {
    id: 'id',
    serverId: 'serverId',
    userId: 'userId',
    referredByCode: 'referredByCode',
    referralBonusGiven: 'referralBonusGiven',
    createdAt: 'createdAt'
  };

  export type ReferredUserScalarFieldEnum = (typeof ReferredUserScalarFieldEnum)[keyof typeof ReferredUserScalarFieldEnum]


  export const NetworkScalarFieldEnum: {
    id: 'id',
    serverId: 'serverId',
    name: 'name',
    leaderId: 'leaderId',
    bankBalance: 'bankBalance',
    level: 'level',
    roleId: 'roleId',
    logChannelId: 'logChannelId',
    status: 'status',
    disbandRequestAt: 'disbandRequestAt'
  };

  export type NetworkScalarFieldEnum = (typeof NetworkScalarFieldEnum)[keyof typeof NetworkScalarFieldEnum]


  export const NetworkMemberScalarFieldEnum: {
    networkId: 'networkId',
    userId: 'userId',
    joinDate: 'joinDate'
  };

  export type NetworkMemberScalarFieldEnum = (typeof NetworkMemberScalarFieldEnum)[keyof typeof NetworkMemberScalarFieldEnum]


  export const DailyStatsScalarFieldEnum: {
    id: 'id',
    serverId: 'serverId',
    date: 'date',
    totalCredits: 'totalCredits',
    totalUsers: 'totalUsers',
    totalReferrals: 'totalReferrals',
    netBalance: 'netBalance',
    newUsers: 'newUsers',
    newReferrals: 'newReferrals'
  };

  export type DailyStatsScalarFieldEnum = (typeof DailyStatsScalarFieldEnum)[keyof typeof DailyStatsScalarFieldEnum]


  export const ShippingOrderScalarFieldEnum: {
    id: 'id',
    serverId: 'serverId',
    userId: 'userId',
    externalOrderId: 'externalOrderId',
    status: 'status',
    senderName: 'senderName',
    senderAddress: 'senderAddress',
    senderAddress2: 'senderAddress2',
    senderZipcode: 'senderZipcode',
    senderCity: 'senderCity',
    senderPhone: 'senderPhone',
    senderCountry: 'senderCountry',
    recipientName: 'recipientName',
    recipientAddress: 'recipientAddress',
    recipientAddress2: 'recipientAddress2',
    recipientZipcode: 'recipientZipcode',
    recipientCity: 'recipientCity',
    recipientPhone: 'recipientPhone',
    recipientCountry: 'recipientCountry',
    carrier: 'carrier',
    weight: 'weight',
    formatLabel: 'formatLabel',
    trackingId: 'trackingId',
    trackingUrl: 'trackingUrl',
    labelUrl: 'labelUrl',
    createdAt: 'createdAt',
    processedAt: 'processedAt',
    cost: 'cost'
  };

  export type ShippingOrderScalarFieldEnum = (typeof ShippingOrderScalarFieldEnum)[keyof typeof ShippingOrderScalarFieldEnum]


  export const RechargeRequestScalarFieldEnum: {
    id: 'id',
    serverId: 'serverId',
    userId: 'userId',
    amount: 'amount',
    status: 'status',
    requestMessage: 'requestMessage',
    reviewedByUserId: 'reviewedByUserId',
    reviewMessage: 'reviewMessage',
    reviewedAt: 'reviewedAt',
    notificationSent: 'notificationSent',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RechargeRequestScalarFieldEnum = (typeof RechargeRequestScalarFieldEnum)[keyof typeof RechargeRequestScalarFieldEnum]


  export const UserPreferencesScalarFieldEnum: {
    id: 'id',
    serverId: 'serverId',
    userId: 'userId',
    notifyOrderStatus: 'notifyOrderStatus',
    notifyCredits: 'notifyCredits',
    notifyRechargeStatus: 'notifyRechargeStatus',
    defaultCarrier: 'defaultCarrier',
    defaultLabelFormat: 'defaultLabelFormat',
    language: 'language',
    theme: 'theme',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserPreferencesScalarFieldEnum = (typeof UserPreferencesScalarFieldEnum)[keyof typeof UserPreferencesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Deep Input Types
   */


  export type ApiServerWhereInput = {
    AND?: Enumerable<ApiServerWhereInput>
    OR?: Enumerable<ApiServerWhereInput>
    NOT?: Enumerable<ApiServerWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    ownerId?: StringFilter | string
    apiKey?: StringFilter | string
    activeModules?: StringNullableListFilter
    createdAt?: DateTimeFilter | Date | string
    actionLogs?: ActionLogListRelationFilter
    networks?: NetworkListRelationFilter
    transactions?: TransactionListRelationFilter
    users?: UserListRelationFilter
  }

  export type ApiServerOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    ownerId?: SortOrder
    apiKey?: SortOrder
    activeModules?: SortOrder
    createdAt?: SortOrder
    actionLogs?: ActionLogOrderByRelationAggregateInput
    networks?: NetworkOrderByRelationAggregateInput
    transactions?: TransactionOrderByRelationAggregateInput
    users?: UserOrderByRelationAggregateInput
  }

  export type ApiServerWhereUniqueInput = {
    id?: string
    apiKey?: string
  }

  export type ApiServerOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    ownerId?: SortOrder
    apiKey?: SortOrder
    activeModules?: SortOrder
    createdAt?: SortOrder
    _count?: ApiServerCountOrderByAggregateInput
    _max?: ApiServerMaxOrderByAggregateInput
    _min?: ApiServerMinOrderByAggregateInput
  }

  export type ApiServerScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ApiServerScalarWhereWithAggregatesInput>
    OR?: Enumerable<ApiServerScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ApiServerScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    ownerId?: StringWithAggregatesFilter | string
    apiKey?: StringWithAggregatesFilter | string
    activeModules?: StringNullableListFilter
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ActionLogWhereInput = {
    AND?: Enumerable<ActionLogWhereInput>
    OR?: Enumerable<ActionLogWhereInput>
    NOT?: Enumerable<ActionLogWhereInput>
    id?: StringFilter | string
    serverId?: StringFilter | string
    initiatorUserId?: StringNullableFilter | string | null
    targetUserId?: StringNullableFilter | string | null
    type?: StringFilter | string
    details?: JsonFilter
    isRevertable?: BoolFilter | boolean
    revertedAt?: DateTimeNullableFilter | Date | string | null
    revertedBy?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    initiatorUser?: XOR<UserRelationFilter, UserWhereInput> | null
    server?: XOR<ApiServerRelationFilter, ApiServerWhereInput>
    targetUser?: XOR<UserRelationFilter, UserWhereInput> | null
  }

  export type ActionLogOrderByWithRelationInput = {
    id?: SortOrder
    serverId?: SortOrder
    initiatorUserId?: SortOrderInput | SortOrder
    targetUserId?: SortOrderInput | SortOrder
    type?: SortOrder
    details?: SortOrder
    isRevertable?: SortOrder
    revertedAt?: SortOrderInput | SortOrder
    revertedBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    initiatorUser?: UserOrderByWithRelationInput
    server?: ApiServerOrderByWithRelationInput
    targetUser?: UserOrderByWithRelationInput
  }

  export type ActionLogWhereUniqueInput = {
    id?: string
  }

  export type ActionLogOrderByWithAggregationInput = {
    id?: SortOrder
    serverId?: SortOrder
    initiatorUserId?: SortOrderInput | SortOrder
    targetUserId?: SortOrderInput | SortOrder
    type?: SortOrder
    details?: SortOrder
    isRevertable?: SortOrder
    revertedAt?: SortOrderInput | SortOrder
    revertedBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ActionLogCountOrderByAggregateInput
    _max?: ActionLogMaxOrderByAggregateInput
    _min?: ActionLogMinOrderByAggregateInput
  }

  export type ActionLogScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ActionLogScalarWhereWithAggregatesInput>
    OR?: Enumerable<ActionLogScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ActionLogScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    serverId?: StringWithAggregatesFilter | string
    initiatorUserId?: StringNullableWithAggregatesFilter | string | null
    targetUserId?: StringNullableWithAggregatesFilter | string | null
    type?: StringWithAggregatesFilter | string
    details?: JsonWithAggregatesFilter
    isRevertable?: BoolWithAggregatesFilter | boolean
    revertedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    revertedBy?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    serverId?: StringFilter | string
    discordId?: StringFilter | string
    username?: StringFilter | string
    balance?: FloatFilter | number
    xp?: IntFilter | number
    level?: IntFilter | number
    dailyStreak?: IntFilter | number
    lastDaily?: DateTimeNullableFilter | Date | string | null
    hasReceivedWelcomeShipping?: BoolFilter | boolean
    lastCoinflip?: DateTimeNullableFilter | Date | string | null
    coinflipPlaysToday?: IntFilter | number
    coinflipWinStreak?: IntFilter | number
    xpBonusPerRicarica?: FloatFilter | number
    costoSpedizioneItalia?: FloatFilter | number
    costoSpedizioneEuropa?: FloatFilter | number
    scontoBonusRicarica?: FloatFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    initiatedActions?: ActionLogListRelationFilter
    targetedActions?: ActionLogListRelationFilter
    networkMember?: XOR<NetworkMemberRelationFilter, NetworkMemberWhereInput> | null
    referralCodes?: ReferralCodeListRelationFilter
    referredUsers?: ReferredUserListRelationFilter
    shippingOrders?: ShippingOrderListRelationFilter
    transactions?: TransactionListRelationFilter
    rechargeRequests?: RechargeRequestListRelationFilter
    preferences?: XOR<UserPreferencesRelationFilter, UserPreferencesWhereInput> | null
    server?: XOR<ApiServerRelationFilter, ApiServerWhereInput>
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    serverId?: SortOrder
    discordId?: SortOrder
    username?: SortOrder
    balance?: SortOrder
    xp?: SortOrder
    level?: SortOrder
    dailyStreak?: SortOrder
    lastDaily?: SortOrderInput | SortOrder
    hasReceivedWelcomeShipping?: SortOrder
    lastCoinflip?: SortOrderInput | SortOrder
    coinflipPlaysToday?: SortOrder
    coinflipWinStreak?: SortOrder
    xpBonusPerRicarica?: SortOrder
    costoSpedizioneItalia?: SortOrder
    costoSpedizioneEuropa?: SortOrder
    scontoBonusRicarica?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    initiatedActions?: ActionLogOrderByRelationAggregateInput
    targetedActions?: ActionLogOrderByRelationAggregateInput
    networkMember?: NetworkMemberOrderByWithRelationInput
    referralCodes?: ReferralCodeOrderByRelationAggregateInput
    referredUsers?: ReferredUserOrderByRelationAggregateInput
    shippingOrders?: ShippingOrderOrderByRelationAggregateInput
    transactions?: TransactionOrderByRelationAggregateInput
    rechargeRequests?: RechargeRequestOrderByRelationAggregateInput
    preferences?: UserPreferencesOrderByWithRelationInput
    server?: ApiServerOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = {
    id?: string
    serverId_discordId?: UserServerIdDiscordIdCompoundUniqueInput
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    serverId?: SortOrder
    discordId?: SortOrder
    username?: SortOrder
    balance?: SortOrder
    xp?: SortOrder
    level?: SortOrder
    dailyStreak?: SortOrder
    lastDaily?: SortOrderInput | SortOrder
    hasReceivedWelcomeShipping?: SortOrder
    lastCoinflip?: SortOrderInput | SortOrder
    coinflipPlaysToday?: SortOrder
    coinflipWinStreak?: SortOrder
    xpBonusPerRicarica?: SortOrder
    costoSpedizioneItalia?: SortOrder
    costoSpedizioneEuropa?: SortOrder
    scontoBonusRicarica?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    serverId?: StringWithAggregatesFilter | string
    discordId?: StringWithAggregatesFilter | string
    username?: StringWithAggregatesFilter | string
    balance?: FloatWithAggregatesFilter | number
    xp?: IntWithAggregatesFilter | number
    level?: IntWithAggregatesFilter | number
    dailyStreak?: IntWithAggregatesFilter | number
    lastDaily?: DateTimeNullableWithAggregatesFilter | Date | string | null
    hasReceivedWelcomeShipping?: BoolWithAggregatesFilter | boolean
    lastCoinflip?: DateTimeNullableWithAggregatesFilter | Date | string | null
    coinflipPlaysToday?: IntWithAggregatesFilter | number
    coinflipWinStreak?: IntWithAggregatesFilter | number
    xpBonusPerRicarica?: FloatWithAggregatesFilter | number
    costoSpedizioneItalia?: FloatWithAggregatesFilter | number
    costoSpedizioneEuropa?: FloatWithAggregatesFilter | number
    scontoBonusRicarica?: FloatWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TransactionWhereInput = {
    AND?: Enumerable<TransactionWhereInput>
    OR?: Enumerable<TransactionWhereInput>
    NOT?: Enumerable<TransactionWhereInput>
    id?: StringFilter | string
    serverId?: StringFilter | string
    userId?: StringFilter | string
    type?: StringFilter | string
    amount?: FloatFilter | number
    description?: StringFilter | string
    networkId?: StringNullableFilter | string | null
    baseAmount?: FloatNullableFilter | number | null
    createdAt?: DateTimeFilter | Date | string
    server?: XOR<ApiServerRelationFilter, ApiServerWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type TransactionOrderByWithRelationInput = {
    id?: SortOrder
    serverId?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    networkId?: SortOrderInput | SortOrder
    baseAmount?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    server?: ApiServerOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type TransactionWhereUniqueInput = {
    id?: string
  }

  export type TransactionOrderByWithAggregationInput = {
    id?: SortOrder
    serverId?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    networkId?: SortOrderInput | SortOrder
    baseAmount?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: TransactionCountOrderByAggregateInput
    _avg?: TransactionAvgOrderByAggregateInput
    _max?: TransactionMaxOrderByAggregateInput
    _min?: TransactionMinOrderByAggregateInput
    _sum?: TransactionSumOrderByAggregateInput
  }

  export type TransactionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TransactionScalarWhereWithAggregatesInput>
    OR?: Enumerable<TransactionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TransactionScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    serverId?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    type?: StringWithAggregatesFilter | string
    amount?: FloatWithAggregatesFilter | number
    description?: StringWithAggregatesFilter | string
    networkId?: StringNullableWithAggregatesFilter | string | null
    baseAmount?: FloatNullableWithAggregatesFilter | number | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ReferralCodeWhereInput = {
    AND?: Enumerable<ReferralCodeWhereInput>
    OR?: Enumerable<ReferralCodeWhereInput>
    NOT?: Enumerable<ReferralCodeWhereInput>
    id?: StringFilter | string
    serverId?: StringFilter | string
    code?: StringFilter | string
    ownerId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    owner?: XOR<UserRelationFilter, UserWhereInput>
    referred?: ReferredUserListRelationFilter
  }

  export type ReferralCodeOrderByWithRelationInput = {
    id?: SortOrder
    serverId?: SortOrder
    code?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    owner?: UserOrderByWithRelationInput
    referred?: ReferredUserOrderByRelationAggregateInput
  }

  export type ReferralCodeWhereUniqueInput = {
    id?: string
    serverId_code?: ReferralCodeServerIdCodeCompoundUniqueInput
  }

  export type ReferralCodeOrderByWithAggregationInput = {
    id?: SortOrder
    serverId?: SortOrder
    code?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    _count?: ReferralCodeCountOrderByAggregateInput
    _max?: ReferralCodeMaxOrderByAggregateInput
    _min?: ReferralCodeMinOrderByAggregateInput
  }

  export type ReferralCodeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ReferralCodeScalarWhereWithAggregatesInput>
    OR?: Enumerable<ReferralCodeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ReferralCodeScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    serverId?: StringWithAggregatesFilter | string
    code?: StringWithAggregatesFilter | string
    ownerId?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ReferredUserWhereInput = {
    AND?: Enumerable<ReferredUserWhereInput>
    OR?: Enumerable<ReferredUserWhereInput>
    NOT?: Enumerable<ReferredUserWhereInput>
    id?: StringFilter | string
    serverId?: StringFilter | string
    userId?: StringFilter | string
    referredByCode?: StringFilter | string
    referralBonusGiven?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    referralCode?: XOR<ReferralCodeRelationFilter, ReferralCodeWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ReferredUserOrderByWithRelationInput = {
    id?: SortOrder
    serverId?: SortOrder
    userId?: SortOrder
    referredByCode?: SortOrder
    referralBonusGiven?: SortOrder
    createdAt?: SortOrder
    referralCode?: ReferralCodeOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ReferredUserWhereUniqueInput = {
    id?: string
    serverId_userId?: ReferredUserServerIdUserIdCompoundUniqueInput
  }

  export type ReferredUserOrderByWithAggregationInput = {
    id?: SortOrder
    serverId?: SortOrder
    userId?: SortOrder
    referredByCode?: SortOrder
    referralBonusGiven?: SortOrder
    createdAt?: SortOrder
    _count?: ReferredUserCountOrderByAggregateInput
    _max?: ReferredUserMaxOrderByAggregateInput
    _min?: ReferredUserMinOrderByAggregateInput
  }

  export type ReferredUserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ReferredUserScalarWhereWithAggregatesInput>
    OR?: Enumerable<ReferredUserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ReferredUserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    serverId?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    referredByCode?: StringWithAggregatesFilter | string
    referralBonusGiven?: BoolWithAggregatesFilter | boolean
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type NetworkWhereInput = {
    AND?: Enumerable<NetworkWhereInput>
    OR?: Enumerable<NetworkWhereInput>
    NOT?: Enumerable<NetworkWhereInput>
    id?: StringFilter | string
    serverId?: StringFilter | string
    name?: StringFilter | string
    leaderId?: StringFilter | string
    bankBalance?: FloatFilter | number
    level?: IntFilter | number
    roleId?: StringNullableFilter | string | null
    logChannelId?: StringNullableFilter | string | null
    status?: StringFilter | string
    disbandRequestAt?: DateTimeNullableFilter | Date | string | null
    server?: XOR<ApiServerRelationFilter, ApiServerWhereInput>
    members?: NetworkMemberListRelationFilter
  }

  export type NetworkOrderByWithRelationInput = {
    id?: SortOrder
    serverId?: SortOrder
    name?: SortOrder
    leaderId?: SortOrder
    bankBalance?: SortOrder
    level?: SortOrder
    roleId?: SortOrderInput | SortOrder
    logChannelId?: SortOrderInput | SortOrder
    status?: SortOrder
    disbandRequestAt?: SortOrderInput | SortOrder
    server?: ApiServerOrderByWithRelationInput
    members?: NetworkMemberOrderByRelationAggregateInput
  }

  export type NetworkWhereUniqueInput = {
    id?: string
    serverId_name?: NetworkServerIdNameCompoundUniqueInput
  }

  export type NetworkOrderByWithAggregationInput = {
    id?: SortOrder
    serverId?: SortOrder
    name?: SortOrder
    leaderId?: SortOrder
    bankBalance?: SortOrder
    level?: SortOrder
    roleId?: SortOrderInput | SortOrder
    logChannelId?: SortOrderInput | SortOrder
    status?: SortOrder
    disbandRequestAt?: SortOrderInput | SortOrder
    _count?: NetworkCountOrderByAggregateInput
    _avg?: NetworkAvgOrderByAggregateInput
    _max?: NetworkMaxOrderByAggregateInput
    _min?: NetworkMinOrderByAggregateInput
    _sum?: NetworkSumOrderByAggregateInput
  }

  export type NetworkScalarWhereWithAggregatesInput = {
    AND?: Enumerable<NetworkScalarWhereWithAggregatesInput>
    OR?: Enumerable<NetworkScalarWhereWithAggregatesInput>
    NOT?: Enumerable<NetworkScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    serverId?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    leaderId?: StringWithAggregatesFilter | string
    bankBalance?: FloatWithAggregatesFilter | number
    level?: IntWithAggregatesFilter | number
    roleId?: StringNullableWithAggregatesFilter | string | null
    logChannelId?: StringNullableWithAggregatesFilter | string | null
    status?: StringWithAggregatesFilter | string
    disbandRequestAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type NetworkMemberWhereInput = {
    AND?: Enumerable<NetworkMemberWhereInput>
    OR?: Enumerable<NetworkMemberWhereInput>
    NOT?: Enumerable<NetworkMemberWhereInput>
    networkId?: StringFilter | string
    userId?: StringFilter | string
    joinDate?: DateTimeFilter | Date | string
    network?: XOR<NetworkRelationFilter, NetworkWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type NetworkMemberOrderByWithRelationInput = {
    networkId?: SortOrder
    userId?: SortOrder
    joinDate?: SortOrder
    network?: NetworkOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type NetworkMemberWhereUniqueInput = {
    userId?: string
    networkId_userId?: NetworkMemberNetworkIdUserIdCompoundUniqueInput
  }

  export type NetworkMemberOrderByWithAggregationInput = {
    networkId?: SortOrder
    userId?: SortOrder
    joinDate?: SortOrder
    _count?: NetworkMemberCountOrderByAggregateInput
    _max?: NetworkMemberMaxOrderByAggregateInput
    _min?: NetworkMemberMinOrderByAggregateInput
  }

  export type NetworkMemberScalarWhereWithAggregatesInput = {
    AND?: Enumerable<NetworkMemberScalarWhereWithAggregatesInput>
    OR?: Enumerable<NetworkMemberScalarWhereWithAggregatesInput>
    NOT?: Enumerable<NetworkMemberScalarWhereWithAggregatesInput>
    networkId?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    joinDate?: DateTimeWithAggregatesFilter | Date | string
  }

  export type DailyStatsWhereInput = {
    AND?: Enumerable<DailyStatsWhereInput>
    OR?: Enumerable<DailyStatsWhereInput>
    NOT?: Enumerable<DailyStatsWhereInput>
    id?: StringFilter | string
    serverId?: StringFilter | string
    date?: DateTimeFilter | Date | string
    totalCredits?: FloatFilter | number
    totalUsers?: IntFilter | number
    totalReferrals?: IntFilter | number
    netBalance?: FloatFilter | number
    newUsers?: IntFilter | number
    newReferrals?: IntFilter | number
  }

  export type DailyStatsOrderByWithRelationInput = {
    id?: SortOrder
    serverId?: SortOrder
    date?: SortOrder
    totalCredits?: SortOrder
    totalUsers?: SortOrder
    totalReferrals?: SortOrder
    netBalance?: SortOrder
    newUsers?: SortOrder
    newReferrals?: SortOrder
  }

  export type DailyStatsWhereUniqueInput = {
    id?: string
    serverId_date?: DailyStatsServerIdDateCompoundUniqueInput
  }

  export type DailyStatsOrderByWithAggregationInput = {
    id?: SortOrder
    serverId?: SortOrder
    date?: SortOrder
    totalCredits?: SortOrder
    totalUsers?: SortOrder
    totalReferrals?: SortOrder
    netBalance?: SortOrder
    newUsers?: SortOrder
    newReferrals?: SortOrder
    _count?: DailyStatsCountOrderByAggregateInput
    _avg?: DailyStatsAvgOrderByAggregateInput
    _max?: DailyStatsMaxOrderByAggregateInput
    _min?: DailyStatsMinOrderByAggregateInput
    _sum?: DailyStatsSumOrderByAggregateInput
  }

  export type DailyStatsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DailyStatsScalarWhereWithAggregatesInput>
    OR?: Enumerable<DailyStatsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DailyStatsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    serverId?: StringWithAggregatesFilter | string
    date?: DateTimeWithAggregatesFilter | Date | string
    totalCredits?: FloatWithAggregatesFilter | number
    totalUsers?: IntWithAggregatesFilter | number
    totalReferrals?: IntWithAggregatesFilter | number
    netBalance?: FloatWithAggregatesFilter | number
    newUsers?: IntWithAggregatesFilter | number
    newReferrals?: IntWithAggregatesFilter | number
  }

  export type ShippingOrderWhereInput = {
    AND?: Enumerable<ShippingOrderWhereInput>
    OR?: Enumerable<ShippingOrderWhereInput>
    NOT?: Enumerable<ShippingOrderWhereInput>
    id?: StringFilter | string
    serverId?: StringFilter | string
    userId?: StringFilter | string
    externalOrderId?: StringFilter | string
    status?: StringFilter | string
    senderName?: StringFilter | string
    senderAddress?: StringFilter | string
    senderAddress2?: StringNullableFilter | string | null
    senderZipcode?: StringFilter | string
    senderCity?: StringFilter | string
    senderPhone?: StringFilter | string
    senderCountry?: StringFilter | string
    recipientName?: StringFilter | string
    recipientAddress?: StringFilter | string
    recipientAddress2?: StringNullableFilter | string | null
    recipientZipcode?: StringFilter | string
    recipientCity?: StringFilter | string
    recipientPhone?: StringFilter | string
    recipientCountry?: StringFilter | string
    carrier?: StringFilter | string
    weight?: StringFilter | string
    formatLabel?: IntFilter | number
    trackingId?: StringNullableFilter | string | null
    trackingUrl?: StringNullableFilter | string | null
    labelUrl?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    processedAt?: DateTimeNullableFilter | Date | string | null
    cost?: FloatNullableFilter | number | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ShippingOrderOrderByWithRelationInput = {
    id?: SortOrder
    serverId?: SortOrder
    userId?: SortOrder
    externalOrderId?: SortOrder
    status?: SortOrder
    senderName?: SortOrder
    senderAddress?: SortOrder
    senderAddress2?: SortOrderInput | SortOrder
    senderZipcode?: SortOrder
    senderCity?: SortOrder
    senderPhone?: SortOrder
    senderCountry?: SortOrder
    recipientName?: SortOrder
    recipientAddress?: SortOrder
    recipientAddress2?: SortOrderInput | SortOrder
    recipientZipcode?: SortOrder
    recipientCity?: SortOrder
    recipientPhone?: SortOrder
    recipientCountry?: SortOrder
    carrier?: SortOrder
    weight?: SortOrder
    formatLabel?: SortOrder
    trackingId?: SortOrderInput | SortOrder
    trackingUrl?: SortOrderInput | SortOrder
    labelUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    processedAt?: SortOrderInput | SortOrder
    cost?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ShippingOrderWhereUniqueInput = {
    id?: string
  }

  export type ShippingOrderOrderByWithAggregationInput = {
    id?: SortOrder
    serverId?: SortOrder
    userId?: SortOrder
    externalOrderId?: SortOrder
    status?: SortOrder
    senderName?: SortOrder
    senderAddress?: SortOrder
    senderAddress2?: SortOrderInput | SortOrder
    senderZipcode?: SortOrder
    senderCity?: SortOrder
    senderPhone?: SortOrder
    senderCountry?: SortOrder
    recipientName?: SortOrder
    recipientAddress?: SortOrder
    recipientAddress2?: SortOrderInput | SortOrder
    recipientZipcode?: SortOrder
    recipientCity?: SortOrder
    recipientPhone?: SortOrder
    recipientCountry?: SortOrder
    carrier?: SortOrder
    weight?: SortOrder
    formatLabel?: SortOrder
    trackingId?: SortOrderInput | SortOrder
    trackingUrl?: SortOrderInput | SortOrder
    labelUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    processedAt?: SortOrderInput | SortOrder
    cost?: SortOrderInput | SortOrder
    _count?: ShippingOrderCountOrderByAggregateInput
    _avg?: ShippingOrderAvgOrderByAggregateInput
    _max?: ShippingOrderMaxOrderByAggregateInput
    _min?: ShippingOrderMinOrderByAggregateInput
    _sum?: ShippingOrderSumOrderByAggregateInput
  }

  export type ShippingOrderScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ShippingOrderScalarWhereWithAggregatesInput>
    OR?: Enumerable<ShippingOrderScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ShippingOrderScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    serverId?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    externalOrderId?: StringWithAggregatesFilter | string
    status?: StringWithAggregatesFilter | string
    senderName?: StringWithAggregatesFilter | string
    senderAddress?: StringWithAggregatesFilter | string
    senderAddress2?: StringNullableWithAggregatesFilter | string | null
    senderZipcode?: StringWithAggregatesFilter | string
    senderCity?: StringWithAggregatesFilter | string
    senderPhone?: StringWithAggregatesFilter | string
    senderCountry?: StringWithAggregatesFilter | string
    recipientName?: StringWithAggregatesFilter | string
    recipientAddress?: StringWithAggregatesFilter | string
    recipientAddress2?: StringNullableWithAggregatesFilter | string | null
    recipientZipcode?: StringWithAggregatesFilter | string
    recipientCity?: StringWithAggregatesFilter | string
    recipientPhone?: StringWithAggregatesFilter | string
    recipientCountry?: StringWithAggregatesFilter | string
    carrier?: StringWithAggregatesFilter | string
    weight?: StringWithAggregatesFilter | string
    formatLabel?: IntWithAggregatesFilter | number
    trackingId?: StringNullableWithAggregatesFilter | string | null
    trackingUrl?: StringNullableWithAggregatesFilter | string | null
    labelUrl?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    processedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    cost?: FloatNullableWithAggregatesFilter | number | null
  }

  export type RechargeRequestWhereInput = {
    AND?: Enumerable<RechargeRequestWhereInput>
    OR?: Enumerable<RechargeRequestWhereInput>
    NOT?: Enumerable<RechargeRequestWhereInput>
    id?: StringFilter | string
    serverId?: StringFilter | string
    userId?: StringFilter | string
    amount?: FloatFilter | number
    status?: StringFilter | string
    requestMessage?: StringNullableFilter | string | null
    reviewedByUserId?: StringNullableFilter | string | null
    reviewMessage?: StringNullableFilter | string | null
    reviewedAt?: DateTimeNullableFilter | Date | string | null
    notificationSent?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type RechargeRequestOrderByWithRelationInput = {
    id?: SortOrder
    serverId?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    requestMessage?: SortOrderInput | SortOrder
    reviewedByUserId?: SortOrderInput | SortOrder
    reviewMessage?: SortOrderInput | SortOrder
    reviewedAt?: SortOrderInput | SortOrder
    notificationSent?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type RechargeRequestWhereUniqueInput = {
    id?: string
  }

  export type RechargeRequestOrderByWithAggregationInput = {
    id?: SortOrder
    serverId?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    requestMessage?: SortOrderInput | SortOrder
    reviewedByUserId?: SortOrderInput | SortOrder
    reviewMessage?: SortOrderInput | SortOrder
    reviewedAt?: SortOrderInput | SortOrder
    notificationSent?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RechargeRequestCountOrderByAggregateInput
    _avg?: RechargeRequestAvgOrderByAggregateInput
    _max?: RechargeRequestMaxOrderByAggregateInput
    _min?: RechargeRequestMinOrderByAggregateInput
    _sum?: RechargeRequestSumOrderByAggregateInput
  }

  export type RechargeRequestScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RechargeRequestScalarWhereWithAggregatesInput>
    OR?: Enumerable<RechargeRequestScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RechargeRequestScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    serverId?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    amount?: FloatWithAggregatesFilter | number
    status?: StringWithAggregatesFilter | string
    requestMessage?: StringNullableWithAggregatesFilter | string | null
    reviewedByUserId?: StringNullableWithAggregatesFilter | string | null
    reviewMessage?: StringNullableWithAggregatesFilter | string | null
    reviewedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    notificationSent?: BoolWithAggregatesFilter | boolean
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserPreferencesWhereInput = {
    AND?: Enumerable<UserPreferencesWhereInput>
    OR?: Enumerable<UserPreferencesWhereInput>
    NOT?: Enumerable<UserPreferencesWhereInput>
    id?: StringFilter | string
    serverId?: StringFilter | string
    userId?: StringFilter | string
    notifyOrderStatus?: BoolFilter | boolean
    notifyCredits?: BoolFilter | boolean
    notifyRechargeStatus?: BoolFilter | boolean
    defaultCarrier?: StringNullableFilter | string | null
    defaultLabelFormat?: IntFilter | number
    language?: StringFilter | string
    theme?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserPreferencesOrderByWithRelationInput = {
    id?: SortOrder
    serverId?: SortOrder
    userId?: SortOrder
    notifyOrderStatus?: SortOrder
    notifyCredits?: SortOrder
    notifyRechargeStatus?: SortOrder
    defaultCarrier?: SortOrderInput | SortOrder
    defaultLabelFormat?: SortOrder
    language?: SortOrder
    theme?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserPreferencesWhereUniqueInput = {
    id?: string
    userId?: string
  }

  export type UserPreferencesOrderByWithAggregationInput = {
    id?: SortOrder
    serverId?: SortOrder
    userId?: SortOrder
    notifyOrderStatus?: SortOrder
    notifyCredits?: SortOrder
    notifyRechargeStatus?: SortOrder
    defaultCarrier?: SortOrderInput | SortOrder
    defaultLabelFormat?: SortOrder
    language?: SortOrder
    theme?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserPreferencesCountOrderByAggregateInput
    _avg?: UserPreferencesAvgOrderByAggregateInput
    _max?: UserPreferencesMaxOrderByAggregateInput
    _min?: UserPreferencesMinOrderByAggregateInput
    _sum?: UserPreferencesSumOrderByAggregateInput
  }

  export type UserPreferencesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserPreferencesScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserPreferencesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserPreferencesScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    serverId?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    notifyOrderStatus?: BoolWithAggregatesFilter | boolean
    notifyCredits?: BoolWithAggregatesFilter | boolean
    notifyRechargeStatus?: BoolWithAggregatesFilter | boolean
    defaultCarrier?: StringNullableWithAggregatesFilter | string | null
    defaultLabelFormat?: IntWithAggregatesFilter | number
    language?: StringWithAggregatesFilter | string
    theme?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ApiServerCreateInput = {
    id?: string
    name: string
    ownerId: string
    apiKey: string
    activeModules?: ApiServerCreateactiveModulesInput | Enumerable<string>
    createdAt?: Date | string
    actionLogs?: ActionLogCreateNestedManyWithoutServerInput
    networks?: NetworkCreateNestedManyWithoutServerInput
    transactions?: TransactionCreateNestedManyWithoutServerInput
    users?: UserCreateNestedManyWithoutServerInput
  }

  export type ApiServerUncheckedCreateInput = {
    id?: string
    name: string
    ownerId: string
    apiKey: string
    activeModules?: ApiServerCreateactiveModulesInput | Enumerable<string>
    createdAt?: Date | string
    actionLogs?: ActionLogUncheckedCreateNestedManyWithoutServerInput
    networks?: NetworkUncheckedCreateNestedManyWithoutServerInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutServerInput
    users?: UserUncheckedCreateNestedManyWithoutServerInput
  }

  export type ApiServerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    apiKey?: StringFieldUpdateOperationsInput | string
    activeModules?: ApiServerUpdateactiveModulesInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    actionLogs?: ActionLogUpdateManyWithoutServerNestedInput
    networks?: NetworkUpdateManyWithoutServerNestedInput
    transactions?: TransactionUpdateManyWithoutServerNestedInput
    users?: UserUpdateManyWithoutServerNestedInput
  }

  export type ApiServerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    apiKey?: StringFieldUpdateOperationsInput | string
    activeModules?: ApiServerUpdateactiveModulesInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    actionLogs?: ActionLogUncheckedUpdateManyWithoutServerNestedInput
    networks?: NetworkUncheckedUpdateManyWithoutServerNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutServerNestedInput
    users?: UserUncheckedUpdateManyWithoutServerNestedInput
  }

  export type ApiServerCreateManyInput = {
    id?: string
    name: string
    ownerId: string
    apiKey: string
    activeModules?: ApiServerCreateactiveModulesInput | Enumerable<string>
    createdAt?: Date | string
  }

  export type ApiServerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    apiKey?: StringFieldUpdateOperationsInput | string
    activeModules?: ApiServerUpdateactiveModulesInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApiServerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    apiKey?: StringFieldUpdateOperationsInput | string
    activeModules?: ApiServerUpdateactiveModulesInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActionLogCreateInput = {
    id?: string
    type: string
    details: JsonNullValueInput | InputJsonValue
    isRevertable?: boolean
    revertedAt?: Date | string | null
    revertedBy?: string | null
    createdAt?: Date | string
    initiatorUser?: UserCreateNestedOneWithoutInitiatedActionsInput
    server: ApiServerCreateNestedOneWithoutActionLogsInput
    targetUser?: UserCreateNestedOneWithoutTargetedActionsInput
  }

  export type ActionLogUncheckedCreateInput = {
    id?: string
    serverId: string
    initiatorUserId?: string | null
    targetUserId?: string | null
    type: string
    details: JsonNullValueInput | InputJsonValue
    isRevertable?: boolean
    revertedAt?: Date | string | null
    revertedBy?: string | null
    createdAt?: Date | string
  }

  export type ActionLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    details?: JsonNullValueInput | InputJsonValue
    isRevertable?: BoolFieldUpdateOperationsInput | boolean
    revertedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revertedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initiatorUser?: UserUpdateOneWithoutInitiatedActionsNestedInput
    server?: ApiServerUpdateOneRequiredWithoutActionLogsNestedInput
    targetUser?: UserUpdateOneWithoutTargetedActionsNestedInput
  }

  export type ActionLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    initiatorUserId?: NullableStringFieldUpdateOperationsInput | string | null
    targetUserId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    details?: JsonNullValueInput | InputJsonValue
    isRevertable?: BoolFieldUpdateOperationsInput | boolean
    revertedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revertedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActionLogCreateManyInput = {
    id?: string
    serverId: string
    initiatorUserId?: string | null
    targetUserId?: string | null
    type: string
    details: JsonNullValueInput | InputJsonValue
    isRevertable?: boolean
    revertedAt?: Date | string | null
    revertedBy?: string | null
    createdAt?: Date | string
  }

  export type ActionLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    details?: JsonNullValueInput | InputJsonValue
    isRevertable?: BoolFieldUpdateOperationsInput | boolean
    revertedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revertedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActionLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    initiatorUserId?: NullableStringFieldUpdateOperationsInput | string | null
    targetUserId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    details?: JsonNullValueInput | InputJsonValue
    isRevertable?: BoolFieldUpdateOperationsInput | boolean
    revertedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revertedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id?: string
    discordId: string
    username: string
    balance?: number
    xp?: number
    level?: number
    dailyStreak?: number
    lastDaily?: Date | string | null
    hasReceivedWelcomeShipping?: boolean
    lastCoinflip?: Date | string | null
    coinflipPlaysToday?: number
    coinflipWinStreak?: number
    xpBonusPerRicarica?: number
    costoSpedizioneItalia?: number
    costoSpedizioneEuropa?: number
    scontoBonusRicarica?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    initiatedActions?: ActionLogCreateNestedManyWithoutInitiatorUserInput
    targetedActions?: ActionLogCreateNestedManyWithoutTargetUserInput
    networkMember?: NetworkMemberCreateNestedOneWithoutUserInput
    referralCodes?: ReferralCodeCreateNestedManyWithoutOwnerInput
    referredUsers?: ReferredUserCreateNestedManyWithoutUserInput
    shippingOrders?: ShippingOrderCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    rechargeRequests?: RechargeRequestCreateNestedManyWithoutUserInput
    preferences?: UserPreferencesCreateNestedOneWithoutUserInput
    server: ApiServerCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    serverId: string
    discordId: string
    username: string
    balance?: number
    xp?: number
    level?: number
    dailyStreak?: number
    lastDaily?: Date | string | null
    hasReceivedWelcomeShipping?: boolean
    lastCoinflip?: Date | string | null
    coinflipPlaysToday?: number
    coinflipWinStreak?: number
    xpBonusPerRicarica?: number
    costoSpedizioneItalia?: number
    costoSpedizioneEuropa?: number
    scontoBonusRicarica?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    initiatedActions?: ActionLogUncheckedCreateNestedManyWithoutInitiatorUserInput
    targetedActions?: ActionLogUncheckedCreateNestedManyWithoutTargetUserInput
    networkMember?: NetworkMemberUncheckedCreateNestedOneWithoutUserInput
    referralCodes?: ReferralCodeUncheckedCreateNestedManyWithoutOwnerInput
    referredUsers?: ReferredUserUncheckedCreateNestedManyWithoutUserInput
    shippingOrders?: ShippingOrderUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    rechargeRequests?: RechargeRequestUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferencesUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    discordId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    dailyStreak?: IntFieldUpdateOperationsInput | number
    lastDaily?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasReceivedWelcomeShipping?: BoolFieldUpdateOperationsInput | boolean
    lastCoinflip?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coinflipPlaysToday?: IntFieldUpdateOperationsInput | number
    coinflipWinStreak?: IntFieldUpdateOperationsInput | number
    xpBonusPerRicarica?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneItalia?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneEuropa?: FloatFieldUpdateOperationsInput | number
    scontoBonusRicarica?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initiatedActions?: ActionLogUpdateManyWithoutInitiatorUserNestedInput
    targetedActions?: ActionLogUpdateManyWithoutTargetUserNestedInput
    networkMember?: NetworkMemberUpdateOneWithoutUserNestedInput
    referralCodes?: ReferralCodeUpdateManyWithoutOwnerNestedInput
    referredUsers?: ReferredUserUpdateManyWithoutUserNestedInput
    shippingOrders?: ShippingOrderUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    rechargeRequests?: RechargeRequestUpdateManyWithoutUserNestedInput
    preferences?: UserPreferencesUpdateOneWithoutUserNestedInput
    server?: ApiServerUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    discordId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    dailyStreak?: IntFieldUpdateOperationsInput | number
    lastDaily?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasReceivedWelcomeShipping?: BoolFieldUpdateOperationsInput | boolean
    lastCoinflip?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coinflipPlaysToday?: IntFieldUpdateOperationsInput | number
    coinflipWinStreak?: IntFieldUpdateOperationsInput | number
    xpBonusPerRicarica?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneItalia?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneEuropa?: FloatFieldUpdateOperationsInput | number
    scontoBonusRicarica?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initiatedActions?: ActionLogUncheckedUpdateManyWithoutInitiatorUserNestedInput
    targetedActions?: ActionLogUncheckedUpdateManyWithoutTargetUserNestedInput
    networkMember?: NetworkMemberUncheckedUpdateOneWithoutUserNestedInput
    referralCodes?: ReferralCodeUncheckedUpdateManyWithoutOwnerNestedInput
    referredUsers?: ReferredUserUncheckedUpdateManyWithoutUserNestedInput
    shippingOrders?: ShippingOrderUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    rechargeRequests?: RechargeRequestUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferencesUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    serverId: string
    discordId: string
    username: string
    balance?: number
    xp?: number
    level?: number
    dailyStreak?: number
    lastDaily?: Date | string | null
    hasReceivedWelcomeShipping?: boolean
    lastCoinflip?: Date | string | null
    coinflipPlaysToday?: number
    coinflipWinStreak?: number
    xpBonusPerRicarica?: number
    costoSpedizioneItalia?: number
    costoSpedizioneEuropa?: number
    scontoBonusRicarica?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    discordId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    dailyStreak?: IntFieldUpdateOperationsInput | number
    lastDaily?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasReceivedWelcomeShipping?: BoolFieldUpdateOperationsInput | boolean
    lastCoinflip?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coinflipPlaysToday?: IntFieldUpdateOperationsInput | number
    coinflipWinStreak?: IntFieldUpdateOperationsInput | number
    xpBonusPerRicarica?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneItalia?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneEuropa?: FloatFieldUpdateOperationsInput | number
    scontoBonusRicarica?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    discordId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    dailyStreak?: IntFieldUpdateOperationsInput | number
    lastDaily?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasReceivedWelcomeShipping?: BoolFieldUpdateOperationsInput | boolean
    lastCoinflip?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coinflipPlaysToday?: IntFieldUpdateOperationsInput | number
    coinflipWinStreak?: IntFieldUpdateOperationsInput | number
    xpBonusPerRicarica?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneItalia?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneEuropa?: FloatFieldUpdateOperationsInput | number
    scontoBonusRicarica?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionCreateInput = {
    id?: string
    type: string
    amount: number
    description: string
    networkId?: string | null
    baseAmount?: number | null
    createdAt?: Date | string
    server: ApiServerCreateNestedOneWithoutTransactionsInput
    user: UserCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateInput = {
    id?: string
    serverId: string
    userId: string
    type: string
    amount: number
    description: string
    networkId?: string | null
    baseAmount?: number | null
    createdAt?: Date | string
  }

  export type TransactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    networkId?: NullableStringFieldUpdateOperationsInput | string | null
    baseAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    server?: ApiServerUpdateOneRequiredWithoutTransactionsNestedInput
    user?: UserUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    networkId?: NullableStringFieldUpdateOperationsInput | string | null
    baseAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionCreateManyInput = {
    id?: string
    serverId: string
    userId: string
    type: string
    amount: number
    description: string
    networkId?: string | null
    baseAmount?: number | null
    createdAt?: Date | string
  }

  export type TransactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    networkId?: NullableStringFieldUpdateOperationsInput | string | null
    baseAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    networkId?: NullableStringFieldUpdateOperationsInput | string | null
    baseAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferralCodeCreateInput = {
    id?: string
    serverId: string
    code: string
    createdAt?: Date | string
    owner: UserCreateNestedOneWithoutReferralCodesInput
    referred?: ReferredUserCreateNestedManyWithoutReferralCodeInput
  }

  export type ReferralCodeUncheckedCreateInput = {
    id?: string
    serverId: string
    code: string
    ownerId: string
    createdAt?: Date | string
    referred?: ReferredUserUncheckedCreateNestedManyWithoutReferralCodeInput
  }

  export type ReferralCodeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutReferralCodesNestedInput
    referred?: ReferredUserUpdateManyWithoutReferralCodeNestedInput
  }

  export type ReferralCodeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    referred?: ReferredUserUncheckedUpdateManyWithoutReferralCodeNestedInput
  }

  export type ReferralCodeCreateManyInput = {
    id?: string
    serverId: string
    code: string
    ownerId: string
    createdAt?: Date | string
  }

  export type ReferralCodeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferralCodeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferredUserCreateInput = {
    id?: string
    referralBonusGiven?: boolean
    createdAt?: Date | string
    referralCode: ReferralCodeCreateNestedOneWithoutReferredInput
    user: UserCreateNestedOneWithoutReferredUsersInput
  }

  export type ReferredUserUncheckedCreateInput = {
    id?: string
    serverId: string
    userId: string
    referredByCode: string
    referralBonusGiven?: boolean
    createdAt?: Date | string
  }

  export type ReferredUserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    referralBonusGiven?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    referralCode?: ReferralCodeUpdateOneRequiredWithoutReferredNestedInput
    user?: UserUpdateOneRequiredWithoutReferredUsersNestedInput
  }

  export type ReferredUserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    referredByCode?: StringFieldUpdateOperationsInput | string
    referralBonusGiven?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferredUserCreateManyInput = {
    id?: string
    serverId: string
    userId: string
    referredByCode: string
    referralBonusGiven?: boolean
    createdAt?: Date | string
  }

  export type ReferredUserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    referralBonusGiven?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferredUserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    referredByCode?: StringFieldUpdateOperationsInput | string
    referralBonusGiven?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NetworkCreateInput = {
    id?: string
    name: string
    leaderId: string
    bankBalance?: number
    level?: number
    roleId?: string | null
    logChannelId?: string | null
    status?: string
    disbandRequestAt?: Date | string | null
    server: ApiServerCreateNestedOneWithoutNetworksInput
    members?: NetworkMemberCreateNestedManyWithoutNetworkInput
  }

  export type NetworkUncheckedCreateInput = {
    id?: string
    serverId: string
    name: string
    leaderId: string
    bankBalance?: number
    level?: number
    roleId?: string | null
    logChannelId?: string | null
    status?: string
    disbandRequestAt?: Date | string | null
    members?: NetworkMemberUncheckedCreateNestedManyWithoutNetworkInput
  }

  export type NetworkUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    leaderId?: StringFieldUpdateOperationsInput | string
    bankBalance?: FloatFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    logChannelId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    disbandRequestAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    server?: ApiServerUpdateOneRequiredWithoutNetworksNestedInput
    members?: NetworkMemberUpdateManyWithoutNetworkNestedInput
  }

  export type NetworkUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    leaderId?: StringFieldUpdateOperationsInput | string
    bankBalance?: FloatFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    logChannelId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    disbandRequestAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    members?: NetworkMemberUncheckedUpdateManyWithoutNetworkNestedInput
  }

  export type NetworkCreateManyInput = {
    id?: string
    serverId: string
    name: string
    leaderId: string
    bankBalance?: number
    level?: number
    roleId?: string | null
    logChannelId?: string | null
    status?: string
    disbandRequestAt?: Date | string | null
  }

  export type NetworkUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    leaderId?: StringFieldUpdateOperationsInput | string
    bankBalance?: FloatFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    logChannelId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    disbandRequestAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NetworkUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    leaderId?: StringFieldUpdateOperationsInput | string
    bankBalance?: FloatFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    logChannelId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    disbandRequestAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NetworkMemberCreateInput = {
    joinDate?: Date | string
    network: NetworkCreateNestedOneWithoutMembersInput
    user: UserCreateNestedOneWithoutNetworkMemberInput
  }

  export type NetworkMemberUncheckedCreateInput = {
    networkId: string
    userId: string
    joinDate?: Date | string
  }

  export type NetworkMemberUpdateInput = {
    joinDate?: DateTimeFieldUpdateOperationsInput | Date | string
    network?: NetworkUpdateOneRequiredWithoutMembersNestedInput
    user?: UserUpdateOneRequiredWithoutNetworkMemberNestedInput
  }

  export type NetworkMemberUncheckedUpdateInput = {
    networkId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    joinDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NetworkMemberCreateManyInput = {
    networkId: string
    userId: string
    joinDate?: Date | string
  }

  export type NetworkMemberUpdateManyMutationInput = {
    joinDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NetworkMemberUncheckedUpdateManyInput = {
    networkId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    joinDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyStatsCreateInput = {
    id?: string
    serverId: string
    date: Date | string
    totalCredits: number
    totalUsers: number
    totalReferrals: number
    netBalance: number
    newUsers: number
    newReferrals: number
  }

  export type DailyStatsUncheckedCreateInput = {
    id?: string
    serverId: string
    date: Date | string
    totalCredits: number
    totalUsers: number
    totalReferrals: number
    netBalance: number
    newUsers: number
    newReferrals: number
  }

  export type DailyStatsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    totalCredits?: FloatFieldUpdateOperationsInput | number
    totalUsers?: IntFieldUpdateOperationsInput | number
    totalReferrals?: IntFieldUpdateOperationsInput | number
    netBalance?: FloatFieldUpdateOperationsInput | number
    newUsers?: IntFieldUpdateOperationsInput | number
    newReferrals?: IntFieldUpdateOperationsInput | number
  }

  export type DailyStatsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    totalCredits?: FloatFieldUpdateOperationsInput | number
    totalUsers?: IntFieldUpdateOperationsInput | number
    totalReferrals?: IntFieldUpdateOperationsInput | number
    netBalance?: FloatFieldUpdateOperationsInput | number
    newUsers?: IntFieldUpdateOperationsInput | number
    newReferrals?: IntFieldUpdateOperationsInput | number
  }

  export type DailyStatsCreateManyInput = {
    id?: string
    serverId: string
    date: Date | string
    totalCredits: number
    totalUsers: number
    totalReferrals: number
    netBalance: number
    newUsers: number
    newReferrals: number
  }

  export type DailyStatsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    totalCredits?: FloatFieldUpdateOperationsInput | number
    totalUsers?: IntFieldUpdateOperationsInput | number
    totalReferrals?: IntFieldUpdateOperationsInput | number
    netBalance?: FloatFieldUpdateOperationsInput | number
    newUsers?: IntFieldUpdateOperationsInput | number
    newReferrals?: IntFieldUpdateOperationsInput | number
  }

  export type DailyStatsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    totalCredits?: FloatFieldUpdateOperationsInput | number
    totalUsers?: IntFieldUpdateOperationsInput | number
    totalReferrals?: IntFieldUpdateOperationsInput | number
    netBalance?: FloatFieldUpdateOperationsInput | number
    newUsers?: IntFieldUpdateOperationsInput | number
    newReferrals?: IntFieldUpdateOperationsInput | number
  }

  export type ShippingOrderCreateInput = {
    id?: string
    serverId: string
    externalOrderId: string
    status?: string
    senderName: string
    senderAddress: string
    senderAddress2?: string | null
    senderZipcode: string
    senderCity: string
    senderPhone: string
    senderCountry: string
    recipientName: string
    recipientAddress: string
    recipientAddress2?: string | null
    recipientZipcode: string
    recipientCity: string
    recipientPhone: string
    recipientCountry: string
    carrier: string
    weight: string
    formatLabel?: number
    trackingId?: string | null
    trackingUrl?: string | null
    labelUrl?: string | null
    createdAt?: Date | string
    processedAt?: Date | string | null
    cost?: number | null
    user: UserCreateNestedOneWithoutShippingOrdersInput
  }

  export type ShippingOrderUncheckedCreateInput = {
    id?: string
    serverId: string
    userId: string
    externalOrderId: string
    status?: string
    senderName: string
    senderAddress: string
    senderAddress2?: string | null
    senderZipcode: string
    senderCity: string
    senderPhone: string
    senderCountry: string
    recipientName: string
    recipientAddress: string
    recipientAddress2?: string | null
    recipientZipcode: string
    recipientCity: string
    recipientPhone: string
    recipientCountry: string
    carrier: string
    weight: string
    formatLabel?: number
    trackingId?: string | null
    trackingUrl?: string | null
    labelUrl?: string | null
    createdAt?: Date | string
    processedAt?: Date | string | null
    cost?: number | null
  }

  export type ShippingOrderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    externalOrderId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    senderName?: StringFieldUpdateOperationsInput | string
    senderAddress?: StringFieldUpdateOperationsInput | string
    senderAddress2?: NullableStringFieldUpdateOperationsInput | string | null
    senderZipcode?: StringFieldUpdateOperationsInput | string
    senderCity?: StringFieldUpdateOperationsInput | string
    senderPhone?: StringFieldUpdateOperationsInput | string
    senderCountry?: StringFieldUpdateOperationsInput | string
    recipientName?: StringFieldUpdateOperationsInput | string
    recipientAddress?: StringFieldUpdateOperationsInput | string
    recipientAddress2?: NullableStringFieldUpdateOperationsInput | string | null
    recipientZipcode?: StringFieldUpdateOperationsInput | string
    recipientCity?: StringFieldUpdateOperationsInput | string
    recipientPhone?: StringFieldUpdateOperationsInput | string
    recipientCountry?: StringFieldUpdateOperationsInput | string
    carrier?: StringFieldUpdateOperationsInput | string
    weight?: StringFieldUpdateOperationsInput | string
    formatLabel?: IntFieldUpdateOperationsInput | number
    trackingId?: NullableStringFieldUpdateOperationsInput | string | null
    trackingUrl?: NullableStringFieldUpdateOperationsInput | string | null
    labelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutShippingOrdersNestedInput
  }

  export type ShippingOrderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    externalOrderId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    senderName?: StringFieldUpdateOperationsInput | string
    senderAddress?: StringFieldUpdateOperationsInput | string
    senderAddress2?: NullableStringFieldUpdateOperationsInput | string | null
    senderZipcode?: StringFieldUpdateOperationsInput | string
    senderCity?: StringFieldUpdateOperationsInput | string
    senderPhone?: StringFieldUpdateOperationsInput | string
    senderCountry?: StringFieldUpdateOperationsInput | string
    recipientName?: StringFieldUpdateOperationsInput | string
    recipientAddress?: StringFieldUpdateOperationsInput | string
    recipientAddress2?: NullableStringFieldUpdateOperationsInput | string | null
    recipientZipcode?: StringFieldUpdateOperationsInput | string
    recipientCity?: StringFieldUpdateOperationsInput | string
    recipientPhone?: StringFieldUpdateOperationsInput | string
    recipientCountry?: StringFieldUpdateOperationsInput | string
    carrier?: StringFieldUpdateOperationsInput | string
    weight?: StringFieldUpdateOperationsInput | string
    formatLabel?: IntFieldUpdateOperationsInput | number
    trackingId?: NullableStringFieldUpdateOperationsInput | string | null
    trackingUrl?: NullableStringFieldUpdateOperationsInput | string | null
    labelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type ShippingOrderCreateManyInput = {
    id?: string
    serverId: string
    userId: string
    externalOrderId: string
    status?: string
    senderName: string
    senderAddress: string
    senderAddress2?: string | null
    senderZipcode: string
    senderCity: string
    senderPhone: string
    senderCountry: string
    recipientName: string
    recipientAddress: string
    recipientAddress2?: string | null
    recipientZipcode: string
    recipientCity: string
    recipientPhone: string
    recipientCountry: string
    carrier: string
    weight: string
    formatLabel?: number
    trackingId?: string | null
    trackingUrl?: string | null
    labelUrl?: string | null
    createdAt?: Date | string
    processedAt?: Date | string | null
    cost?: number | null
  }

  export type ShippingOrderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    externalOrderId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    senderName?: StringFieldUpdateOperationsInput | string
    senderAddress?: StringFieldUpdateOperationsInput | string
    senderAddress2?: NullableStringFieldUpdateOperationsInput | string | null
    senderZipcode?: StringFieldUpdateOperationsInput | string
    senderCity?: StringFieldUpdateOperationsInput | string
    senderPhone?: StringFieldUpdateOperationsInput | string
    senderCountry?: StringFieldUpdateOperationsInput | string
    recipientName?: StringFieldUpdateOperationsInput | string
    recipientAddress?: StringFieldUpdateOperationsInput | string
    recipientAddress2?: NullableStringFieldUpdateOperationsInput | string | null
    recipientZipcode?: StringFieldUpdateOperationsInput | string
    recipientCity?: StringFieldUpdateOperationsInput | string
    recipientPhone?: StringFieldUpdateOperationsInput | string
    recipientCountry?: StringFieldUpdateOperationsInput | string
    carrier?: StringFieldUpdateOperationsInput | string
    weight?: StringFieldUpdateOperationsInput | string
    formatLabel?: IntFieldUpdateOperationsInput | number
    trackingId?: NullableStringFieldUpdateOperationsInput | string | null
    trackingUrl?: NullableStringFieldUpdateOperationsInput | string | null
    labelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type ShippingOrderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    externalOrderId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    senderName?: StringFieldUpdateOperationsInput | string
    senderAddress?: StringFieldUpdateOperationsInput | string
    senderAddress2?: NullableStringFieldUpdateOperationsInput | string | null
    senderZipcode?: StringFieldUpdateOperationsInput | string
    senderCity?: StringFieldUpdateOperationsInput | string
    senderPhone?: StringFieldUpdateOperationsInput | string
    senderCountry?: StringFieldUpdateOperationsInput | string
    recipientName?: StringFieldUpdateOperationsInput | string
    recipientAddress?: StringFieldUpdateOperationsInput | string
    recipientAddress2?: NullableStringFieldUpdateOperationsInput | string | null
    recipientZipcode?: StringFieldUpdateOperationsInput | string
    recipientCity?: StringFieldUpdateOperationsInput | string
    recipientPhone?: StringFieldUpdateOperationsInput | string
    recipientCountry?: StringFieldUpdateOperationsInput | string
    carrier?: StringFieldUpdateOperationsInput | string
    weight?: StringFieldUpdateOperationsInput | string
    formatLabel?: IntFieldUpdateOperationsInput | number
    trackingId?: NullableStringFieldUpdateOperationsInput | string | null
    trackingUrl?: NullableStringFieldUpdateOperationsInput | string | null
    labelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type RechargeRequestCreateInput = {
    id?: string
    serverId: string
    amount: number
    status?: string
    requestMessage?: string | null
    reviewedByUserId?: string | null
    reviewMessage?: string | null
    reviewedAt?: Date | string | null
    notificationSent?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutRechargeRequestsInput
  }

  export type RechargeRequestUncheckedCreateInput = {
    id?: string
    serverId: string
    userId: string
    amount: number
    status?: string
    requestMessage?: string | null
    reviewedByUserId?: string | null
    reviewMessage?: string | null
    reviewedAt?: Date | string | null
    notificationSent?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RechargeRequestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    requestMessage?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedByUserId?: NullableStringFieldUpdateOperationsInput | string | null
    reviewMessage?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRechargeRequestsNestedInput
  }

  export type RechargeRequestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    requestMessage?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedByUserId?: NullableStringFieldUpdateOperationsInput | string | null
    reviewMessage?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RechargeRequestCreateManyInput = {
    id?: string
    serverId: string
    userId: string
    amount: number
    status?: string
    requestMessage?: string | null
    reviewedByUserId?: string | null
    reviewMessage?: string | null
    reviewedAt?: Date | string | null
    notificationSent?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RechargeRequestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    requestMessage?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedByUserId?: NullableStringFieldUpdateOperationsInput | string | null
    reviewMessage?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RechargeRequestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    requestMessage?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedByUserId?: NullableStringFieldUpdateOperationsInput | string | null
    reviewMessage?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPreferencesCreateInput = {
    id?: string
    serverId: string
    notifyOrderStatus?: boolean
    notifyCredits?: boolean
    notifyRechargeStatus?: boolean
    defaultCarrier?: string | null
    defaultLabelFormat?: number
    language?: string
    theme?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPreferencesInput
  }

  export type UserPreferencesUncheckedCreateInput = {
    id?: string
    serverId: string
    userId: string
    notifyOrderStatus?: boolean
    notifyCredits?: boolean
    notifyRechargeStatus?: boolean
    defaultCarrier?: string | null
    defaultLabelFormat?: number
    language?: string
    theme?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPreferencesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    notifyOrderStatus?: BoolFieldUpdateOperationsInput | boolean
    notifyCredits?: BoolFieldUpdateOperationsInput | boolean
    notifyRechargeStatus?: BoolFieldUpdateOperationsInput | boolean
    defaultCarrier?: NullableStringFieldUpdateOperationsInput | string | null
    defaultLabelFormat?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    theme?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPreferencesNestedInput
  }

  export type UserPreferencesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    notifyOrderStatus?: BoolFieldUpdateOperationsInput | boolean
    notifyCredits?: BoolFieldUpdateOperationsInput | boolean
    notifyRechargeStatus?: BoolFieldUpdateOperationsInput | boolean
    defaultCarrier?: NullableStringFieldUpdateOperationsInput | string | null
    defaultLabelFormat?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    theme?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPreferencesCreateManyInput = {
    id?: string
    serverId: string
    userId: string
    notifyOrderStatus?: boolean
    notifyCredits?: boolean
    notifyRechargeStatus?: boolean
    defaultCarrier?: string | null
    defaultLabelFormat?: number
    language?: string
    theme?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPreferencesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    notifyOrderStatus?: BoolFieldUpdateOperationsInput | boolean
    notifyCredits?: BoolFieldUpdateOperationsInput | boolean
    notifyRechargeStatus?: BoolFieldUpdateOperationsInput | boolean
    defaultCarrier?: NullableStringFieldUpdateOperationsInput | string | null
    defaultLabelFormat?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    theme?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPreferencesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    notifyOrderStatus?: BoolFieldUpdateOperationsInput | boolean
    notifyCredits?: BoolFieldUpdateOperationsInput | boolean
    notifyRechargeStatus?: BoolFieldUpdateOperationsInput | boolean
    defaultCarrier?: NullableStringFieldUpdateOperationsInput | string | null
    defaultLabelFormat?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    theme?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableListFilter = {
    equals?: Enumerable<string> | null
    has?: string | null
    hasEvery?: Enumerable<string>
    hasSome?: Enumerable<string>
    isEmpty?: boolean
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type ActionLogListRelationFilter = {
    every?: ActionLogWhereInput
    some?: ActionLogWhereInput
    none?: ActionLogWhereInput
  }

  export type NetworkListRelationFilter = {
    every?: NetworkWhereInput
    some?: NetworkWhereInput
    none?: NetworkWhereInput
  }

  export type TransactionListRelationFilter = {
    every?: TransactionWhereInput
    some?: TransactionWhereInput
    none?: TransactionWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type ActionLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NetworkOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ApiServerCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    ownerId?: SortOrder
    apiKey?: SortOrder
    activeModules?: SortOrder
    createdAt?: SortOrder
  }

  export type ApiServerMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    ownerId?: SortOrder
    apiKey?: SortOrder
    createdAt?: SortOrder
  }

  export type ApiServerMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    ownerId?: SortOrder
    apiKey?: SortOrder
    createdAt?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }
  export type JsonFilter = 
    | PatchUndefined<
        Either<Required<JsonFilterBase>, Exclude<keyof Required<JsonFilterBase>, 'path'>>,
        Required<JsonFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase>, 'path'>>

  export type JsonFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type ApiServerRelationFilter = {
    is?: ApiServerWhereInput | null
    isNot?: ApiServerWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ActionLogCountOrderByAggregateInput = {
    id?: SortOrder
    serverId?: SortOrder
    initiatorUserId?: SortOrder
    targetUserId?: SortOrder
    type?: SortOrder
    details?: SortOrder
    isRevertable?: SortOrder
    revertedAt?: SortOrder
    revertedBy?: SortOrder
    createdAt?: SortOrder
  }

  export type ActionLogMaxOrderByAggregateInput = {
    id?: SortOrder
    serverId?: SortOrder
    initiatorUserId?: SortOrder
    targetUserId?: SortOrder
    type?: SortOrder
    isRevertable?: SortOrder
    revertedAt?: SortOrder
    revertedBy?: SortOrder
    createdAt?: SortOrder
  }

  export type ActionLogMinOrderByAggregateInput = {
    id?: SortOrder
    serverId?: SortOrder
    initiatorUserId?: SortOrder
    targetUserId?: SortOrder
    type?: SortOrder
    isRevertable?: SortOrder
    revertedAt?: SortOrder
    revertedBy?: SortOrder
    createdAt?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }
  export type JsonWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase>, Exclude<keyof Required<JsonWithAggregatesFilterBase>, 'path'>>,
        Required<JsonWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase>, 'path'>>

  export type JsonWithAggregatesFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
    _count?: NestedIntFilter
    _min?: NestedJsonFilter
    _max?: NestedJsonFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NetworkMemberRelationFilter = {
    is?: NetworkMemberWhereInput | null
    isNot?: NetworkMemberWhereInput | null
  }

  export type ReferralCodeListRelationFilter = {
    every?: ReferralCodeWhereInput
    some?: ReferralCodeWhereInput
    none?: ReferralCodeWhereInput
  }

  export type ReferredUserListRelationFilter = {
    every?: ReferredUserWhereInput
    some?: ReferredUserWhereInput
    none?: ReferredUserWhereInput
  }

  export type ShippingOrderListRelationFilter = {
    every?: ShippingOrderWhereInput
    some?: ShippingOrderWhereInput
    none?: ShippingOrderWhereInput
  }

  export type RechargeRequestListRelationFilter = {
    every?: RechargeRequestWhereInput
    some?: RechargeRequestWhereInput
    none?: RechargeRequestWhereInput
  }

  export type UserPreferencesRelationFilter = {
    is?: UserPreferencesWhereInput | null
    isNot?: UserPreferencesWhereInput | null
  }

  export type ReferralCodeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReferredUserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShippingOrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RechargeRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserServerIdDiscordIdCompoundUniqueInput = {
    serverId: string
    discordId: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    serverId?: SortOrder
    discordId?: SortOrder
    username?: SortOrder
    balance?: SortOrder
    xp?: SortOrder
    level?: SortOrder
    dailyStreak?: SortOrder
    lastDaily?: SortOrder
    hasReceivedWelcomeShipping?: SortOrder
    lastCoinflip?: SortOrder
    coinflipPlaysToday?: SortOrder
    coinflipWinStreak?: SortOrder
    xpBonusPerRicarica?: SortOrder
    costoSpedizioneItalia?: SortOrder
    costoSpedizioneEuropa?: SortOrder
    scontoBonusRicarica?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    balance?: SortOrder
    xp?: SortOrder
    level?: SortOrder
    dailyStreak?: SortOrder
    coinflipPlaysToday?: SortOrder
    coinflipWinStreak?: SortOrder
    xpBonusPerRicarica?: SortOrder
    costoSpedizioneItalia?: SortOrder
    costoSpedizioneEuropa?: SortOrder
    scontoBonusRicarica?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    serverId?: SortOrder
    discordId?: SortOrder
    username?: SortOrder
    balance?: SortOrder
    xp?: SortOrder
    level?: SortOrder
    dailyStreak?: SortOrder
    lastDaily?: SortOrder
    hasReceivedWelcomeShipping?: SortOrder
    lastCoinflip?: SortOrder
    coinflipPlaysToday?: SortOrder
    coinflipWinStreak?: SortOrder
    xpBonusPerRicarica?: SortOrder
    costoSpedizioneItalia?: SortOrder
    costoSpedizioneEuropa?: SortOrder
    scontoBonusRicarica?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    serverId?: SortOrder
    discordId?: SortOrder
    username?: SortOrder
    balance?: SortOrder
    xp?: SortOrder
    level?: SortOrder
    dailyStreak?: SortOrder
    lastDaily?: SortOrder
    hasReceivedWelcomeShipping?: SortOrder
    lastCoinflip?: SortOrder
    coinflipPlaysToday?: SortOrder
    coinflipWinStreak?: SortOrder
    xpBonusPerRicarica?: SortOrder
    costoSpedizioneItalia?: SortOrder
    costoSpedizioneEuropa?: SortOrder
    scontoBonusRicarica?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    balance?: SortOrder
    xp?: SortOrder
    level?: SortOrder
    dailyStreak?: SortOrder
    coinflipPlaysToday?: SortOrder
    coinflipWinStreak?: SortOrder
    xpBonusPerRicarica?: SortOrder
    costoSpedizioneItalia?: SortOrder
    costoSpedizioneEuropa?: SortOrder
    scontoBonusRicarica?: SortOrder
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type FloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type TransactionCountOrderByAggregateInput = {
    id?: SortOrder
    serverId?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    networkId?: SortOrder
    baseAmount?: SortOrder
    createdAt?: SortOrder
  }

  export type TransactionAvgOrderByAggregateInput = {
    amount?: SortOrder
    baseAmount?: SortOrder
  }

  export type TransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    serverId?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    networkId?: SortOrder
    baseAmount?: SortOrder
    createdAt?: SortOrder
  }

  export type TransactionMinOrderByAggregateInput = {
    id?: SortOrder
    serverId?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    networkId?: SortOrder
    baseAmount?: SortOrder
    createdAt?: SortOrder
  }

  export type TransactionSumOrderByAggregateInput = {
    amount?: SortOrder
    baseAmount?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type ReferralCodeServerIdCodeCompoundUniqueInput = {
    serverId: string
    code: string
  }

  export type ReferralCodeCountOrderByAggregateInput = {
    id?: SortOrder
    serverId?: SortOrder
    code?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
  }

  export type ReferralCodeMaxOrderByAggregateInput = {
    id?: SortOrder
    serverId?: SortOrder
    code?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
  }

  export type ReferralCodeMinOrderByAggregateInput = {
    id?: SortOrder
    serverId?: SortOrder
    code?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
  }

  export type ReferralCodeRelationFilter = {
    is?: ReferralCodeWhereInput | null
    isNot?: ReferralCodeWhereInput | null
  }

  export type ReferredUserServerIdUserIdCompoundUniqueInput = {
    serverId: string
    userId: string
  }

  export type ReferredUserCountOrderByAggregateInput = {
    id?: SortOrder
    serverId?: SortOrder
    userId?: SortOrder
    referredByCode?: SortOrder
    referralBonusGiven?: SortOrder
    createdAt?: SortOrder
  }

  export type ReferredUserMaxOrderByAggregateInput = {
    id?: SortOrder
    serverId?: SortOrder
    userId?: SortOrder
    referredByCode?: SortOrder
    referralBonusGiven?: SortOrder
    createdAt?: SortOrder
  }

  export type ReferredUserMinOrderByAggregateInput = {
    id?: SortOrder
    serverId?: SortOrder
    userId?: SortOrder
    referredByCode?: SortOrder
    referralBonusGiven?: SortOrder
    createdAt?: SortOrder
  }

  export type NetworkMemberListRelationFilter = {
    every?: NetworkMemberWhereInput
    some?: NetworkMemberWhereInput
    none?: NetworkMemberWhereInput
  }

  export type NetworkMemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NetworkServerIdNameCompoundUniqueInput = {
    serverId: string
    name: string
  }

  export type NetworkCountOrderByAggregateInput = {
    id?: SortOrder
    serverId?: SortOrder
    name?: SortOrder
    leaderId?: SortOrder
    bankBalance?: SortOrder
    level?: SortOrder
    roleId?: SortOrder
    logChannelId?: SortOrder
    status?: SortOrder
    disbandRequestAt?: SortOrder
  }

  export type NetworkAvgOrderByAggregateInput = {
    bankBalance?: SortOrder
    level?: SortOrder
  }

  export type NetworkMaxOrderByAggregateInput = {
    id?: SortOrder
    serverId?: SortOrder
    name?: SortOrder
    leaderId?: SortOrder
    bankBalance?: SortOrder
    level?: SortOrder
    roleId?: SortOrder
    logChannelId?: SortOrder
    status?: SortOrder
    disbandRequestAt?: SortOrder
  }

  export type NetworkMinOrderByAggregateInput = {
    id?: SortOrder
    serverId?: SortOrder
    name?: SortOrder
    leaderId?: SortOrder
    bankBalance?: SortOrder
    level?: SortOrder
    roleId?: SortOrder
    logChannelId?: SortOrder
    status?: SortOrder
    disbandRequestAt?: SortOrder
  }

  export type NetworkSumOrderByAggregateInput = {
    bankBalance?: SortOrder
    level?: SortOrder
  }

  export type NetworkRelationFilter = {
    is?: NetworkWhereInput | null
    isNot?: NetworkWhereInput | null
  }

  export type NetworkMemberNetworkIdUserIdCompoundUniqueInput = {
    networkId: string
    userId: string
  }

  export type NetworkMemberCountOrderByAggregateInput = {
    networkId?: SortOrder
    userId?: SortOrder
    joinDate?: SortOrder
  }

  export type NetworkMemberMaxOrderByAggregateInput = {
    networkId?: SortOrder
    userId?: SortOrder
    joinDate?: SortOrder
  }

  export type NetworkMemberMinOrderByAggregateInput = {
    networkId?: SortOrder
    userId?: SortOrder
    joinDate?: SortOrder
  }

  export type DailyStatsServerIdDateCompoundUniqueInput = {
    serverId: string
    date: Date | string
  }

  export type DailyStatsCountOrderByAggregateInput = {
    id?: SortOrder
    serverId?: SortOrder
    date?: SortOrder
    totalCredits?: SortOrder
    totalUsers?: SortOrder
    totalReferrals?: SortOrder
    netBalance?: SortOrder
    newUsers?: SortOrder
    newReferrals?: SortOrder
  }

  export type DailyStatsAvgOrderByAggregateInput = {
    totalCredits?: SortOrder
    totalUsers?: SortOrder
    totalReferrals?: SortOrder
    netBalance?: SortOrder
    newUsers?: SortOrder
    newReferrals?: SortOrder
  }

  export type DailyStatsMaxOrderByAggregateInput = {
    id?: SortOrder
    serverId?: SortOrder
    date?: SortOrder
    totalCredits?: SortOrder
    totalUsers?: SortOrder
    totalReferrals?: SortOrder
    netBalance?: SortOrder
    newUsers?: SortOrder
    newReferrals?: SortOrder
  }

  export type DailyStatsMinOrderByAggregateInput = {
    id?: SortOrder
    serverId?: SortOrder
    date?: SortOrder
    totalCredits?: SortOrder
    totalUsers?: SortOrder
    totalReferrals?: SortOrder
    netBalance?: SortOrder
    newUsers?: SortOrder
    newReferrals?: SortOrder
  }

  export type DailyStatsSumOrderByAggregateInput = {
    totalCredits?: SortOrder
    totalUsers?: SortOrder
    totalReferrals?: SortOrder
    netBalance?: SortOrder
    newUsers?: SortOrder
    newReferrals?: SortOrder
  }

  export type ShippingOrderCountOrderByAggregateInput = {
    id?: SortOrder
    serverId?: SortOrder
    userId?: SortOrder
    externalOrderId?: SortOrder
    status?: SortOrder
    senderName?: SortOrder
    senderAddress?: SortOrder
    senderAddress2?: SortOrder
    senderZipcode?: SortOrder
    senderCity?: SortOrder
    senderPhone?: SortOrder
    senderCountry?: SortOrder
    recipientName?: SortOrder
    recipientAddress?: SortOrder
    recipientAddress2?: SortOrder
    recipientZipcode?: SortOrder
    recipientCity?: SortOrder
    recipientPhone?: SortOrder
    recipientCountry?: SortOrder
    carrier?: SortOrder
    weight?: SortOrder
    formatLabel?: SortOrder
    trackingId?: SortOrder
    trackingUrl?: SortOrder
    labelUrl?: SortOrder
    createdAt?: SortOrder
    processedAt?: SortOrder
    cost?: SortOrder
  }

  export type ShippingOrderAvgOrderByAggregateInput = {
    formatLabel?: SortOrder
    cost?: SortOrder
  }

  export type ShippingOrderMaxOrderByAggregateInput = {
    id?: SortOrder
    serverId?: SortOrder
    userId?: SortOrder
    externalOrderId?: SortOrder
    status?: SortOrder
    senderName?: SortOrder
    senderAddress?: SortOrder
    senderAddress2?: SortOrder
    senderZipcode?: SortOrder
    senderCity?: SortOrder
    senderPhone?: SortOrder
    senderCountry?: SortOrder
    recipientName?: SortOrder
    recipientAddress?: SortOrder
    recipientAddress2?: SortOrder
    recipientZipcode?: SortOrder
    recipientCity?: SortOrder
    recipientPhone?: SortOrder
    recipientCountry?: SortOrder
    carrier?: SortOrder
    weight?: SortOrder
    formatLabel?: SortOrder
    trackingId?: SortOrder
    trackingUrl?: SortOrder
    labelUrl?: SortOrder
    createdAt?: SortOrder
    processedAt?: SortOrder
    cost?: SortOrder
  }

  export type ShippingOrderMinOrderByAggregateInput = {
    id?: SortOrder
    serverId?: SortOrder
    userId?: SortOrder
    externalOrderId?: SortOrder
    status?: SortOrder
    senderName?: SortOrder
    senderAddress?: SortOrder
    senderAddress2?: SortOrder
    senderZipcode?: SortOrder
    senderCity?: SortOrder
    senderPhone?: SortOrder
    senderCountry?: SortOrder
    recipientName?: SortOrder
    recipientAddress?: SortOrder
    recipientAddress2?: SortOrder
    recipientZipcode?: SortOrder
    recipientCity?: SortOrder
    recipientPhone?: SortOrder
    recipientCountry?: SortOrder
    carrier?: SortOrder
    weight?: SortOrder
    formatLabel?: SortOrder
    trackingId?: SortOrder
    trackingUrl?: SortOrder
    labelUrl?: SortOrder
    createdAt?: SortOrder
    processedAt?: SortOrder
    cost?: SortOrder
  }

  export type ShippingOrderSumOrderByAggregateInput = {
    formatLabel?: SortOrder
    cost?: SortOrder
  }

  export type RechargeRequestCountOrderByAggregateInput = {
    id?: SortOrder
    serverId?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    requestMessage?: SortOrder
    reviewedByUserId?: SortOrder
    reviewMessage?: SortOrder
    reviewedAt?: SortOrder
    notificationSent?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RechargeRequestAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type RechargeRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    serverId?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    requestMessage?: SortOrder
    reviewedByUserId?: SortOrder
    reviewMessage?: SortOrder
    reviewedAt?: SortOrder
    notificationSent?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RechargeRequestMinOrderByAggregateInput = {
    id?: SortOrder
    serverId?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    requestMessage?: SortOrder
    reviewedByUserId?: SortOrder
    reviewMessage?: SortOrder
    reviewedAt?: SortOrder
    notificationSent?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RechargeRequestSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type UserPreferencesCountOrderByAggregateInput = {
    id?: SortOrder
    serverId?: SortOrder
    userId?: SortOrder
    notifyOrderStatus?: SortOrder
    notifyCredits?: SortOrder
    notifyRechargeStatus?: SortOrder
    defaultCarrier?: SortOrder
    defaultLabelFormat?: SortOrder
    language?: SortOrder
    theme?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserPreferencesAvgOrderByAggregateInput = {
    defaultLabelFormat?: SortOrder
  }

  export type UserPreferencesMaxOrderByAggregateInput = {
    id?: SortOrder
    serverId?: SortOrder
    userId?: SortOrder
    notifyOrderStatus?: SortOrder
    notifyCredits?: SortOrder
    notifyRechargeStatus?: SortOrder
    defaultCarrier?: SortOrder
    defaultLabelFormat?: SortOrder
    language?: SortOrder
    theme?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserPreferencesMinOrderByAggregateInput = {
    id?: SortOrder
    serverId?: SortOrder
    userId?: SortOrder
    notifyOrderStatus?: SortOrder
    notifyCredits?: SortOrder
    notifyRechargeStatus?: SortOrder
    defaultCarrier?: SortOrder
    defaultLabelFormat?: SortOrder
    language?: SortOrder
    theme?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserPreferencesSumOrderByAggregateInput = {
    defaultLabelFormat?: SortOrder
  }

  export type ApiServerCreateactiveModulesInput = {
    set: Enumerable<string>
  }

  export type ActionLogCreateNestedManyWithoutServerInput = {
    create?: XOR<Enumerable<ActionLogCreateWithoutServerInput>, Enumerable<ActionLogUncheckedCreateWithoutServerInput>>
    connectOrCreate?: Enumerable<ActionLogCreateOrConnectWithoutServerInput>
    createMany?: ActionLogCreateManyServerInputEnvelope
    connect?: Enumerable<ActionLogWhereUniqueInput>
  }

  export type NetworkCreateNestedManyWithoutServerInput = {
    create?: XOR<Enumerable<NetworkCreateWithoutServerInput>, Enumerable<NetworkUncheckedCreateWithoutServerInput>>
    connectOrCreate?: Enumerable<NetworkCreateOrConnectWithoutServerInput>
    createMany?: NetworkCreateManyServerInputEnvelope
    connect?: Enumerable<NetworkWhereUniqueInput>
  }

  export type TransactionCreateNestedManyWithoutServerInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutServerInput>, Enumerable<TransactionUncheckedCreateWithoutServerInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutServerInput>
    createMany?: TransactionCreateManyServerInputEnvelope
    connect?: Enumerable<TransactionWhereUniqueInput>
  }

  export type UserCreateNestedManyWithoutServerInput = {
    create?: XOR<Enumerable<UserCreateWithoutServerInput>, Enumerable<UserUncheckedCreateWithoutServerInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutServerInput>
    createMany?: UserCreateManyServerInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type ActionLogUncheckedCreateNestedManyWithoutServerInput = {
    create?: XOR<Enumerable<ActionLogCreateWithoutServerInput>, Enumerable<ActionLogUncheckedCreateWithoutServerInput>>
    connectOrCreate?: Enumerable<ActionLogCreateOrConnectWithoutServerInput>
    createMany?: ActionLogCreateManyServerInputEnvelope
    connect?: Enumerable<ActionLogWhereUniqueInput>
  }

  export type NetworkUncheckedCreateNestedManyWithoutServerInput = {
    create?: XOR<Enumerable<NetworkCreateWithoutServerInput>, Enumerable<NetworkUncheckedCreateWithoutServerInput>>
    connectOrCreate?: Enumerable<NetworkCreateOrConnectWithoutServerInput>
    createMany?: NetworkCreateManyServerInputEnvelope
    connect?: Enumerable<NetworkWhereUniqueInput>
  }

  export type TransactionUncheckedCreateNestedManyWithoutServerInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutServerInput>, Enumerable<TransactionUncheckedCreateWithoutServerInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutServerInput>
    createMany?: TransactionCreateManyServerInputEnvelope
    connect?: Enumerable<TransactionWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutServerInput = {
    create?: XOR<Enumerable<UserCreateWithoutServerInput>, Enumerable<UserUncheckedCreateWithoutServerInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutServerInput>
    createMany?: UserCreateManyServerInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type ApiServerUpdateactiveModulesInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ActionLogUpdateManyWithoutServerNestedInput = {
    create?: XOR<Enumerable<ActionLogCreateWithoutServerInput>, Enumerable<ActionLogUncheckedCreateWithoutServerInput>>
    connectOrCreate?: Enumerable<ActionLogCreateOrConnectWithoutServerInput>
    upsert?: Enumerable<ActionLogUpsertWithWhereUniqueWithoutServerInput>
    createMany?: ActionLogCreateManyServerInputEnvelope
    set?: Enumerable<ActionLogWhereUniqueInput>
    disconnect?: Enumerable<ActionLogWhereUniqueInput>
    delete?: Enumerable<ActionLogWhereUniqueInput>
    connect?: Enumerable<ActionLogWhereUniqueInput>
    update?: Enumerable<ActionLogUpdateWithWhereUniqueWithoutServerInput>
    updateMany?: Enumerable<ActionLogUpdateManyWithWhereWithoutServerInput>
    deleteMany?: Enumerable<ActionLogScalarWhereInput>
  }

  export type NetworkUpdateManyWithoutServerNestedInput = {
    create?: XOR<Enumerable<NetworkCreateWithoutServerInput>, Enumerable<NetworkUncheckedCreateWithoutServerInput>>
    connectOrCreate?: Enumerable<NetworkCreateOrConnectWithoutServerInput>
    upsert?: Enumerable<NetworkUpsertWithWhereUniqueWithoutServerInput>
    createMany?: NetworkCreateManyServerInputEnvelope
    set?: Enumerable<NetworkWhereUniqueInput>
    disconnect?: Enumerable<NetworkWhereUniqueInput>
    delete?: Enumerable<NetworkWhereUniqueInput>
    connect?: Enumerable<NetworkWhereUniqueInput>
    update?: Enumerable<NetworkUpdateWithWhereUniqueWithoutServerInput>
    updateMany?: Enumerable<NetworkUpdateManyWithWhereWithoutServerInput>
    deleteMany?: Enumerable<NetworkScalarWhereInput>
  }

  export type TransactionUpdateManyWithoutServerNestedInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutServerInput>, Enumerable<TransactionUncheckedCreateWithoutServerInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutServerInput>
    upsert?: Enumerable<TransactionUpsertWithWhereUniqueWithoutServerInput>
    createMany?: TransactionCreateManyServerInputEnvelope
    set?: Enumerable<TransactionWhereUniqueInput>
    disconnect?: Enumerable<TransactionWhereUniqueInput>
    delete?: Enumerable<TransactionWhereUniqueInput>
    connect?: Enumerable<TransactionWhereUniqueInput>
    update?: Enumerable<TransactionUpdateWithWhereUniqueWithoutServerInput>
    updateMany?: Enumerable<TransactionUpdateManyWithWhereWithoutServerInput>
    deleteMany?: Enumerable<TransactionScalarWhereInput>
  }

  export type UserUpdateManyWithoutServerNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutServerInput>, Enumerable<UserUncheckedCreateWithoutServerInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutServerInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutServerInput>
    createMany?: UserCreateManyServerInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutServerInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutServerInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type ActionLogUncheckedUpdateManyWithoutServerNestedInput = {
    create?: XOR<Enumerable<ActionLogCreateWithoutServerInput>, Enumerable<ActionLogUncheckedCreateWithoutServerInput>>
    connectOrCreate?: Enumerable<ActionLogCreateOrConnectWithoutServerInput>
    upsert?: Enumerable<ActionLogUpsertWithWhereUniqueWithoutServerInput>
    createMany?: ActionLogCreateManyServerInputEnvelope
    set?: Enumerable<ActionLogWhereUniqueInput>
    disconnect?: Enumerable<ActionLogWhereUniqueInput>
    delete?: Enumerable<ActionLogWhereUniqueInput>
    connect?: Enumerable<ActionLogWhereUniqueInput>
    update?: Enumerable<ActionLogUpdateWithWhereUniqueWithoutServerInput>
    updateMany?: Enumerable<ActionLogUpdateManyWithWhereWithoutServerInput>
    deleteMany?: Enumerable<ActionLogScalarWhereInput>
  }

  export type NetworkUncheckedUpdateManyWithoutServerNestedInput = {
    create?: XOR<Enumerable<NetworkCreateWithoutServerInput>, Enumerable<NetworkUncheckedCreateWithoutServerInput>>
    connectOrCreate?: Enumerable<NetworkCreateOrConnectWithoutServerInput>
    upsert?: Enumerable<NetworkUpsertWithWhereUniqueWithoutServerInput>
    createMany?: NetworkCreateManyServerInputEnvelope
    set?: Enumerable<NetworkWhereUniqueInput>
    disconnect?: Enumerable<NetworkWhereUniqueInput>
    delete?: Enumerable<NetworkWhereUniqueInput>
    connect?: Enumerable<NetworkWhereUniqueInput>
    update?: Enumerable<NetworkUpdateWithWhereUniqueWithoutServerInput>
    updateMany?: Enumerable<NetworkUpdateManyWithWhereWithoutServerInput>
    deleteMany?: Enumerable<NetworkScalarWhereInput>
  }

  export type TransactionUncheckedUpdateManyWithoutServerNestedInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutServerInput>, Enumerable<TransactionUncheckedCreateWithoutServerInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutServerInput>
    upsert?: Enumerable<TransactionUpsertWithWhereUniqueWithoutServerInput>
    createMany?: TransactionCreateManyServerInputEnvelope
    set?: Enumerable<TransactionWhereUniqueInput>
    disconnect?: Enumerable<TransactionWhereUniqueInput>
    delete?: Enumerable<TransactionWhereUniqueInput>
    connect?: Enumerable<TransactionWhereUniqueInput>
    update?: Enumerable<TransactionUpdateWithWhereUniqueWithoutServerInput>
    updateMany?: Enumerable<TransactionUpdateManyWithWhereWithoutServerInput>
    deleteMany?: Enumerable<TransactionScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutServerNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutServerInput>, Enumerable<UserUncheckedCreateWithoutServerInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutServerInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutServerInput>
    createMany?: UserCreateManyServerInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutServerInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutServerInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutInitiatedActionsInput = {
    create?: XOR<UserCreateWithoutInitiatedActionsInput, UserUncheckedCreateWithoutInitiatedActionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutInitiatedActionsInput
    connect?: UserWhereUniqueInput
  }

  export type ApiServerCreateNestedOneWithoutActionLogsInput = {
    create?: XOR<ApiServerCreateWithoutActionLogsInput, ApiServerUncheckedCreateWithoutActionLogsInput>
    connectOrCreate?: ApiServerCreateOrConnectWithoutActionLogsInput
    connect?: ApiServerWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTargetedActionsInput = {
    create?: XOR<UserCreateWithoutTargetedActionsInput, UserUncheckedCreateWithoutTargetedActionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTargetedActionsInput
    connect?: UserWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateOneWithoutInitiatedActionsNestedInput = {
    create?: XOR<UserCreateWithoutInitiatedActionsInput, UserUncheckedCreateWithoutInitiatedActionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutInitiatedActionsInput
    upsert?: UserUpsertWithoutInitiatedActionsInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutInitiatedActionsInput, UserUncheckedUpdateWithoutInitiatedActionsInput>
  }

  export type ApiServerUpdateOneRequiredWithoutActionLogsNestedInput = {
    create?: XOR<ApiServerCreateWithoutActionLogsInput, ApiServerUncheckedCreateWithoutActionLogsInput>
    connectOrCreate?: ApiServerCreateOrConnectWithoutActionLogsInput
    upsert?: ApiServerUpsertWithoutActionLogsInput
    connect?: ApiServerWhereUniqueInput
    update?: XOR<ApiServerUpdateWithoutActionLogsInput, ApiServerUncheckedUpdateWithoutActionLogsInput>
  }

  export type UserUpdateOneWithoutTargetedActionsNestedInput = {
    create?: XOR<UserCreateWithoutTargetedActionsInput, UserUncheckedCreateWithoutTargetedActionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTargetedActionsInput
    upsert?: UserUpsertWithoutTargetedActionsInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutTargetedActionsInput, UserUncheckedUpdateWithoutTargetedActionsInput>
  }

  export type ActionLogCreateNestedManyWithoutInitiatorUserInput = {
    create?: XOR<Enumerable<ActionLogCreateWithoutInitiatorUserInput>, Enumerable<ActionLogUncheckedCreateWithoutInitiatorUserInput>>
    connectOrCreate?: Enumerable<ActionLogCreateOrConnectWithoutInitiatorUserInput>
    createMany?: ActionLogCreateManyInitiatorUserInputEnvelope
    connect?: Enumerable<ActionLogWhereUniqueInput>
  }

  export type ActionLogCreateNestedManyWithoutTargetUserInput = {
    create?: XOR<Enumerable<ActionLogCreateWithoutTargetUserInput>, Enumerable<ActionLogUncheckedCreateWithoutTargetUserInput>>
    connectOrCreate?: Enumerable<ActionLogCreateOrConnectWithoutTargetUserInput>
    createMany?: ActionLogCreateManyTargetUserInputEnvelope
    connect?: Enumerable<ActionLogWhereUniqueInput>
  }

  export type NetworkMemberCreateNestedOneWithoutUserInput = {
    create?: XOR<NetworkMemberCreateWithoutUserInput, NetworkMemberUncheckedCreateWithoutUserInput>
    connectOrCreate?: NetworkMemberCreateOrConnectWithoutUserInput
    connect?: NetworkMemberWhereUniqueInput
  }

  export type ReferralCodeCreateNestedManyWithoutOwnerInput = {
    create?: XOR<Enumerable<ReferralCodeCreateWithoutOwnerInput>, Enumerable<ReferralCodeUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<ReferralCodeCreateOrConnectWithoutOwnerInput>
    createMany?: ReferralCodeCreateManyOwnerInputEnvelope
    connect?: Enumerable<ReferralCodeWhereUniqueInput>
  }

  export type ReferredUserCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ReferredUserCreateWithoutUserInput>, Enumerable<ReferredUserUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ReferredUserCreateOrConnectWithoutUserInput>
    createMany?: ReferredUserCreateManyUserInputEnvelope
    connect?: Enumerable<ReferredUserWhereUniqueInput>
  }

  export type ShippingOrderCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ShippingOrderCreateWithoutUserInput>, Enumerable<ShippingOrderUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ShippingOrderCreateOrConnectWithoutUserInput>
    createMany?: ShippingOrderCreateManyUserInputEnvelope
    connect?: Enumerable<ShippingOrderWhereUniqueInput>
  }

  export type TransactionCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutUserInput>, Enumerable<TransactionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutUserInput>
    createMany?: TransactionCreateManyUserInputEnvelope
    connect?: Enumerable<TransactionWhereUniqueInput>
  }

  export type RechargeRequestCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<RechargeRequestCreateWithoutUserInput>, Enumerable<RechargeRequestUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RechargeRequestCreateOrConnectWithoutUserInput>
    createMany?: RechargeRequestCreateManyUserInputEnvelope
    connect?: Enumerable<RechargeRequestWhereUniqueInput>
  }

  export type UserPreferencesCreateNestedOneWithoutUserInput = {
    create?: XOR<UserPreferencesCreateWithoutUserInput, UserPreferencesUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserPreferencesCreateOrConnectWithoutUserInput
    connect?: UserPreferencesWhereUniqueInput
  }

  export type ApiServerCreateNestedOneWithoutUsersInput = {
    create?: XOR<ApiServerCreateWithoutUsersInput, ApiServerUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ApiServerCreateOrConnectWithoutUsersInput
    connect?: ApiServerWhereUniqueInput
  }

  export type ActionLogUncheckedCreateNestedManyWithoutInitiatorUserInput = {
    create?: XOR<Enumerable<ActionLogCreateWithoutInitiatorUserInput>, Enumerable<ActionLogUncheckedCreateWithoutInitiatorUserInput>>
    connectOrCreate?: Enumerable<ActionLogCreateOrConnectWithoutInitiatorUserInput>
    createMany?: ActionLogCreateManyInitiatorUserInputEnvelope
    connect?: Enumerable<ActionLogWhereUniqueInput>
  }

  export type ActionLogUncheckedCreateNestedManyWithoutTargetUserInput = {
    create?: XOR<Enumerable<ActionLogCreateWithoutTargetUserInput>, Enumerable<ActionLogUncheckedCreateWithoutTargetUserInput>>
    connectOrCreate?: Enumerable<ActionLogCreateOrConnectWithoutTargetUserInput>
    createMany?: ActionLogCreateManyTargetUserInputEnvelope
    connect?: Enumerable<ActionLogWhereUniqueInput>
  }

  export type NetworkMemberUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<NetworkMemberCreateWithoutUserInput, NetworkMemberUncheckedCreateWithoutUserInput>
    connectOrCreate?: NetworkMemberCreateOrConnectWithoutUserInput
    connect?: NetworkMemberWhereUniqueInput
  }

  export type ReferralCodeUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<Enumerable<ReferralCodeCreateWithoutOwnerInput>, Enumerable<ReferralCodeUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<ReferralCodeCreateOrConnectWithoutOwnerInput>
    createMany?: ReferralCodeCreateManyOwnerInputEnvelope
    connect?: Enumerable<ReferralCodeWhereUniqueInput>
  }

  export type ReferredUserUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ReferredUserCreateWithoutUserInput>, Enumerable<ReferredUserUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ReferredUserCreateOrConnectWithoutUserInput>
    createMany?: ReferredUserCreateManyUserInputEnvelope
    connect?: Enumerable<ReferredUserWhereUniqueInput>
  }

  export type ShippingOrderUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ShippingOrderCreateWithoutUserInput>, Enumerable<ShippingOrderUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ShippingOrderCreateOrConnectWithoutUserInput>
    createMany?: ShippingOrderCreateManyUserInputEnvelope
    connect?: Enumerable<ShippingOrderWhereUniqueInput>
  }

  export type TransactionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutUserInput>, Enumerable<TransactionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutUserInput>
    createMany?: TransactionCreateManyUserInputEnvelope
    connect?: Enumerable<TransactionWhereUniqueInput>
  }

  export type RechargeRequestUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<RechargeRequestCreateWithoutUserInput>, Enumerable<RechargeRequestUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RechargeRequestCreateOrConnectWithoutUserInput>
    createMany?: RechargeRequestCreateManyUserInputEnvelope
    connect?: Enumerable<RechargeRequestWhereUniqueInput>
  }

  export type UserPreferencesUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserPreferencesCreateWithoutUserInput, UserPreferencesUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserPreferencesCreateOrConnectWithoutUserInput
    connect?: UserPreferencesWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ActionLogUpdateManyWithoutInitiatorUserNestedInput = {
    create?: XOR<Enumerable<ActionLogCreateWithoutInitiatorUserInput>, Enumerable<ActionLogUncheckedCreateWithoutInitiatorUserInput>>
    connectOrCreate?: Enumerable<ActionLogCreateOrConnectWithoutInitiatorUserInput>
    upsert?: Enumerable<ActionLogUpsertWithWhereUniqueWithoutInitiatorUserInput>
    createMany?: ActionLogCreateManyInitiatorUserInputEnvelope
    set?: Enumerable<ActionLogWhereUniqueInput>
    disconnect?: Enumerable<ActionLogWhereUniqueInput>
    delete?: Enumerable<ActionLogWhereUniqueInput>
    connect?: Enumerable<ActionLogWhereUniqueInput>
    update?: Enumerable<ActionLogUpdateWithWhereUniqueWithoutInitiatorUserInput>
    updateMany?: Enumerable<ActionLogUpdateManyWithWhereWithoutInitiatorUserInput>
    deleteMany?: Enumerable<ActionLogScalarWhereInput>
  }

  export type ActionLogUpdateManyWithoutTargetUserNestedInput = {
    create?: XOR<Enumerable<ActionLogCreateWithoutTargetUserInput>, Enumerable<ActionLogUncheckedCreateWithoutTargetUserInput>>
    connectOrCreate?: Enumerable<ActionLogCreateOrConnectWithoutTargetUserInput>
    upsert?: Enumerable<ActionLogUpsertWithWhereUniqueWithoutTargetUserInput>
    createMany?: ActionLogCreateManyTargetUserInputEnvelope
    set?: Enumerable<ActionLogWhereUniqueInput>
    disconnect?: Enumerable<ActionLogWhereUniqueInput>
    delete?: Enumerable<ActionLogWhereUniqueInput>
    connect?: Enumerable<ActionLogWhereUniqueInput>
    update?: Enumerable<ActionLogUpdateWithWhereUniqueWithoutTargetUserInput>
    updateMany?: Enumerable<ActionLogUpdateManyWithWhereWithoutTargetUserInput>
    deleteMany?: Enumerable<ActionLogScalarWhereInput>
  }

  export type NetworkMemberUpdateOneWithoutUserNestedInput = {
    create?: XOR<NetworkMemberCreateWithoutUserInput, NetworkMemberUncheckedCreateWithoutUserInput>
    connectOrCreate?: NetworkMemberCreateOrConnectWithoutUserInput
    upsert?: NetworkMemberUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: NetworkMemberWhereUniqueInput
    update?: XOR<NetworkMemberUpdateWithoutUserInput, NetworkMemberUncheckedUpdateWithoutUserInput>
  }

  export type ReferralCodeUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<Enumerable<ReferralCodeCreateWithoutOwnerInput>, Enumerable<ReferralCodeUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<ReferralCodeCreateOrConnectWithoutOwnerInput>
    upsert?: Enumerable<ReferralCodeUpsertWithWhereUniqueWithoutOwnerInput>
    createMany?: ReferralCodeCreateManyOwnerInputEnvelope
    set?: Enumerable<ReferralCodeWhereUniqueInput>
    disconnect?: Enumerable<ReferralCodeWhereUniqueInput>
    delete?: Enumerable<ReferralCodeWhereUniqueInput>
    connect?: Enumerable<ReferralCodeWhereUniqueInput>
    update?: Enumerable<ReferralCodeUpdateWithWhereUniqueWithoutOwnerInput>
    updateMany?: Enumerable<ReferralCodeUpdateManyWithWhereWithoutOwnerInput>
    deleteMany?: Enumerable<ReferralCodeScalarWhereInput>
  }

  export type ReferredUserUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ReferredUserCreateWithoutUserInput>, Enumerable<ReferredUserUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ReferredUserCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ReferredUserUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ReferredUserCreateManyUserInputEnvelope
    set?: Enumerable<ReferredUserWhereUniqueInput>
    disconnect?: Enumerable<ReferredUserWhereUniqueInput>
    delete?: Enumerable<ReferredUserWhereUniqueInput>
    connect?: Enumerable<ReferredUserWhereUniqueInput>
    update?: Enumerable<ReferredUserUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ReferredUserUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ReferredUserScalarWhereInput>
  }

  export type ShippingOrderUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ShippingOrderCreateWithoutUserInput>, Enumerable<ShippingOrderUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ShippingOrderCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ShippingOrderUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ShippingOrderCreateManyUserInputEnvelope
    set?: Enumerable<ShippingOrderWhereUniqueInput>
    disconnect?: Enumerable<ShippingOrderWhereUniqueInput>
    delete?: Enumerable<ShippingOrderWhereUniqueInput>
    connect?: Enumerable<ShippingOrderWhereUniqueInput>
    update?: Enumerable<ShippingOrderUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ShippingOrderUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ShippingOrderScalarWhereInput>
  }

  export type TransactionUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutUserInput>, Enumerable<TransactionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<TransactionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: TransactionCreateManyUserInputEnvelope
    set?: Enumerable<TransactionWhereUniqueInput>
    disconnect?: Enumerable<TransactionWhereUniqueInput>
    delete?: Enumerable<TransactionWhereUniqueInput>
    connect?: Enumerable<TransactionWhereUniqueInput>
    update?: Enumerable<TransactionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<TransactionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<TransactionScalarWhereInput>
  }

  export type RechargeRequestUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<RechargeRequestCreateWithoutUserInput>, Enumerable<RechargeRequestUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RechargeRequestCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<RechargeRequestUpsertWithWhereUniqueWithoutUserInput>
    createMany?: RechargeRequestCreateManyUserInputEnvelope
    set?: Enumerable<RechargeRequestWhereUniqueInput>
    disconnect?: Enumerable<RechargeRequestWhereUniqueInput>
    delete?: Enumerable<RechargeRequestWhereUniqueInput>
    connect?: Enumerable<RechargeRequestWhereUniqueInput>
    update?: Enumerable<RechargeRequestUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<RechargeRequestUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<RechargeRequestScalarWhereInput>
  }

  export type UserPreferencesUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserPreferencesCreateWithoutUserInput, UserPreferencesUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserPreferencesCreateOrConnectWithoutUserInput
    upsert?: UserPreferencesUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserPreferencesWhereUniqueInput
    update?: XOR<UserPreferencesUpdateWithoutUserInput, UserPreferencesUncheckedUpdateWithoutUserInput>
  }

  export type ApiServerUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<ApiServerCreateWithoutUsersInput, ApiServerUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ApiServerCreateOrConnectWithoutUsersInput
    upsert?: ApiServerUpsertWithoutUsersInput
    connect?: ApiServerWhereUniqueInput
    update?: XOR<ApiServerUpdateWithoutUsersInput, ApiServerUncheckedUpdateWithoutUsersInput>
  }

  export type ActionLogUncheckedUpdateManyWithoutInitiatorUserNestedInput = {
    create?: XOR<Enumerable<ActionLogCreateWithoutInitiatorUserInput>, Enumerable<ActionLogUncheckedCreateWithoutInitiatorUserInput>>
    connectOrCreate?: Enumerable<ActionLogCreateOrConnectWithoutInitiatorUserInput>
    upsert?: Enumerable<ActionLogUpsertWithWhereUniqueWithoutInitiatorUserInput>
    createMany?: ActionLogCreateManyInitiatorUserInputEnvelope
    set?: Enumerable<ActionLogWhereUniqueInput>
    disconnect?: Enumerable<ActionLogWhereUniqueInput>
    delete?: Enumerable<ActionLogWhereUniqueInput>
    connect?: Enumerable<ActionLogWhereUniqueInput>
    update?: Enumerable<ActionLogUpdateWithWhereUniqueWithoutInitiatorUserInput>
    updateMany?: Enumerable<ActionLogUpdateManyWithWhereWithoutInitiatorUserInput>
    deleteMany?: Enumerable<ActionLogScalarWhereInput>
  }

  export type ActionLogUncheckedUpdateManyWithoutTargetUserNestedInput = {
    create?: XOR<Enumerable<ActionLogCreateWithoutTargetUserInput>, Enumerable<ActionLogUncheckedCreateWithoutTargetUserInput>>
    connectOrCreate?: Enumerable<ActionLogCreateOrConnectWithoutTargetUserInput>
    upsert?: Enumerable<ActionLogUpsertWithWhereUniqueWithoutTargetUserInput>
    createMany?: ActionLogCreateManyTargetUserInputEnvelope
    set?: Enumerable<ActionLogWhereUniqueInput>
    disconnect?: Enumerable<ActionLogWhereUniqueInput>
    delete?: Enumerable<ActionLogWhereUniqueInput>
    connect?: Enumerable<ActionLogWhereUniqueInput>
    update?: Enumerable<ActionLogUpdateWithWhereUniqueWithoutTargetUserInput>
    updateMany?: Enumerable<ActionLogUpdateManyWithWhereWithoutTargetUserInput>
    deleteMany?: Enumerable<ActionLogScalarWhereInput>
  }

  export type NetworkMemberUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<NetworkMemberCreateWithoutUserInput, NetworkMemberUncheckedCreateWithoutUserInput>
    connectOrCreate?: NetworkMemberCreateOrConnectWithoutUserInput
    upsert?: NetworkMemberUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: NetworkMemberWhereUniqueInput
    update?: XOR<NetworkMemberUpdateWithoutUserInput, NetworkMemberUncheckedUpdateWithoutUserInput>
  }

  export type ReferralCodeUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<Enumerable<ReferralCodeCreateWithoutOwnerInput>, Enumerable<ReferralCodeUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<ReferralCodeCreateOrConnectWithoutOwnerInput>
    upsert?: Enumerable<ReferralCodeUpsertWithWhereUniqueWithoutOwnerInput>
    createMany?: ReferralCodeCreateManyOwnerInputEnvelope
    set?: Enumerable<ReferralCodeWhereUniqueInput>
    disconnect?: Enumerable<ReferralCodeWhereUniqueInput>
    delete?: Enumerable<ReferralCodeWhereUniqueInput>
    connect?: Enumerable<ReferralCodeWhereUniqueInput>
    update?: Enumerable<ReferralCodeUpdateWithWhereUniqueWithoutOwnerInput>
    updateMany?: Enumerable<ReferralCodeUpdateManyWithWhereWithoutOwnerInput>
    deleteMany?: Enumerable<ReferralCodeScalarWhereInput>
  }

  export type ReferredUserUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ReferredUserCreateWithoutUserInput>, Enumerable<ReferredUserUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ReferredUserCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ReferredUserUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ReferredUserCreateManyUserInputEnvelope
    set?: Enumerable<ReferredUserWhereUniqueInput>
    disconnect?: Enumerable<ReferredUserWhereUniqueInput>
    delete?: Enumerable<ReferredUserWhereUniqueInput>
    connect?: Enumerable<ReferredUserWhereUniqueInput>
    update?: Enumerable<ReferredUserUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ReferredUserUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ReferredUserScalarWhereInput>
  }

  export type ShippingOrderUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ShippingOrderCreateWithoutUserInput>, Enumerable<ShippingOrderUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ShippingOrderCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ShippingOrderUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ShippingOrderCreateManyUserInputEnvelope
    set?: Enumerable<ShippingOrderWhereUniqueInput>
    disconnect?: Enumerable<ShippingOrderWhereUniqueInput>
    delete?: Enumerable<ShippingOrderWhereUniqueInput>
    connect?: Enumerable<ShippingOrderWhereUniqueInput>
    update?: Enumerable<ShippingOrderUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ShippingOrderUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ShippingOrderScalarWhereInput>
  }

  export type TransactionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutUserInput>, Enumerable<TransactionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<TransactionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: TransactionCreateManyUserInputEnvelope
    set?: Enumerable<TransactionWhereUniqueInput>
    disconnect?: Enumerable<TransactionWhereUniqueInput>
    delete?: Enumerable<TransactionWhereUniqueInput>
    connect?: Enumerable<TransactionWhereUniqueInput>
    update?: Enumerable<TransactionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<TransactionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<TransactionScalarWhereInput>
  }

  export type RechargeRequestUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<RechargeRequestCreateWithoutUserInput>, Enumerable<RechargeRequestUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RechargeRequestCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<RechargeRequestUpsertWithWhereUniqueWithoutUserInput>
    createMany?: RechargeRequestCreateManyUserInputEnvelope
    set?: Enumerable<RechargeRequestWhereUniqueInput>
    disconnect?: Enumerable<RechargeRequestWhereUniqueInput>
    delete?: Enumerable<RechargeRequestWhereUniqueInput>
    connect?: Enumerable<RechargeRequestWhereUniqueInput>
    update?: Enumerable<RechargeRequestUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<RechargeRequestUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<RechargeRequestScalarWhereInput>
  }

  export type UserPreferencesUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserPreferencesCreateWithoutUserInput, UserPreferencesUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserPreferencesCreateOrConnectWithoutUserInput
    upsert?: UserPreferencesUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserPreferencesWhereUniqueInput
    update?: XOR<UserPreferencesUpdateWithoutUserInput, UserPreferencesUncheckedUpdateWithoutUserInput>
  }

  export type ApiServerCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<ApiServerCreateWithoutTransactionsInput, ApiServerUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: ApiServerCreateOrConnectWithoutTransactionsInput
    connect?: ApiServerWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ApiServerUpdateOneRequiredWithoutTransactionsNestedInput = {
    create?: XOR<ApiServerCreateWithoutTransactionsInput, ApiServerUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: ApiServerCreateOrConnectWithoutTransactionsInput
    upsert?: ApiServerUpsertWithoutTransactionsInput
    connect?: ApiServerWhereUniqueInput
    update?: XOR<ApiServerUpdateWithoutTransactionsInput, ApiServerUncheckedUpdateWithoutTransactionsInput>
  }

  export type UserUpdateOneRequiredWithoutTransactionsNestedInput = {
    create?: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionsInput
    upsert?: UserUpsertWithoutTransactionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutTransactionsInput, UserUncheckedUpdateWithoutTransactionsInput>
  }

  export type UserCreateNestedOneWithoutReferralCodesInput = {
    create?: XOR<UserCreateWithoutReferralCodesInput, UserUncheckedCreateWithoutReferralCodesInput>
    connectOrCreate?: UserCreateOrConnectWithoutReferralCodesInput
    connect?: UserWhereUniqueInput
  }

  export type ReferredUserCreateNestedManyWithoutReferralCodeInput = {
    create?: XOR<Enumerable<ReferredUserCreateWithoutReferralCodeInput>, Enumerable<ReferredUserUncheckedCreateWithoutReferralCodeInput>>
    connectOrCreate?: Enumerable<ReferredUserCreateOrConnectWithoutReferralCodeInput>
    createMany?: ReferredUserCreateManyReferralCodeInputEnvelope
    connect?: Enumerable<ReferredUserWhereUniqueInput>
  }

  export type ReferredUserUncheckedCreateNestedManyWithoutReferralCodeInput = {
    create?: XOR<Enumerable<ReferredUserCreateWithoutReferralCodeInput>, Enumerable<ReferredUserUncheckedCreateWithoutReferralCodeInput>>
    connectOrCreate?: Enumerable<ReferredUserCreateOrConnectWithoutReferralCodeInput>
    createMany?: ReferredUserCreateManyReferralCodeInputEnvelope
    connect?: Enumerable<ReferredUserWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutReferralCodesNestedInput = {
    create?: XOR<UserCreateWithoutReferralCodesInput, UserUncheckedCreateWithoutReferralCodesInput>
    connectOrCreate?: UserCreateOrConnectWithoutReferralCodesInput
    upsert?: UserUpsertWithoutReferralCodesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutReferralCodesInput, UserUncheckedUpdateWithoutReferralCodesInput>
  }

  export type ReferredUserUpdateManyWithoutReferralCodeNestedInput = {
    create?: XOR<Enumerable<ReferredUserCreateWithoutReferralCodeInput>, Enumerable<ReferredUserUncheckedCreateWithoutReferralCodeInput>>
    connectOrCreate?: Enumerable<ReferredUserCreateOrConnectWithoutReferralCodeInput>
    upsert?: Enumerable<ReferredUserUpsertWithWhereUniqueWithoutReferralCodeInput>
    createMany?: ReferredUserCreateManyReferralCodeInputEnvelope
    set?: Enumerable<ReferredUserWhereUniqueInput>
    disconnect?: Enumerable<ReferredUserWhereUniqueInput>
    delete?: Enumerable<ReferredUserWhereUniqueInput>
    connect?: Enumerable<ReferredUserWhereUniqueInput>
    update?: Enumerable<ReferredUserUpdateWithWhereUniqueWithoutReferralCodeInput>
    updateMany?: Enumerable<ReferredUserUpdateManyWithWhereWithoutReferralCodeInput>
    deleteMany?: Enumerable<ReferredUserScalarWhereInput>
  }

  export type ReferredUserUncheckedUpdateManyWithoutReferralCodeNestedInput = {
    create?: XOR<Enumerable<ReferredUserCreateWithoutReferralCodeInput>, Enumerable<ReferredUserUncheckedCreateWithoutReferralCodeInput>>
    connectOrCreate?: Enumerable<ReferredUserCreateOrConnectWithoutReferralCodeInput>
    upsert?: Enumerable<ReferredUserUpsertWithWhereUniqueWithoutReferralCodeInput>
    createMany?: ReferredUserCreateManyReferralCodeInputEnvelope
    set?: Enumerable<ReferredUserWhereUniqueInput>
    disconnect?: Enumerable<ReferredUserWhereUniqueInput>
    delete?: Enumerable<ReferredUserWhereUniqueInput>
    connect?: Enumerable<ReferredUserWhereUniqueInput>
    update?: Enumerable<ReferredUserUpdateWithWhereUniqueWithoutReferralCodeInput>
    updateMany?: Enumerable<ReferredUserUpdateManyWithWhereWithoutReferralCodeInput>
    deleteMany?: Enumerable<ReferredUserScalarWhereInput>
  }

  export type ReferralCodeCreateNestedOneWithoutReferredInput = {
    create?: XOR<ReferralCodeCreateWithoutReferredInput, ReferralCodeUncheckedCreateWithoutReferredInput>
    connectOrCreate?: ReferralCodeCreateOrConnectWithoutReferredInput
    connect?: ReferralCodeWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReferredUsersInput = {
    create?: XOR<UserCreateWithoutReferredUsersInput, UserUncheckedCreateWithoutReferredUsersInput>
    connectOrCreate?: UserCreateOrConnectWithoutReferredUsersInput
    connect?: UserWhereUniqueInput
  }

  export type ReferralCodeUpdateOneRequiredWithoutReferredNestedInput = {
    create?: XOR<ReferralCodeCreateWithoutReferredInput, ReferralCodeUncheckedCreateWithoutReferredInput>
    connectOrCreate?: ReferralCodeCreateOrConnectWithoutReferredInput
    upsert?: ReferralCodeUpsertWithoutReferredInput
    connect?: ReferralCodeWhereUniqueInput
    update?: XOR<ReferralCodeUpdateWithoutReferredInput, ReferralCodeUncheckedUpdateWithoutReferredInput>
  }

  export type UserUpdateOneRequiredWithoutReferredUsersNestedInput = {
    create?: XOR<UserCreateWithoutReferredUsersInput, UserUncheckedCreateWithoutReferredUsersInput>
    connectOrCreate?: UserCreateOrConnectWithoutReferredUsersInput
    upsert?: UserUpsertWithoutReferredUsersInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutReferredUsersInput, UserUncheckedUpdateWithoutReferredUsersInput>
  }

  export type ApiServerCreateNestedOneWithoutNetworksInput = {
    create?: XOR<ApiServerCreateWithoutNetworksInput, ApiServerUncheckedCreateWithoutNetworksInput>
    connectOrCreate?: ApiServerCreateOrConnectWithoutNetworksInput
    connect?: ApiServerWhereUniqueInput
  }

  export type NetworkMemberCreateNestedManyWithoutNetworkInput = {
    create?: XOR<Enumerable<NetworkMemberCreateWithoutNetworkInput>, Enumerable<NetworkMemberUncheckedCreateWithoutNetworkInput>>
    connectOrCreate?: Enumerable<NetworkMemberCreateOrConnectWithoutNetworkInput>
    createMany?: NetworkMemberCreateManyNetworkInputEnvelope
    connect?: Enumerable<NetworkMemberWhereUniqueInput>
  }

  export type NetworkMemberUncheckedCreateNestedManyWithoutNetworkInput = {
    create?: XOR<Enumerable<NetworkMemberCreateWithoutNetworkInput>, Enumerable<NetworkMemberUncheckedCreateWithoutNetworkInput>>
    connectOrCreate?: Enumerable<NetworkMemberCreateOrConnectWithoutNetworkInput>
    createMany?: NetworkMemberCreateManyNetworkInputEnvelope
    connect?: Enumerable<NetworkMemberWhereUniqueInput>
  }

  export type ApiServerUpdateOneRequiredWithoutNetworksNestedInput = {
    create?: XOR<ApiServerCreateWithoutNetworksInput, ApiServerUncheckedCreateWithoutNetworksInput>
    connectOrCreate?: ApiServerCreateOrConnectWithoutNetworksInput
    upsert?: ApiServerUpsertWithoutNetworksInput
    connect?: ApiServerWhereUniqueInput
    update?: XOR<ApiServerUpdateWithoutNetworksInput, ApiServerUncheckedUpdateWithoutNetworksInput>
  }

  export type NetworkMemberUpdateManyWithoutNetworkNestedInput = {
    create?: XOR<Enumerable<NetworkMemberCreateWithoutNetworkInput>, Enumerable<NetworkMemberUncheckedCreateWithoutNetworkInput>>
    connectOrCreate?: Enumerable<NetworkMemberCreateOrConnectWithoutNetworkInput>
    upsert?: Enumerable<NetworkMemberUpsertWithWhereUniqueWithoutNetworkInput>
    createMany?: NetworkMemberCreateManyNetworkInputEnvelope
    set?: Enumerable<NetworkMemberWhereUniqueInput>
    disconnect?: Enumerable<NetworkMemberWhereUniqueInput>
    delete?: Enumerable<NetworkMemberWhereUniqueInput>
    connect?: Enumerable<NetworkMemberWhereUniqueInput>
    update?: Enumerable<NetworkMemberUpdateWithWhereUniqueWithoutNetworkInput>
    updateMany?: Enumerable<NetworkMemberUpdateManyWithWhereWithoutNetworkInput>
    deleteMany?: Enumerable<NetworkMemberScalarWhereInput>
  }

  export type NetworkMemberUncheckedUpdateManyWithoutNetworkNestedInput = {
    create?: XOR<Enumerable<NetworkMemberCreateWithoutNetworkInput>, Enumerable<NetworkMemberUncheckedCreateWithoutNetworkInput>>
    connectOrCreate?: Enumerable<NetworkMemberCreateOrConnectWithoutNetworkInput>
    upsert?: Enumerable<NetworkMemberUpsertWithWhereUniqueWithoutNetworkInput>
    createMany?: NetworkMemberCreateManyNetworkInputEnvelope
    set?: Enumerable<NetworkMemberWhereUniqueInput>
    disconnect?: Enumerable<NetworkMemberWhereUniqueInput>
    delete?: Enumerable<NetworkMemberWhereUniqueInput>
    connect?: Enumerable<NetworkMemberWhereUniqueInput>
    update?: Enumerable<NetworkMemberUpdateWithWhereUniqueWithoutNetworkInput>
    updateMany?: Enumerable<NetworkMemberUpdateManyWithWhereWithoutNetworkInput>
    deleteMany?: Enumerable<NetworkMemberScalarWhereInput>
  }

  export type NetworkCreateNestedOneWithoutMembersInput = {
    create?: XOR<NetworkCreateWithoutMembersInput, NetworkUncheckedCreateWithoutMembersInput>
    connectOrCreate?: NetworkCreateOrConnectWithoutMembersInput
    connect?: NetworkWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutNetworkMemberInput = {
    create?: XOR<UserCreateWithoutNetworkMemberInput, UserUncheckedCreateWithoutNetworkMemberInput>
    connectOrCreate?: UserCreateOrConnectWithoutNetworkMemberInput
    connect?: UserWhereUniqueInput
  }

  export type NetworkUpdateOneRequiredWithoutMembersNestedInput = {
    create?: XOR<NetworkCreateWithoutMembersInput, NetworkUncheckedCreateWithoutMembersInput>
    connectOrCreate?: NetworkCreateOrConnectWithoutMembersInput
    upsert?: NetworkUpsertWithoutMembersInput
    connect?: NetworkWhereUniqueInput
    update?: XOR<NetworkUpdateWithoutMembersInput, NetworkUncheckedUpdateWithoutMembersInput>
  }

  export type UserUpdateOneRequiredWithoutNetworkMemberNestedInput = {
    create?: XOR<UserCreateWithoutNetworkMemberInput, UserUncheckedCreateWithoutNetworkMemberInput>
    connectOrCreate?: UserCreateOrConnectWithoutNetworkMemberInput
    upsert?: UserUpsertWithoutNetworkMemberInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutNetworkMemberInput, UserUncheckedUpdateWithoutNetworkMemberInput>
  }

  export type UserCreateNestedOneWithoutShippingOrdersInput = {
    create?: XOR<UserCreateWithoutShippingOrdersInput, UserUncheckedCreateWithoutShippingOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutShippingOrdersInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutShippingOrdersNestedInput = {
    create?: XOR<UserCreateWithoutShippingOrdersInput, UserUncheckedCreateWithoutShippingOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutShippingOrdersInput
    upsert?: UserUpsertWithoutShippingOrdersInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutShippingOrdersInput, UserUncheckedUpdateWithoutShippingOrdersInput>
  }

  export type UserCreateNestedOneWithoutRechargeRequestsInput = {
    create?: XOR<UserCreateWithoutRechargeRequestsInput, UserUncheckedCreateWithoutRechargeRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRechargeRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRechargeRequestsNestedInput = {
    create?: XOR<UserCreateWithoutRechargeRequestsInput, UserUncheckedCreateWithoutRechargeRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRechargeRequestsInput
    upsert?: UserUpsertWithoutRechargeRequestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutRechargeRequestsInput, UserUncheckedUpdateWithoutRechargeRequestsInput>
  }

  export type UserCreateNestedOneWithoutPreferencesInput = {
    create?: XOR<UserCreateWithoutPreferencesInput, UserUncheckedCreateWithoutPreferencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPreferencesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPreferencesNestedInput = {
    create?: XOR<UserCreateWithoutPreferencesInput, UserUncheckedCreateWithoutPreferencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPreferencesInput
    upsert?: UserUpsertWithoutPreferencesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutPreferencesInput, UserUncheckedUpdateWithoutPreferencesInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }
  export type NestedJsonFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase>, Exclude<keyof Required<NestedJsonFilterBase>, 'path'>>,
        Required<NestedJsonFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase>, 'path'>>

  export type NestedJsonFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type ActionLogCreateWithoutServerInput = {
    id?: string
    type: string
    details: JsonNullValueInput | InputJsonValue
    isRevertable?: boolean
    revertedAt?: Date | string | null
    revertedBy?: string | null
    createdAt?: Date | string
    initiatorUser?: UserCreateNestedOneWithoutInitiatedActionsInput
    targetUser?: UserCreateNestedOneWithoutTargetedActionsInput
  }

  export type ActionLogUncheckedCreateWithoutServerInput = {
    id?: string
    initiatorUserId?: string | null
    targetUserId?: string | null
    type: string
    details: JsonNullValueInput | InputJsonValue
    isRevertable?: boolean
    revertedAt?: Date | string | null
    revertedBy?: string | null
    createdAt?: Date | string
  }

  export type ActionLogCreateOrConnectWithoutServerInput = {
    where: ActionLogWhereUniqueInput
    create: XOR<ActionLogCreateWithoutServerInput, ActionLogUncheckedCreateWithoutServerInput>
  }

  export type ActionLogCreateManyServerInputEnvelope = {
    data: Enumerable<ActionLogCreateManyServerInput>
    skipDuplicates?: boolean
  }

  export type NetworkCreateWithoutServerInput = {
    id?: string
    name: string
    leaderId: string
    bankBalance?: number
    level?: number
    roleId?: string | null
    logChannelId?: string | null
    status?: string
    disbandRequestAt?: Date | string | null
    members?: NetworkMemberCreateNestedManyWithoutNetworkInput
  }

  export type NetworkUncheckedCreateWithoutServerInput = {
    id?: string
    name: string
    leaderId: string
    bankBalance?: number
    level?: number
    roleId?: string | null
    logChannelId?: string | null
    status?: string
    disbandRequestAt?: Date | string | null
    members?: NetworkMemberUncheckedCreateNestedManyWithoutNetworkInput
  }

  export type NetworkCreateOrConnectWithoutServerInput = {
    where: NetworkWhereUniqueInput
    create: XOR<NetworkCreateWithoutServerInput, NetworkUncheckedCreateWithoutServerInput>
  }

  export type NetworkCreateManyServerInputEnvelope = {
    data: Enumerable<NetworkCreateManyServerInput>
    skipDuplicates?: boolean
  }

  export type TransactionCreateWithoutServerInput = {
    id?: string
    type: string
    amount: number
    description: string
    networkId?: string | null
    baseAmount?: number | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateWithoutServerInput = {
    id?: string
    userId: string
    type: string
    amount: number
    description: string
    networkId?: string | null
    baseAmount?: number | null
    createdAt?: Date | string
  }

  export type TransactionCreateOrConnectWithoutServerInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutServerInput, TransactionUncheckedCreateWithoutServerInput>
  }

  export type TransactionCreateManyServerInputEnvelope = {
    data: Enumerable<TransactionCreateManyServerInput>
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutServerInput = {
    id?: string
    discordId: string
    username: string
    balance?: number
    xp?: number
    level?: number
    dailyStreak?: number
    lastDaily?: Date | string | null
    hasReceivedWelcomeShipping?: boolean
    lastCoinflip?: Date | string | null
    coinflipPlaysToday?: number
    coinflipWinStreak?: number
    xpBonusPerRicarica?: number
    costoSpedizioneItalia?: number
    costoSpedizioneEuropa?: number
    scontoBonusRicarica?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    initiatedActions?: ActionLogCreateNestedManyWithoutInitiatorUserInput
    targetedActions?: ActionLogCreateNestedManyWithoutTargetUserInput
    networkMember?: NetworkMemberCreateNestedOneWithoutUserInput
    referralCodes?: ReferralCodeCreateNestedManyWithoutOwnerInput
    referredUsers?: ReferredUserCreateNestedManyWithoutUserInput
    shippingOrders?: ShippingOrderCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    rechargeRequests?: RechargeRequestCreateNestedManyWithoutUserInput
    preferences?: UserPreferencesCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutServerInput = {
    id?: string
    discordId: string
    username: string
    balance?: number
    xp?: number
    level?: number
    dailyStreak?: number
    lastDaily?: Date | string | null
    hasReceivedWelcomeShipping?: boolean
    lastCoinflip?: Date | string | null
    coinflipPlaysToday?: number
    coinflipWinStreak?: number
    xpBonusPerRicarica?: number
    costoSpedizioneItalia?: number
    costoSpedizioneEuropa?: number
    scontoBonusRicarica?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    initiatedActions?: ActionLogUncheckedCreateNestedManyWithoutInitiatorUserInput
    targetedActions?: ActionLogUncheckedCreateNestedManyWithoutTargetUserInput
    networkMember?: NetworkMemberUncheckedCreateNestedOneWithoutUserInput
    referralCodes?: ReferralCodeUncheckedCreateNestedManyWithoutOwnerInput
    referredUsers?: ReferredUserUncheckedCreateNestedManyWithoutUserInput
    shippingOrders?: ShippingOrderUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    rechargeRequests?: RechargeRequestUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferencesUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutServerInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutServerInput, UserUncheckedCreateWithoutServerInput>
  }

  export type UserCreateManyServerInputEnvelope = {
    data: Enumerable<UserCreateManyServerInput>
    skipDuplicates?: boolean
  }

  export type ActionLogUpsertWithWhereUniqueWithoutServerInput = {
    where: ActionLogWhereUniqueInput
    update: XOR<ActionLogUpdateWithoutServerInput, ActionLogUncheckedUpdateWithoutServerInput>
    create: XOR<ActionLogCreateWithoutServerInput, ActionLogUncheckedCreateWithoutServerInput>
  }

  export type ActionLogUpdateWithWhereUniqueWithoutServerInput = {
    where: ActionLogWhereUniqueInput
    data: XOR<ActionLogUpdateWithoutServerInput, ActionLogUncheckedUpdateWithoutServerInput>
  }

  export type ActionLogUpdateManyWithWhereWithoutServerInput = {
    where: ActionLogScalarWhereInput
    data: XOR<ActionLogUpdateManyMutationInput, ActionLogUncheckedUpdateManyWithoutActionLogsInput>
  }

  export type ActionLogScalarWhereInput = {
    AND?: Enumerable<ActionLogScalarWhereInput>
    OR?: Enumerable<ActionLogScalarWhereInput>
    NOT?: Enumerable<ActionLogScalarWhereInput>
    id?: StringFilter | string
    serverId?: StringFilter | string
    initiatorUserId?: StringNullableFilter | string | null
    targetUserId?: StringNullableFilter | string | null
    type?: StringFilter | string
    details?: JsonFilter
    isRevertable?: BoolFilter | boolean
    revertedAt?: DateTimeNullableFilter | Date | string | null
    revertedBy?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
  }

  export type NetworkUpsertWithWhereUniqueWithoutServerInput = {
    where: NetworkWhereUniqueInput
    update: XOR<NetworkUpdateWithoutServerInput, NetworkUncheckedUpdateWithoutServerInput>
    create: XOR<NetworkCreateWithoutServerInput, NetworkUncheckedCreateWithoutServerInput>
  }

  export type NetworkUpdateWithWhereUniqueWithoutServerInput = {
    where: NetworkWhereUniqueInput
    data: XOR<NetworkUpdateWithoutServerInput, NetworkUncheckedUpdateWithoutServerInput>
  }

  export type NetworkUpdateManyWithWhereWithoutServerInput = {
    where: NetworkScalarWhereInput
    data: XOR<NetworkUpdateManyMutationInput, NetworkUncheckedUpdateManyWithoutNetworksInput>
  }

  export type NetworkScalarWhereInput = {
    AND?: Enumerable<NetworkScalarWhereInput>
    OR?: Enumerable<NetworkScalarWhereInput>
    NOT?: Enumerable<NetworkScalarWhereInput>
    id?: StringFilter | string
    serverId?: StringFilter | string
    name?: StringFilter | string
    leaderId?: StringFilter | string
    bankBalance?: FloatFilter | number
    level?: IntFilter | number
    roleId?: StringNullableFilter | string | null
    logChannelId?: StringNullableFilter | string | null
    status?: StringFilter | string
    disbandRequestAt?: DateTimeNullableFilter | Date | string | null
  }

  export type TransactionUpsertWithWhereUniqueWithoutServerInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutServerInput, TransactionUncheckedUpdateWithoutServerInput>
    create: XOR<TransactionCreateWithoutServerInput, TransactionUncheckedCreateWithoutServerInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutServerInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutServerInput, TransactionUncheckedUpdateWithoutServerInput>
  }

  export type TransactionUpdateManyWithWhereWithoutServerInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutTransactionsInput>
  }

  export type TransactionScalarWhereInput = {
    AND?: Enumerable<TransactionScalarWhereInput>
    OR?: Enumerable<TransactionScalarWhereInput>
    NOT?: Enumerable<TransactionScalarWhereInput>
    id?: StringFilter | string
    serverId?: StringFilter | string
    userId?: StringFilter | string
    type?: StringFilter | string
    amount?: FloatFilter | number
    description?: StringFilter | string
    networkId?: StringNullableFilter | string | null
    baseAmount?: FloatNullableFilter | number | null
    createdAt?: DateTimeFilter | Date | string
  }

  export type UserUpsertWithWhereUniqueWithoutServerInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutServerInput, UserUncheckedUpdateWithoutServerInput>
    create: XOR<UserCreateWithoutServerInput, UserUncheckedCreateWithoutServerInput>
  }

  export type UserUpdateWithWhereUniqueWithoutServerInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutServerInput, UserUncheckedUpdateWithoutServerInput>
  }

  export type UserUpdateManyWithWhereWithoutServerInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUsersInput>
  }

  export type UserScalarWhereInput = {
    AND?: Enumerable<UserScalarWhereInput>
    OR?: Enumerable<UserScalarWhereInput>
    NOT?: Enumerable<UserScalarWhereInput>
    id?: StringFilter | string
    serverId?: StringFilter | string
    discordId?: StringFilter | string
    username?: StringFilter | string
    balance?: FloatFilter | number
    xp?: IntFilter | number
    level?: IntFilter | number
    dailyStreak?: IntFilter | number
    lastDaily?: DateTimeNullableFilter | Date | string | null
    hasReceivedWelcomeShipping?: BoolFilter | boolean
    lastCoinflip?: DateTimeNullableFilter | Date | string | null
    coinflipPlaysToday?: IntFilter | number
    coinflipWinStreak?: IntFilter | number
    xpBonusPerRicarica?: FloatFilter | number
    costoSpedizioneItalia?: FloatFilter | number
    costoSpedizioneEuropa?: FloatFilter | number
    scontoBonusRicarica?: FloatFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserCreateWithoutInitiatedActionsInput = {
    id?: string
    discordId: string
    username: string
    balance?: number
    xp?: number
    level?: number
    dailyStreak?: number
    lastDaily?: Date | string | null
    hasReceivedWelcomeShipping?: boolean
    lastCoinflip?: Date | string | null
    coinflipPlaysToday?: number
    coinflipWinStreak?: number
    xpBonusPerRicarica?: number
    costoSpedizioneItalia?: number
    costoSpedizioneEuropa?: number
    scontoBonusRicarica?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    targetedActions?: ActionLogCreateNestedManyWithoutTargetUserInput
    networkMember?: NetworkMemberCreateNestedOneWithoutUserInput
    referralCodes?: ReferralCodeCreateNestedManyWithoutOwnerInput
    referredUsers?: ReferredUserCreateNestedManyWithoutUserInput
    shippingOrders?: ShippingOrderCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    rechargeRequests?: RechargeRequestCreateNestedManyWithoutUserInput
    preferences?: UserPreferencesCreateNestedOneWithoutUserInput
    server: ApiServerCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutInitiatedActionsInput = {
    id?: string
    serverId: string
    discordId: string
    username: string
    balance?: number
    xp?: number
    level?: number
    dailyStreak?: number
    lastDaily?: Date | string | null
    hasReceivedWelcomeShipping?: boolean
    lastCoinflip?: Date | string | null
    coinflipPlaysToday?: number
    coinflipWinStreak?: number
    xpBonusPerRicarica?: number
    costoSpedizioneItalia?: number
    costoSpedizioneEuropa?: number
    scontoBonusRicarica?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    targetedActions?: ActionLogUncheckedCreateNestedManyWithoutTargetUserInput
    networkMember?: NetworkMemberUncheckedCreateNestedOneWithoutUserInput
    referralCodes?: ReferralCodeUncheckedCreateNestedManyWithoutOwnerInput
    referredUsers?: ReferredUserUncheckedCreateNestedManyWithoutUserInput
    shippingOrders?: ShippingOrderUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    rechargeRequests?: RechargeRequestUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferencesUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutInitiatedActionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInitiatedActionsInput, UserUncheckedCreateWithoutInitiatedActionsInput>
  }

  export type ApiServerCreateWithoutActionLogsInput = {
    id?: string
    name: string
    ownerId: string
    apiKey: string
    activeModules?: ApiServerCreateactiveModulesInput | Enumerable<string>
    createdAt?: Date | string
    networks?: NetworkCreateNestedManyWithoutServerInput
    transactions?: TransactionCreateNestedManyWithoutServerInput
    users?: UserCreateNestedManyWithoutServerInput
  }

  export type ApiServerUncheckedCreateWithoutActionLogsInput = {
    id?: string
    name: string
    ownerId: string
    apiKey: string
    activeModules?: ApiServerCreateactiveModulesInput | Enumerable<string>
    createdAt?: Date | string
    networks?: NetworkUncheckedCreateNestedManyWithoutServerInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutServerInput
    users?: UserUncheckedCreateNestedManyWithoutServerInput
  }

  export type ApiServerCreateOrConnectWithoutActionLogsInput = {
    where: ApiServerWhereUniqueInput
    create: XOR<ApiServerCreateWithoutActionLogsInput, ApiServerUncheckedCreateWithoutActionLogsInput>
  }

  export type UserCreateWithoutTargetedActionsInput = {
    id?: string
    discordId: string
    username: string
    balance?: number
    xp?: number
    level?: number
    dailyStreak?: number
    lastDaily?: Date | string | null
    hasReceivedWelcomeShipping?: boolean
    lastCoinflip?: Date | string | null
    coinflipPlaysToday?: number
    coinflipWinStreak?: number
    xpBonusPerRicarica?: number
    costoSpedizioneItalia?: number
    costoSpedizioneEuropa?: number
    scontoBonusRicarica?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    initiatedActions?: ActionLogCreateNestedManyWithoutInitiatorUserInput
    networkMember?: NetworkMemberCreateNestedOneWithoutUserInput
    referralCodes?: ReferralCodeCreateNestedManyWithoutOwnerInput
    referredUsers?: ReferredUserCreateNestedManyWithoutUserInput
    shippingOrders?: ShippingOrderCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    rechargeRequests?: RechargeRequestCreateNestedManyWithoutUserInput
    preferences?: UserPreferencesCreateNestedOneWithoutUserInput
    server: ApiServerCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutTargetedActionsInput = {
    id?: string
    serverId: string
    discordId: string
    username: string
    balance?: number
    xp?: number
    level?: number
    dailyStreak?: number
    lastDaily?: Date | string | null
    hasReceivedWelcomeShipping?: boolean
    lastCoinflip?: Date | string | null
    coinflipPlaysToday?: number
    coinflipWinStreak?: number
    xpBonusPerRicarica?: number
    costoSpedizioneItalia?: number
    costoSpedizioneEuropa?: number
    scontoBonusRicarica?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    initiatedActions?: ActionLogUncheckedCreateNestedManyWithoutInitiatorUserInput
    networkMember?: NetworkMemberUncheckedCreateNestedOneWithoutUserInput
    referralCodes?: ReferralCodeUncheckedCreateNestedManyWithoutOwnerInput
    referredUsers?: ReferredUserUncheckedCreateNestedManyWithoutUserInput
    shippingOrders?: ShippingOrderUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    rechargeRequests?: RechargeRequestUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferencesUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTargetedActionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTargetedActionsInput, UserUncheckedCreateWithoutTargetedActionsInput>
  }

  export type UserUpsertWithoutInitiatedActionsInput = {
    update: XOR<UserUpdateWithoutInitiatedActionsInput, UserUncheckedUpdateWithoutInitiatedActionsInput>
    create: XOR<UserCreateWithoutInitiatedActionsInput, UserUncheckedCreateWithoutInitiatedActionsInput>
  }

  export type UserUpdateWithoutInitiatedActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    discordId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    dailyStreak?: IntFieldUpdateOperationsInput | number
    lastDaily?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasReceivedWelcomeShipping?: BoolFieldUpdateOperationsInput | boolean
    lastCoinflip?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coinflipPlaysToday?: IntFieldUpdateOperationsInput | number
    coinflipWinStreak?: IntFieldUpdateOperationsInput | number
    xpBonusPerRicarica?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneItalia?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneEuropa?: FloatFieldUpdateOperationsInput | number
    scontoBonusRicarica?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targetedActions?: ActionLogUpdateManyWithoutTargetUserNestedInput
    networkMember?: NetworkMemberUpdateOneWithoutUserNestedInput
    referralCodes?: ReferralCodeUpdateManyWithoutOwnerNestedInput
    referredUsers?: ReferredUserUpdateManyWithoutUserNestedInput
    shippingOrders?: ShippingOrderUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    rechargeRequests?: RechargeRequestUpdateManyWithoutUserNestedInput
    preferences?: UserPreferencesUpdateOneWithoutUserNestedInput
    server?: ApiServerUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutInitiatedActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    discordId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    dailyStreak?: IntFieldUpdateOperationsInput | number
    lastDaily?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasReceivedWelcomeShipping?: BoolFieldUpdateOperationsInput | boolean
    lastCoinflip?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coinflipPlaysToday?: IntFieldUpdateOperationsInput | number
    coinflipWinStreak?: IntFieldUpdateOperationsInput | number
    xpBonusPerRicarica?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneItalia?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneEuropa?: FloatFieldUpdateOperationsInput | number
    scontoBonusRicarica?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targetedActions?: ActionLogUncheckedUpdateManyWithoutTargetUserNestedInput
    networkMember?: NetworkMemberUncheckedUpdateOneWithoutUserNestedInput
    referralCodes?: ReferralCodeUncheckedUpdateManyWithoutOwnerNestedInput
    referredUsers?: ReferredUserUncheckedUpdateManyWithoutUserNestedInput
    shippingOrders?: ShippingOrderUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    rechargeRequests?: RechargeRequestUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferencesUncheckedUpdateOneWithoutUserNestedInput
  }

  export type ApiServerUpsertWithoutActionLogsInput = {
    update: XOR<ApiServerUpdateWithoutActionLogsInput, ApiServerUncheckedUpdateWithoutActionLogsInput>
    create: XOR<ApiServerCreateWithoutActionLogsInput, ApiServerUncheckedCreateWithoutActionLogsInput>
  }

  export type ApiServerUpdateWithoutActionLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    apiKey?: StringFieldUpdateOperationsInput | string
    activeModules?: ApiServerUpdateactiveModulesInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    networks?: NetworkUpdateManyWithoutServerNestedInput
    transactions?: TransactionUpdateManyWithoutServerNestedInput
    users?: UserUpdateManyWithoutServerNestedInput
  }

  export type ApiServerUncheckedUpdateWithoutActionLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    apiKey?: StringFieldUpdateOperationsInput | string
    activeModules?: ApiServerUpdateactiveModulesInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    networks?: NetworkUncheckedUpdateManyWithoutServerNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutServerNestedInput
    users?: UserUncheckedUpdateManyWithoutServerNestedInput
  }

  export type UserUpsertWithoutTargetedActionsInput = {
    update: XOR<UserUpdateWithoutTargetedActionsInput, UserUncheckedUpdateWithoutTargetedActionsInput>
    create: XOR<UserCreateWithoutTargetedActionsInput, UserUncheckedCreateWithoutTargetedActionsInput>
  }

  export type UserUpdateWithoutTargetedActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    discordId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    dailyStreak?: IntFieldUpdateOperationsInput | number
    lastDaily?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasReceivedWelcomeShipping?: BoolFieldUpdateOperationsInput | boolean
    lastCoinflip?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coinflipPlaysToday?: IntFieldUpdateOperationsInput | number
    coinflipWinStreak?: IntFieldUpdateOperationsInput | number
    xpBonusPerRicarica?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneItalia?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneEuropa?: FloatFieldUpdateOperationsInput | number
    scontoBonusRicarica?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initiatedActions?: ActionLogUpdateManyWithoutInitiatorUserNestedInput
    networkMember?: NetworkMemberUpdateOneWithoutUserNestedInput
    referralCodes?: ReferralCodeUpdateManyWithoutOwnerNestedInput
    referredUsers?: ReferredUserUpdateManyWithoutUserNestedInput
    shippingOrders?: ShippingOrderUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    rechargeRequests?: RechargeRequestUpdateManyWithoutUserNestedInput
    preferences?: UserPreferencesUpdateOneWithoutUserNestedInput
    server?: ApiServerUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutTargetedActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    discordId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    dailyStreak?: IntFieldUpdateOperationsInput | number
    lastDaily?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasReceivedWelcomeShipping?: BoolFieldUpdateOperationsInput | boolean
    lastCoinflip?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coinflipPlaysToday?: IntFieldUpdateOperationsInput | number
    coinflipWinStreak?: IntFieldUpdateOperationsInput | number
    xpBonusPerRicarica?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneItalia?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneEuropa?: FloatFieldUpdateOperationsInput | number
    scontoBonusRicarica?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initiatedActions?: ActionLogUncheckedUpdateManyWithoutInitiatorUserNestedInput
    networkMember?: NetworkMemberUncheckedUpdateOneWithoutUserNestedInput
    referralCodes?: ReferralCodeUncheckedUpdateManyWithoutOwnerNestedInput
    referredUsers?: ReferredUserUncheckedUpdateManyWithoutUserNestedInput
    shippingOrders?: ShippingOrderUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    rechargeRequests?: RechargeRequestUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferencesUncheckedUpdateOneWithoutUserNestedInput
  }

  export type ActionLogCreateWithoutInitiatorUserInput = {
    id?: string
    type: string
    details: JsonNullValueInput | InputJsonValue
    isRevertable?: boolean
    revertedAt?: Date | string | null
    revertedBy?: string | null
    createdAt?: Date | string
    server: ApiServerCreateNestedOneWithoutActionLogsInput
    targetUser?: UserCreateNestedOneWithoutTargetedActionsInput
  }

  export type ActionLogUncheckedCreateWithoutInitiatorUserInput = {
    id?: string
    serverId: string
    targetUserId?: string | null
    type: string
    details: JsonNullValueInput | InputJsonValue
    isRevertable?: boolean
    revertedAt?: Date | string | null
    revertedBy?: string | null
    createdAt?: Date | string
  }

  export type ActionLogCreateOrConnectWithoutInitiatorUserInput = {
    where: ActionLogWhereUniqueInput
    create: XOR<ActionLogCreateWithoutInitiatorUserInput, ActionLogUncheckedCreateWithoutInitiatorUserInput>
  }

  export type ActionLogCreateManyInitiatorUserInputEnvelope = {
    data: Enumerable<ActionLogCreateManyInitiatorUserInput>
    skipDuplicates?: boolean
  }

  export type ActionLogCreateWithoutTargetUserInput = {
    id?: string
    type: string
    details: JsonNullValueInput | InputJsonValue
    isRevertable?: boolean
    revertedAt?: Date | string | null
    revertedBy?: string | null
    createdAt?: Date | string
    initiatorUser?: UserCreateNestedOneWithoutInitiatedActionsInput
    server: ApiServerCreateNestedOneWithoutActionLogsInput
  }

  export type ActionLogUncheckedCreateWithoutTargetUserInput = {
    id?: string
    serverId: string
    initiatorUserId?: string | null
    type: string
    details: JsonNullValueInput | InputJsonValue
    isRevertable?: boolean
    revertedAt?: Date | string | null
    revertedBy?: string | null
    createdAt?: Date | string
  }

  export type ActionLogCreateOrConnectWithoutTargetUserInput = {
    where: ActionLogWhereUniqueInput
    create: XOR<ActionLogCreateWithoutTargetUserInput, ActionLogUncheckedCreateWithoutTargetUserInput>
  }

  export type ActionLogCreateManyTargetUserInputEnvelope = {
    data: Enumerable<ActionLogCreateManyTargetUserInput>
    skipDuplicates?: boolean
  }

  export type NetworkMemberCreateWithoutUserInput = {
    joinDate?: Date | string
    network: NetworkCreateNestedOneWithoutMembersInput
  }

  export type NetworkMemberUncheckedCreateWithoutUserInput = {
    networkId: string
    joinDate?: Date | string
  }

  export type NetworkMemberCreateOrConnectWithoutUserInput = {
    where: NetworkMemberWhereUniqueInput
    create: XOR<NetworkMemberCreateWithoutUserInput, NetworkMemberUncheckedCreateWithoutUserInput>
  }

  export type ReferralCodeCreateWithoutOwnerInput = {
    id?: string
    serverId: string
    code: string
    createdAt?: Date | string
    referred?: ReferredUserCreateNestedManyWithoutReferralCodeInput
  }

  export type ReferralCodeUncheckedCreateWithoutOwnerInput = {
    id?: string
    serverId: string
    code: string
    createdAt?: Date | string
    referred?: ReferredUserUncheckedCreateNestedManyWithoutReferralCodeInput
  }

  export type ReferralCodeCreateOrConnectWithoutOwnerInput = {
    where: ReferralCodeWhereUniqueInput
    create: XOR<ReferralCodeCreateWithoutOwnerInput, ReferralCodeUncheckedCreateWithoutOwnerInput>
  }

  export type ReferralCodeCreateManyOwnerInputEnvelope = {
    data: Enumerable<ReferralCodeCreateManyOwnerInput>
    skipDuplicates?: boolean
  }

  export type ReferredUserCreateWithoutUserInput = {
    id?: string
    referralBonusGiven?: boolean
    createdAt?: Date | string
    referralCode: ReferralCodeCreateNestedOneWithoutReferredInput
  }

  export type ReferredUserUncheckedCreateWithoutUserInput = {
    id?: string
    serverId: string
    referredByCode: string
    referralBonusGiven?: boolean
    createdAt?: Date | string
  }

  export type ReferredUserCreateOrConnectWithoutUserInput = {
    where: ReferredUserWhereUniqueInput
    create: XOR<ReferredUserCreateWithoutUserInput, ReferredUserUncheckedCreateWithoutUserInput>
  }

  export type ReferredUserCreateManyUserInputEnvelope = {
    data: Enumerable<ReferredUserCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ShippingOrderCreateWithoutUserInput = {
    id?: string
    serverId: string
    externalOrderId: string
    status?: string
    senderName: string
    senderAddress: string
    senderAddress2?: string | null
    senderZipcode: string
    senderCity: string
    senderPhone: string
    senderCountry: string
    recipientName: string
    recipientAddress: string
    recipientAddress2?: string | null
    recipientZipcode: string
    recipientCity: string
    recipientPhone: string
    recipientCountry: string
    carrier: string
    weight: string
    formatLabel?: number
    trackingId?: string | null
    trackingUrl?: string | null
    labelUrl?: string | null
    createdAt?: Date | string
    processedAt?: Date | string | null
    cost?: number | null
  }

  export type ShippingOrderUncheckedCreateWithoutUserInput = {
    id?: string
    serverId: string
    externalOrderId: string
    status?: string
    senderName: string
    senderAddress: string
    senderAddress2?: string | null
    senderZipcode: string
    senderCity: string
    senderPhone: string
    senderCountry: string
    recipientName: string
    recipientAddress: string
    recipientAddress2?: string | null
    recipientZipcode: string
    recipientCity: string
    recipientPhone: string
    recipientCountry: string
    carrier: string
    weight: string
    formatLabel?: number
    trackingId?: string | null
    trackingUrl?: string | null
    labelUrl?: string | null
    createdAt?: Date | string
    processedAt?: Date | string | null
    cost?: number | null
  }

  export type ShippingOrderCreateOrConnectWithoutUserInput = {
    where: ShippingOrderWhereUniqueInput
    create: XOR<ShippingOrderCreateWithoutUserInput, ShippingOrderUncheckedCreateWithoutUserInput>
  }

  export type ShippingOrderCreateManyUserInputEnvelope = {
    data: Enumerable<ShippingOrderCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type TransactionCreateWithoutUserInput = {
    id?: string
    type: string
    amount: number
    description: string
    networkId?: string | null
    baseAmount?: number | null
    createdAt?: Date | string
    server: ApiServerCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateWithoutUserInput = {
    id?: string
    serverId: string
    type: string
    amount: number
    description: string
    networkId?: string | null
    baseAmount?: number | null
    createdAt?: Date | string
  }

  export type TransactionCreateOrConnectWithoutUserInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput>
  }

  export type TransactionCreateManyUserInputEnvelope = {
    data: Enumerable<TransactionCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type RechargeRequestCreateWithoutUserInput = {
    id?: string
    serverId: string
    amount: number
    status?: string
    requestMessage?: string | null
    reviewedByUserId?: string | null
    reviewMessage?: string | null
    reviewedAt?: Date | string | null
    notificationSent?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RechargeRequestUncheckedCreateWithoutUserInput = {
    id?: string
    serverId: string
    amount: number
    status?: string
    requestMessage?: string | null
    reviewedByUserId?: string | null
    reviewMessage?: string | null
    reviewedAt?: Date | string | null
    notificationSent?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RechargeRequestCreateOrConnectWithoutUserInput = {
    where: RechargeRequestWhereUniqueInput
    create: XOR<RechargeRequestCreateWithoutUserInput, RechargeRequestUncheckedCreateWithoutUserInput>
  }

  export type RechargeRequestCreateManyUserInputEnvelope = {
    data: Enumerable<RechargeRequestCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type UserPreferencesCreateWithoutUserInput = {
    id?: string
    serverId: string
    notifyOrderStatus?: boolean
    notifyCredits?: boolean
    notifyRechargeStatus?: boolean
    defaultCarrier?: string | null
    defaultLabelFormat?: number
    language?: string
    theme?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPreferencesUncheckedCreateWithoutUserInput = {
    id?: string
    serverId: string
    notifyOrderStatus?: boolean
    notifyCredits?: boolean
    notifyRechargeStatus?: boolean
    defaultCarrier?: string | null
    defaultLabelFormat?: number
    language?: string
    theme?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPreferencesCreateOrConnectWithoutUserInput = {
    where: UserPreferencesWhereUniqueInput
    create: XOR<UserPreferencesCreateWithoutUserInput, UserPreferencesUncheckedCreateWithoutUserInput>
  }

  export type ApiServerCreateWithoutUsersInput = {
    id?: string
    name: string
    ownerId: string
    apiKey: string
    activeModules?: ApiServerCreateactiveModulesInput | Enumerable<string>
    createdAt?: Date | string
    actionLogs?: ActionLogCreateNestedManyWithoutServerInput
    networks?: NetworkCreateNestedManyWithoutServerInput
    transactions?: TransactionCreateNestedManyWithoutServerInput
  }

  export type ApiServerUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    ownerId: string
    apiKey: string
    activeModules?: ApiServerCreateactiveModulesInput | Enumerable<string>
    createdAt?: Date | string
    actionLogs?: ActionLogUncheckedCreateNestedManyWithoutServerInput
    networks?: NetworkUncheckedCreateNestedManyWithoutServerInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutServerInput
  }

  export type ApiServerCreateOrConnectWithoutUsersInput = {
    where: ApiServerWhereUniqueInput
    create: XOR<ApiServerCreateWithoutUsersInput, ApiServerUncheckedCreateWithoutUsersInput>
  }

  export type ActionLogUpsertWithWhereUniqueWithoutInitiatorUserInput = {
    where: ActionLogWhereUniqueInput
    update: XOR<ActionLogUpdateWithoutInitiatorUserInput, ActionLogUncheckedUpdateWithoutInitiatorUserInput>
    create: XOR<ActionLogCreateWithoutInitiatorUserInput, ActionLogUncheckedCreateWithoutInitiatorUserInput>
  }

  export type ActionLogUpdateWithWhereUniqueWithoutInitiatorUserInput = {
    where: ActionLogWhereUniqueInput
    data: XOR<ActionLogUpdateWithoutInitiatorUserInput, ActionLogUncheckedUpdateWithoutInitiatorUserInput>
  }

  export type ActionLogUpdateManyWithWhereWithoutInitiatorUserInput = {
    where: ActionLogScalarWhereInput
    data: XOR<ActionLogUpdateManyMutationInput, ActionLogUncheckedUpdateManyWithoutInitiatedActionsInput>
  }

  export type ActionLogUpsertWithWhereUniqueWithoutTargetUserInput = {
    where: ActionLogWhereUniqueInput
    update: XOR<ActionLogUpdateWithoutTargetUserInput, ActionLogUncheckedUpdateWithoutTargetUserInput>
    create: XOR<ActionLogCreateWithoutTargetUserInput, ActionLogUncheckedCreateWithoutTargetUserInput>
  }

  export type ActionLogUpdateWithWhereUniqueWithoutTargetUserInput = {
    where: ActionLogWhereUniqueInput
    data: XOR<ActionLogUpdateWithoutTargetUserInput, ActionLogUncheckedUpdateWithoutTargetUserInput>
  }

  export type ActionLogUpdateManyWithWhereWithoutTargetUserInput = {
    where: ActionLogScalarWhereInput
    data: XOR<ActionLogUpdateManyMutationInput, ActionLogUncheckedUpdateManyWithoutTargetedActionsInput>
  }

  export type NetworkMemberUpsertWithoutUserInput = {
    update: XOR<NetworkMemberUpdateWithoutUserInput, NetworkMemberUncheckedUpdateWithoutUserInput>
    create: XOR<NetworkMemberCreateWithoutUserInput, NetworkMemberUncheckedCreateWithoutUserInput>
  }

  export type NetworkMemberUpdateWithoutUserInput = {
    joinDate?: DateTimeFieldUpdateOperationsInput | Date | string
    network?: NetworkUpdateOneRequiredWithoutMembersNestedInput
  }

  export type NetworkMemberUncheckedUpdateWithoutUserInput = {
    networkId?: StringFieldUpdateOperationsInput | string
    joinDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferralCodeUpsertWithWhereUniqueWithoutOwnerInput = {
    where: ReferralCodeWhereUniqueInput
    update: XOR<ReferralCodeUpdateWithoutOwnerInput, ReferralCodeUncheckedUpdateWithoutOwnerInput>
    create: XOR<ReferralCodeCreateWithoutOwnerInput, ReferralCodeUncheckedCreateWithoutOwnerInput>
  }

  export type ReferralCodeUpdateWithWhereUniqueWithoutOwnerInput = {
    where: ReferralCodeWhereUniqueInput
    data: XOR<ReferralCodeUpdateWithoutOwnerInput, ReferralCodeUncheckedUpdateWithoutOwnerInput>
  }

  export type ReferralCodeUpdateManyWithWhereWithoutOwnerInput = {
    where: ReferralCodeScalarWhereInput
    data: XOR<ReferralCodeUpdateManyMutationInput, ReferralCodeUncheckedUpdateManyWithoutReferralCodesInput>
  }

  export type ReferralCodeScalarWhereInput = {
    AND?: Enumerable<ReferralCodeScalarWhereInput>
    OR?: Enumerable<ReferralCodeScalarWhereInput>
    NOT?: Enumerable<ReferralCodeScalarWhereInput>
    id?: StringFilter | string
    serverId?: StringFilter | string
    code?: StringFilter | string
    ownerId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
  }

  export type ReferredUserUpsertWithWhereUniqueWithoutUserInput = {
    where: ReferredUserWhereUniqueInput
    update: XOR<ReferredUserUpdateWithoutUserInput, ReferredUserUncheckedUpdateWithoutUserInput>
    create: XOR<ReferredUserCreateWithoutUserInput, ReferredUserUncheckedCreateWithoutUserInput>
  }

  export type ReferredUserUpdateWithWhereUniqueWithoutUserInput = {
    where: ReferredUserWhereUniqueInput
    data: XOR<ReferredUserUpdateWithoutUserInput, ReferredUserUncheckedUpdateWithoutUserInput>
  }

  export type ReferredUserUpdateManyWithWhereWithoutUserInput = {
    where: ReferredUserScalarWhereInput
    data: XOR<ReferredUserUpdateManyMutationInput, ReferredUserUncheckedUpdateManyWithoutReferredUsersInput>
  }

  export type ReferredUserScalarWhereInput = {
    AND?: Enumerable<ReferredUserScalarWhereInput>
    OR?: Enumerable<ReferredUserScalarWhereInput>
    NOT?: Enumerable<ReferredUserScalarWhereInput>
    id?: StringFilter | string
    serverId?: StringFilter | string
    userId?: StringFilter | string
    referredByCode?: StringFilter | string
    referralBonusGiven?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
  }

  export type ShippingOrderUpsertWithWhereUniqueWithoutUserInput = {
    where: ShippingOrderWhereUniqueInput
    update: XOR<ShippingOrderUpdateWithoutUserInput, ShippingOrderUncheckedUpdateWithoutUserInput>
    create: XOR<ShippingOrderCreateWithoutUserInput, ShippingOrderUncheckedCreateWithoutUserInput>
  }

  export type ShippingOrderUpdateWithWhereUniqueWithoutUserInput = {
    where: ShippingOrderWhereUniqueInput
    data: XOR<ShippingOrderUpdateWithoutUserInput, ShippingOrderUncheckedUpdateWithoutUserInput>
  }

  export type ShippingOrderUpdateManyWithWhereWithoutUserInput = {
    where: ShippingOrderScalarWhereInput
    data: XOR<ShippingOrderUpdateManyMutationInput, ShippingOrderUncheckedUpdateManyWithoutShippingOrdersInput>
  }

  export type ShippingOrderScalarWhereInput = {
    AND?: Enumerable<ShippingOrderScalarWhereInput>
    OR?: Enumerable<ShippingOrderScalarWhereInput>
    NOT?: Enumerable<ShippingOrderScalarWhereInput>
    id?: StringFilter | string
    serverId?: StringFilter | string
    userId?: StringFilter | string
    externalOrderId?: StringFilter | string
    status?: StringFilter | string
    senderName?: StringFilter | string
    senderAddress?: StringFilter | string
    senderAddress2?: StringNullableFilter | string | null
    senderZipcode?: StringFilter | string
    senderCity?: StringFilter | string
    senderPhone?: StringFilter | string
    senderCountry?: StringFilter | string
    recipientName?: StringFilter | string
    recipientAddress?: StringFilter | string
    recipientAddress2?: StringNullableFilter | string | null
    recipientZipcode?: StringFilter | string
    recipientCity?: StringFilter | string
    recipientPhone?: StringFilter | string
    recipientCountry?: StringFilter | string
    carrier?: StringFilter | string
    weight?: StringFilter | string
    formatLabel?: IntFilter | number
    trackingId?: StringNullableFilter | string | null
    trackingUrl?: StringNullableFilter | string | null
    labelUrl?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    processedAt?: DateTimeNullableFilter | Date | string | null
    cost?: FloatNullableFilter | number | null
  }

  export type TransactionUpsertWithWhereUniqueWithoutUserInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutUserInput, TransactionUncheckedUpdateWithoutUserInput>
    create: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutUserInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutUserInput, TransactionUncheckedUpdateWithoutUserInput>
  }

  export type TransactionUpdateManyWithWhereWithoutUserInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutTransactionsInput>
  }

  export type RechargeRequestUpsertWithWhereUniqueWithoutUserInput = {
    where: RechargeRequestWhereUniqueInput
    update: XOR<RechargeRequestUpdateWithoutUserInput, RechargeRequestUncheckedUpdateWithoutUserInput>
    create: XOR<RechargeRequestCreateWithoutUserInput, RechargeRequestUncheckedCreateWithoutUserInput>
  }

  export type RechargeRequestUpdateWithWhereUniqueWithoutUserInput = {
    where: RechargeRequestWhereUniqueInput
    data: XOR<RechargeRequestUpdateWithoutUserInput, RechargeRequestUncheckedUpdateWithoutUserInput>
  }

  export type RechargeRequestUpdateManyWithWhereWithoutUserInput = {
    where: RechargeRequestScalarWhereInput
    data: XOR<RechargeRequestUpdateManyMutationInput, RechargeRequestUncheckedUpdateManyWithoutRechargeRequestsInput>
  }

  export type RechargeRequestScalarWhereInput = {
    AND?: Enumerable<RechargeRequestScalarWhereInput>
    OR?: Enumerable<RechargeRequestScalarWhereInput>
    NOT?: Enumerable<RechargeRequestScalarWhereInput>
    id?: StringFilter | string
    serverId?: StringFilter | string
    userId?: StringFilter | string
    amount?: FloatFilter | number
    status?: StringFilter | string
    requestMessage?: StringNullableFilter | string | null
    reviewedByUserId?: StringNullableFilter | string | null
    reviewMessage?: StringNullableFilter | string | null
    reviewedAt?: DateTimeNullableFilter | Date | string | null
    notificationSent?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserPreferencesUpsertWithoutUserInput = {
    update: XOR<UserPreferencesUpdateWithoutUserInput, UserPreferencesUncheckedUpdateWithoutUserInput>
    create: XOR<UserPreferencesCreateWithoutUserInput, UserPreferencesUncheckedCreateWithoutUserInput>
  }

  export type UserPreferencesUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    notifyOrderStatus?: BoolFieldUpdateOperationsInput | boolean
    notifyCredits?: BoolFieldUpdateOperationsInput | boolean
    notifyRechargeStatus?: BoolFieldUpdateOperationsInput | boolean
    defaultCarrier?: NullableStringFieldUpdateOperationsInput | string | null
    defaultLabelFormat?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    theme?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPreferencesUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    notifyOrderStatus?: BoolFieldUpdateOperationsInput | boolean
    notifyCredits?: BoolFieldUpdateOperationsInput | boolean
    notifyRechargeStatus?: BoolFieldUpdateOperationsInput | boolean
    defaultCarrier?: NullableStringFieldUpdateOperationsInput | string | null
    defaultLabelFormat?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    theme?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApiServerUpsertWithoutUsersInput = {
    update: XOR<ApiServerUpdateWithoutUsersInput, ApiServerUncheckedUpdateWithoutUsersInput>
    create: XOR<ApiServerCreateWithoutUsersInput, ApiServerUncheckedCreateWithoutUsersInput>
  }

  export type ApiServerUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    apiKey?: StringFieldUpdateOperationsInput | string
    activeModules?: ApiServerUpdateactiveModulesInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    actionLogs?: ActionLogUpdateManyWithoutServerNestedInput
    networks?: NetworkUpdateManyWithoutServerNestedInput
    transactions?: TransactionUpdateManyWithoutServerNestedInput
  }

  export type ApiServerUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    apiKey?: StringFieldUpdateOperationsInput | string
    activeModules?: ApiServerUpdateactiveModulesInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    actionLogs?: ActionLogUncheckedUpdateManyWithoutServerNestedInput
    networks?: NetworkUncheckedUpdateManyWithoutServerNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutServerNestedInput
  }

  export type ApiServerCreateWithoutTransactionsInput = {
    id?: string
    name: string
    ownerId: string
    apiKey: string
    activeModules?: ApiServerCreateactiveModulesInput | Enumerable<string>
    createdAt?: Date | string
    actionLogs?: ActionLogCreateNestedManyWithoutServerInput
    networks?: NetworkCreateNestedManyWithoutServerInput
    users?: UserCreateNestedManyWithoutServerInput
  }

  export type ApiServerUncheckedCreateWithoutTransactionsInput = {
    id?: string
    name: string
    ownerId: string
    apiKey: string
    activeModules?: ApiServerCreateactiveModulesInput | Enumerable<string>
    createdAt?: Date | string
    actionLogs?: ActionLogUncheckedCreateNestedManyWithoutServerInput
    networks?: NetworkUncheckedCreateNestedManyWithoutServerInput
    users?: UserUncheckedCreateNestedManyWithoutServerInput
  }

  export type ApiServerCreateOrConnectWithoutTransactionsInput = {
    where: ApiServerWhereUniqueInput
    create: XOR<ApiServerCreateWithoutTransactionsInput, ApiServerUncheckedCreateWithoutTransactionsInput>
  }

  export type UserCreateWithoutTransactionsInput = {
    id?: string
    discordId: string
    username: string
    balance?: number
    xp?: number
    level?: number
    dailyStreak?: number
    lastDaily?: Date | string | null
    hasReceivedWelcomeShipping?: boolean
    lastCoinflip?: Date | string | null
    coinflipPlaysToday?: number
    coinflipWinStreak?: number
    xpBonusPerRicarica?: number
    costoSpedizioneItalia?: number
    costoSpedizioneEuropa?: number
    scontoBonusRicarica?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    initiatedActions?: ActionLogCreateNestedManyWithoutInitiatorUserInput
    targetedActions?: ActionLogCreateNestedManyWithoutTargetUserInput
    networkMember?: NetworkMemberCreateNestedOneWithoutUserInput
    referralCodes?: ReferralCodeCreateNestedManyWithoutOwnerInput
    referredUsers?: ReferredUserCreateNestedManyWithoutUserInput
    shippingOrders?: ShippingOrderCreateNestedManyWithoutUserInput
    rechargeRequests?: RechargeRequestCreateNestedManyWithoutUserInput
    preferences?: UserPreferencesCreateNestedOneWithoutUserInput
    server: ApiServerCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutTransactionsInput = {
    id?: string
    serverId: string
    discordId: string
    username: string
    balance?: number
    xp?: number
    level?: number
    dailyStreak?: number
    lastDaily?: Date | string | null
    hasReceivedWelcomeShipping?: boolean
    lastCoinflip?: Date | string | null
    coinflipPlaysToday?: number
    coinflipWinStreak?: number
    xpBonusPerRicarica?: number
    costoSpedizioneItalia?: number
    costoSpedizioneEuropa?: number
    scontoBonusRicarica?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    initiatedActions?: ActionLogUncheckedCreateNestedManyWithoutInitiatorUserInput
    targetedActions?: ActionLogUncheckedCreateNestedManyWithoutTargetUserInput
    networkMember?: NetworkMemberUncheckedCreateNestedOneWithoutUserInput
    referralCodes?: ReferralCodeUncheckedCreateNestedManyWithoutOwnerInput
    referredUsers?: ReferredUserUncheckedCreateNestedManyWithoutUserInput
    shippingOrders?: ShippingOrderUncheckedCreateNestedManyWithoutUserInput
    rechargeRequests?: RechargeRequestUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferencesUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTransactionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
  }

  export type ApiServerUpsertWithoutTransactionsInput = {
    update: XOR<ApiServerUpdateWithoutTransactionsInput, ApiServerUncheckedUpdateWithoutTransactionsInput>
    create: XOR<ApiServerCreateWithoutTransactionsInput, ApiServerUncheckedCreateWithoutTransactionsInput>
  }

  export type ApiServerUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    apiKey?: StringFieldUpdateOperationsInput | string
    activeModules?: ApiServerUpdateactiveModulesInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    actionLogs?: ActionLogUpdateManyWithoutServerNestedInput
    networks?: NetworkUpdateManyWithoutServerNestedInput
    users?: UserUpdateManyWithoutServerNestedInput
  }

  export type ApiServerUncheckedUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    apiKey?: StringFieldUpdateOperationsInput | string
    activeModules?: ApiServerUpdateactiveModulesInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    actionLogs?: ActionLogUncheckedUpdateManyWithoutServerNestedInput
    networks?: NetworkUncheckedUpdateManyWithoutServerNestedInput
    users?: UserUncheckedUpdateManyWithoutServerNestedInput
  }

  export type UserUpsertWithoutTransactionsInput = {
    update: XOR<UserUpdateWithoutTransactionsInput, UserUncheckedUpdateWithoutTransactionsInput>
    create: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
  }

  export type UserUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    discordId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    dailyStreak?: IntFieldUpdateOperationsInput | number
    lastDaily?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasReceivedWelcomeShipping?: BoolFieldUpdateOperationsInput | boolean
    lastCoinflip?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coinflipPlaysToday?: IntFieldUpdateOperationsInput | number
    coinflipWinStreak?: IntFieldUpdateOperationsInput | number
    xpBonusPerRicarica?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneItalia?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneEuropa?: FloatFieldUpdateOperationsInput | number
    scontoBonusRicarica?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initiatedActions?: ActionLogUpdateManyWithoutInitiatorUserNestedInput
    targetedActions?: ActionLogUpdateManyWithoutTargetUserNestedInput
    networkMember?: NetworkMemberUpdateOneWithoutUserNestedInput
    referralCodes?: ReferralCodeUpdateManyWithoutOwnerNestedInput
    referredUsers?: ReferredUserUpdateManyWithoutUserNestedInput
    shippingOrders?: ShippingOrderUpdateManyWithoutUserNestedInput
    rechargeRequests?: RechargeRequestUpdateManyWithoutUserNestedInput
    preferences?: UserPreferencesUpdateOneWithoutUserNestedInput
    server?: ApiServerUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    discordId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    dailyStreak?: IntFieldUpdateOperationsInput | number
    lastDaily?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasReceivedWelcomeShipping?: BoolFieldUpdateOperationsInput | boolean
    lastCoinflip?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coinflipPlaysToday?: IntFieldUpdateOperationsInput | number
    coinflipWinStreak?: IntFieldUpdateOperationsInput | number
    xpBonusPerRicarica?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneItalia?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneEuropa?: FloatFieldUpdateOperationsInput | number
    scontoBonusRicarica?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initiatedActions?: ActionLogUncheckedUpdateManyWithoutInitiatorUserNestedInput
    targetedActions?: ActionLogUncheckedUpdateManyWithoutTargetUserNestedInput
    networkMember?: NetworkMemberUncheckedUpdateOneWithoutUserNestedInput
    referralCodes?: ReferralCodeUncheckedUpdateManyWithoutOwnerNestedInput
    referredUsers?: ReferredUserUncheckedUpdateManyWithoutUserNestedInput
    shippingOrders?: ShippingOrderUncheckedUpdateManyWithoutUserNestedInput
    rechargeRequests?: RechargeRequestUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferencesUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutReferralCodesInput = {
    id?: string
    discordId: string
    username: string
    balance?: number
    xp?: number
    level?: number
    dailyStreak?: number
    lastDaily?: Date | string | null
    hasReceivedWelcomeShipping?: boolean
    lastCoinflip?: Date | string | null
    coinflipPlaysToday?: number
    coinflipWinStreak?: number
    xpBonusPerRicarica?: number
    costoSpedizioneItalia?: number
    costoSpedizioneEuropa?: number
    scontoBonusRicarica?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    initiatedActions?: ActionLogCreateNestedManyWithoutInitiatorUserInput
    targetedActions?: ActionLogCreateNestedManyWithoutTargetUserInput
    networkMember?: NetworkMemberCreateNestedOneWithoutUserInput
    referredUsers?: ReferredUserCreateNestedManyWithoutUserInput
    shippingOrders?: ShippingOrderCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    rechargeRequests?: RechargeRequestCreateNestedManyWithoutUserInput
    preferences?: UserPreferencesCreateNestedOneWithoutUserInput
    server: ApiServerCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutReferralCodesInput = {
    id?: string
    serverId: string
    discordId: string
    username: string
    balance?: number
    xp?: number
    level?: number
    dailyStreak?: number
    lastDaily?: Date | string | null
    hasReceivedWelcomeShipping?: boolean
    lastCoinflip?: Date | string | null
    coinflipPlaysToday?: number
    coinflipWinStreak?: number
    xpBonusPerRicarica?: number
    costoSpedizioneItalia?: number
    costoSpedizioneEuropa?: number
    scontoBonusRicarica?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    initiatedActions?: ActionLogUncheckedCreateNestedManyWithoutInitiatorUserInput
    targetedActions?: ActionLogUncheckedCreateNestedManyWithoutTargetUserInput
    networkMember?: NetworkMemberUncheckedCreateNestedOneWithoutUserInput
    referredUsers?: ReferredUserUncheckedCreateNestedManyWithoutUserInput
    shippingOrders?: ShippingOrderUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    rechargeRequests?: RechargeRequestUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferencesUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReferralCodesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReferralCodesInput, UserUncheckedCreateWithoutReferralCodesInput>
  }

  export type ReferredUserCreateWithoutReferralCodeInput = {
    id?: string
    referralBonusGiven?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutReferredUsersInput
  }

  export type ReferredUserUncheckedCreateWithoutReferralCodeInput = {
    id?: string
    userId: string
    referralBonusGiven?: boolean
    createdAt?: Date | string
  }

  export type ReferredUserCreateOrConnectWithoutReferralCodeInput = {
    where: ReferredUserWhereUniqueInput
    create: XOR<ReferredUserCreateWithoutReferralCodeInput, ReferredUserUncheckedCreateWithoutReferralCodeInput>
  }

  export type ReferredUserCreateManyReferralCodeInputEnvelope = {
    data: Enumerable<ReferredUserCreateManyReferralCodeInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutReferralCodesInput = {
    update: XOR<UserUpdateWithoutReferralCodesInput, UserUncheckedUpdateWithoutReferralCodesInput>
    create: XOR<UserCreateWithoutReferralCodesInput, UserUncheckedCreateWithoutReferralCodesInput>
  }

  export type UserUpdateWithoutReferralCodesInput = {
    id?: StringFieldUpdateOperationsInput | string
    discordId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    dailyStreak?: IntFieldUpdateOperationsInput | number
    lastDaily?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasReceivedWelcomeShipping?: BoolFieldUpdateOperationsInput | boolean
    lastCoinflip?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coinflipPlaysToday?: IntFieldUpdateOperationsInput | number
    coinflipWinStreak?: IntFieldUpdateOperationsInput | number
    xpBonusPerRicarica?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneItalia?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneEuropa?: FloatFieldUpdateOperationsInput | number
    scontoBonusRicarica?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initiatedActions?: ActionLogUpdateManyWithoutInitiatorUserNestedInput
    targetedActions?: ActionLogUpdateManyWithoutTargetUserNestedInput
    networkMember?: NetworkMemberUpdateOneWithoutUserNestedInput
    referredUsers?: ReferredUserUpdateManyWithoutUserNestedInput
    shippingOrders?: ShippingOrderUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    rechargeRequests?: RechargeRequestUpdateManyWithoutUserNestedInput
    preferences?: UserPreferencesUpdateOneWithoutUserNestedInput
    server?: ApiServerUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutReferralCodesInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    discordId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    dailyStreak?: IntFieldUpdateOperationsInput | number
    lastDaily?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasReceivedWelcomeShipping?: BoolFieldUpdateOperationsInput | boolean
    lastCoinflip?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coinflipPlaysToday?: IntFieldUpdateOperationsInput | number
    coinflipWinStreak?: IntFieldUpdateOperationsInput | number
    xpBonusPerRicarica?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneItalia?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneEuropa?: FloatFieldUpdateOperationsInput | number
    scontoBonusRicarica?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initiatedActions?: ActionLogUncheckedUpdateManyWithoutInitiatorUserNestedInput
    targetedActions?: ActionLogUncheckedUpdateManyWithoutTargetUserNestedInput
    networkMember?: NetworkMemberUncheckedUpdateOneWithoutUserNestedInput
    referredUsers?: ReferredUserUncheckedUpdateManyWithoutUserNestedInput
    shippingOrders?: ShippingOrderUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    rechargeRequests?: RechargeRequestUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferencesUncheckedUpdateOneWithoutUserNestedInput
  }

  export type ReferredUserUpsertWithWhereUniqueWithoutReferralCodeInput = {
    where: ReferredUserWhereUniqueInput
    update: XOR<ReferredUserUpdateWithoutReferralCodeInput, ReferredUserUncheckedUpdateWithoutReferralCodeInput>
    create: XOR<ReferredUserCreateWithoutReferralCodeInput, ReferredUserUncheckedCreateWithoutReferralCodeInput>
  }

  export type ReferredUserUpdateWithWhereUniqueWithoutReferralCodeInput = {
    where: ReferredUserWhereUniqueInput
    data: XOR<ReferredUserUpdateWithoutReferralCodeInput, ReferredUserUncheckedUpdateWithoutReferralCodeInput>
  }

  export type ReferredUserUpdateManyWithWhereWithoutReferralCodeInput = {
    where: ReferredUserScalarWhereInput
    data: XOR<ReferredUserUpdateManyMutationInput, ReferredUserUncheckedUpdateManyWithoutReferredInput>
  }

  export type ReferralCodeCreateWithoutReferredInput = {
    id?: string
    serverId: string
    code: string
    createdAt?: Date | string
    owner: UserCreateNestedOneWithoutReferralCodesInput
  }

  export type ReferralCodeUncheckedCreateWithoutReferredInput = {
    id?: string
    serverId: string
    code: string
    ownerId: string
    createdAt?: Date | string
  }

  export type ReferralCodeCreateOrConnectWithoutReferredInput = {
    where: ReferralCodeWhereUniqueInput
    create: XOR<ReferralCodeCreateWithoutReferredInput, ReferralCodeUncheckedCreateWithoutReferredInput>
  }

  export type UserCreateWithoutReferredUsersInput = {
    id?: string
    discordId: string
    username: string
    balance?: number
    xp?: number
    level?: number
    dailyStreak?: number
    lastDaily?: Date | string | null
    hasReceivedWelcomeShipping?: boolean
    lastCoinflip?: Date | string | null
    coinflipPlaysToday?: number
    coinflipWinStreak?: number
    xpBonusPerRicarica?: number
    costoSpedizioneItalia?: number
    costoSpedizioneEuropa?: number
    scontoBonusRicarica?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    initiatedActions?: ActionLogCreateNestedManyWithoutInitiatorUserInput
    targetedActions?: ActionLogCreateNestedManyWithoutTargetUserInput
    networkMember?: NetworkMemberCreateNestedOneWithoutUserInput
    referralCodes?: ReferralCodeCreateNestedManyWithoutOwnerInput
    shippingOrders?: ShippingOrderCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    rechargeRequests?: RechargeRequestCreateNestedManyWithoutUserInput
    preferences?: UserPreferencesCreateNestedOneWithoutUserInput
    server: ApiServerCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutReferredUsersInput = {
    id?: string
    serverId: string
    discordId: string
    username: string
    balance?: number
    xp?: number
    level?: number
    dailyStreak?: number
    lastDaily?: Date | string | null
    hasReceivedWelcomeShipping?: boolean
    lastCoinflip?: Date | string | null
    coinflipPlaysToday?: number
    coinflipWinStreak?: number
    xpBonusPerRicarica?: number
    costoSpedizioneItalia?: number
    costoSpedizioneEuropa?: number
    scontoBonusRicarica?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    initiatedActions?: ActionLogUncheckedCreateNestedManyWithoutInitiatorUserInput
    targetedActions?: ActionLogUncheckedCreateNestedManyWithoutTargetUserInput
    networkMember?: NetworkMemberUncheckedCreateNestedOneWithoutUserInput
    referralCodes?: ReferralCodeUncheckedCreateNestedManyWithoutOwnerInput
    shippingOrders?: ShippingOrderUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    rechargeRequests?: RechargeRequestUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferencesUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReferredUsersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReferredUsersInput, UserUncheckedCreateWithoutReferredUsersInput>
  }

  export type ReferralCodeUpsertWithoutReferredInput = {
    update: XOR<ReferralCodeUpdateWithoutReferredInput, ReferralCodeUncheckedUpdateWithoutReferredInput>
    create: XOR<ReferralCodeCreateWithoutReferredInput, ReferralCodeUncheckedCreateWithoutReferredInput>
  }

  export type ReferralCodeUpdateWithoutReferredInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutReferralCodesNestedInput
  }

  export type ReferralCodeUncheckedUpdateWithoutReferredInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutReferredUsersInput = {
    update: XOR<UserUpdateWithoutReferredUsersInput, UserUncheckedUpdateWithoutReferredUsersInput>
    create: XOR<UserCreateWithoutReferredUsersInput, UserUncheckedCreateWithoutReferredUsersInput>
  }

  export type UserUpdateWithoutReferredUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    discordId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    dailyStreak?: IntFieldUpdateOperationsInput | number
    lastDaily?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasReceivedWelcomeShipping?: BoolFieldUpdateOperationsInput | boolean
    lastCoinflip?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coinflipPlaysToday?: IntFieldUpdateOperationsInput | number
    coinflipWinStreak?: IntFieldUpdateOperationsInput | number
    xpBonusPerRicarica?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneItalia?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneEuropa?: FloatFieldUpdateOperationsInput | number
    scontoBonusRicarica?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initiatedActions?: ActionLogUpdateManyWithoutInitiatorUserNestedInput
    targetedActions?: ActionLogUpdateManyWithoutTargetUserNestedInput
    networkMember?: NetworkMemberUpdateOneWithoutUserNestedInput
    referralCodes?: ReferralCodeUpdateManyWithoutOwnerNestedInput
    shippingOrders?: ShippingOrderUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    rechargeRequests?: RechargeRequestUpdateManyWithoutUserNestedInput
    preferences?: UserPreferencesUpdateOneWithoutUserNestedInput
    server?: ApiServerUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutReferredUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    discordId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    dailyStreak?: IntFieldUpdateOperationsInput | number
    lastDaily?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasReceivedWelcomeShipping?: BoolFieldUpdateOperationsInput | boolean
    lastCoinflip?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coinflipPlaysToday?: IntFieldUpdateOperationsInput | number
    coinflipWinStreak?: IntFieldUpdateOperationsInput | number
    xpBonusPerRicarica?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneItalia?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneEuropa?: FloatFieldUpdateOperationsInput | number
    scontoBonusRicarica?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initiatedActions?: ActionLogUncheckedUpdateManyWithoutInitiatorUserNestedInput
    targetedActions?: ActionLogUncheckedUpdateManyWithoutTargetUserNestedInput
    networkMember?: NetworkMemberUncheckedUpdateOneWithoutUserNestedInput
    referralCodes?: ReferralCodeUncheckedUpdateManyWithoutOwnerNestedInput
    shippingOrders?: ShippingOrderUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    rechargeRequests?: RechargeRequestUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferencesUncheckedUpdateOneWithoutUserNestedInput
  }

  export type ApiServerCreateWithoutNetworksInput = {
    id?: string
    name: string
    ownerId: string
    apiKey: string
    activeModules?: ApiServerCreateactiveModulesInput | Enumerable<string>
    createdAt?: Date | string
    actionLogs?: ActionLogCreateNestedManyWithoutServerInput
    transactions?: TransactionCreateNestedManyWithoutServerInput
    users?: UserCreateNestedManyWithoutServerInput
  }

  export type ApiServerUncheckedCreateWithoutNetworksInput = {
    id?: string
    name: string
    ownerId: string
    apiKey: string
    activeModules?: ApiServerCreateactiveModulesInput | Enumerable<string>
    createdAt?: Date | string
    actionLogs?: ActionLogUncheckedCreateNestedManyWithoutServerInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutServerInput
    users?: UserUncheckedCreateNestedManyWithoutServerInput
  }

  export type ApiServerCreateOrConnectWithoutNetworksInput = {
    where: ApiServerWhereUniqueInput
    create: XOR<ApiServerCreateWithoutNetworksInput, ApiServerUncheckedCreateWithoutNetworksInput>
  }

  export type NetworkMemberCreateWithoutNetworkInput = {
    joinDate?: Date | string
    user: UserCreateNestedOneWithoutNetworkMemberInput
  }

  export type NetworkMemberUncheckedCreateWithoutNetworkInput = {
    userId: string
    joinDate?: Date | string
  }

  export type NetworkMemberCreateOrConnectWithoutNetworkInput = {
    where: NetworkMemberWhereUniqueInput
    create: XOR<NetworkMemberCreateWithoutNetworkInput, NetworkMemberUncheckedCreateWithoutNetworkInput>
  }

  export type NetworkMemberCreateManyNetworkInputEnvelope = {
    data: Enumerable<NetworkMemberCreateManyNetworkInput>
    skipDuplicates?: boolean
  }

  export type ApiServerUpsertWithoutNetworksInput = {
    update: XOR<ApiServerUpdateWithoutNetworksInput, ApiServerUncheckedUpdateWithoutNetworksInput>
    create: XOR<ApiServerCreateWithoutNetworksInput, ApiServerUncheckedCreateWithoutNetworksInput>
  }

  export type ApiServerUpdateWithoutNetworksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    apiKey?: StringFieldUpdateOperationsInput | string
    activeModules?: ApiServerUpdateactiveModulesInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    actionLogs?: ActionLogUpdateManyWithoutServerNestedInput
    transactions?: TransactionUpdateManyWithoutServerNestedInput
    users?: UserUpdateManyWithoutServerNestedInput
  }

  export type ApiServerUncheckedUpdateWithoutNetworksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    apiKey?: StringFieldUpdateOperationsInput | string
    activeModules?: ApiServerUpdateactiveModulesInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    actionLogs?: ActionLogUncheckedUpdateManyWithoutServerNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutServerNestedInput
    users?: UserUncheckedUpdateManyWithoutServerNestedInput
  }

  export type NetworkMemberUpsertWithWhereUniqueWithoutNetworkInput = {
    where: NetworkMemberWhereUniqueInput
    update: XOR<NetworkMemberUpdateWithoutNetworkInput, NetworkMemberUncheckedUpdateWithoutNetworkInput>
    create: XOR<NetworkMemberCreateWithoutNetworkInput, NetworkMemberUncheckedCreateWithoutNetworkInput>
  }

  export type NetworkMemberUpdateWithWhereUniqueWithoutNetworkInput = {
    where: NetworkMemberWhereUniqueInput
    data: XOR<NetworkMemberUpdateWithoutNetworkInput, NetworkMemberUncheckedUpdateWithoutNetworkInput>
  }

  export type NetworkMemberUpdateManyWithWhereWithoutNetworkInput = {
    where: NetworkMemberScalarWhereInput
    data: XOR<NetworkMemberUpdateManyMutationInput, NetworkMemberUncheckedUpdateManyWithoutMembersInput>
  }

  export type NetworkMemberScalarWhereInput = {
    AND?: Enumerable<NetworkMemberScalarWhereInput>
    OR?: Enumerable<NetworkMemberScalarWhereInput>
    NOT?: Enumerable<NetworkMemberScalarWhereInput>
    networkId?: StringFilter | string
    userId?: StringFilter | string
    joinDate?: DateTimeFilter | Date | string
  }

  export type NetworkCreateWithoutMembersInput = {
    id?: string
    name: string
    leaderId: string
    bankBalance?: number
    level?: number
    roleId?: string | null
    logChannelId?: string | null
    status?: string
    disbandRequestAt?: Date | string | null
    server: ApiServerCreateNestedOneWithoutNetworksInput
  }

  export type NetworkUncheckedCreateWithoutMembersInput = {
    id?: string
    serverId: string
    name: string
    leaderId: string
    bankBalance?: number
    level?: number
    roleId?: string | null
    logChannelId?: string | null
    status?: string
    disbandRequestAt?: Date | string | null
  }

  export type NetworkCreateOrConnectWithoutMembersInput = {
    where: NetworkWhereUniqueInput
    create: XOR<NetworkCreateWithoutMembersInput, NetworkUncheckedCreateWithoutMembersInput>
  }

  export type UserCreateWithoutNetworkMemberInput = {
    id?: string
    discordId: string
    username: string
    balance?: number
    xp?: number
    level?: number
    dailyStreak?: number
    lastDaily?: Date | string | null
    hasReceivedWelcomeShipping?: boolean
    lastCoinflip?: Date | string | null
    coinflipPlaysToday?: number
    coinflipWinStreak?: number
    xpBonusPerRicarica?: number
    costoSpedizioneItalia?: number
    costoSpedizioneEuropa?: number
    scontoBonusRicarica?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    initiatedActions?: ActionLogCreateNestedManyWithoutInitiatorUserInput
    targetedActions?: ActionLogCreateNestedManyWithoutTargetUserInput
    referralCodes?: ReferralCodeCreateNestedManyWithoutOwnerInput
    referredUsers?: ReferredUserCreateNestedManyWithoutUserInput
    shippingOrders?: ShippingOrderCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    rechargeRequests?: RechargeRequestCreateNestedManyWithoutUserInput
    preferences?: UserPreferencesCreateNestedOneWithoutUserInput
    server: ApiServerCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutNetworkMemberInput = {
    id?: string
    serverId: string
    discordId: string
    username: string
    balance?: number
    xp?: number
    level?: number
    dailyStreak?: number
    lastDaily?: Date | string | null
    hasReceivedWelcomeShipping?: boolean
    lastCoinflip?: Date | string | null
    coinflipPlaysToday?: number
    coinflipWinStreak?: number
    xpBonusPerRicarica?: number
    costoSpedizioneItalia?: number
    costoSpedizioneEuropa?: number
    scontoBonusRicarica?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    initiatedActions?: ActionLogUncheckedCreateNestedManyWithoutInitiatorUserInput
    targetedActions?: ActionLogUncheckedCreateNestedManyWithoutTargetUserInput
    referralCodes?: ReferralCodeUncheckedCreateNestedManyWithoutOwnerInput
    referredUsers?: ReferredUserUncheckedCreateNestedManyWithoutUserInput
    shippingOrders?: ShippingOrderUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    rechargeRequests?: RechargeRequestUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferencesUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNetworkMemberInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNetworkMemberInput, UserUncheckedCreateWithoutNetworkMemberInput>
  }

  export type NetworkUpsertWithoutMembersInput = {
    update: XOR<NetworkUpdateWithoutMembersInput, NetworkUncheckedUpdateWithoutMembersInput>
    create: XOR<NetworkCreateWithoutMembersInput, NetworkUncheckedCreateWithoutMembersInput>
  }

  export type NetworkUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    leaderId?: StringFieldUpdateOperationsInput | string
    bankBalance?: FloatFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    logChannelId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    disbandRequestAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    server?: ApiServerUpdateOneRequiredWithoutNetworksNestedInput
  }

  export type NetworkUncheckedUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    leaderId?: StringFieldUpdateOperationsInput | string
    bankBalance?: FloatFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    logChannelId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    disbandRequestAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUpsertWithoutNetworkMemberInput = {
    update: XOR<UserUpdateWithoutNetworkMemberInput, UserUncheckedUpdateWithoutNetworkMemberInput>
    create: XOR<UserCreateWithoutNetworkMemberInput, UserUncheckedCreateWithoutNetworkMemberInput>
  }

  export type UserUpdateWithoutNetworkMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    discordId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    dailyStreak?: IntFieldUpdateOperationsInput | number
    lastDaily?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasReceivedWelcomeShipping?: BoolFieldUpdateOperationsInput | boolean
    lastCoinflip?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coinflipPlaysToday?: IntFieldUpdateOperationsInput | number
    coinflipWinStreak?: IntFieldUpdateOperationsInput | number
    xpBonusPerRicarica?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneItalia?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneEuropa?: FloatFieldUpdateOperationsInput | number
    scontoBonusRicarica?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initiatedActions?: ActionLogUpdateManyWithoutInitiatorUserNestedInput
    targetedActions?: ActionLogUpdateManyWithoutTargetUserNestedInput
    referralCodes?: ReferralCodeUpdateManyWithoutOwnerNestedInput
    referredUsers?: ReferredUserUpdateManyWithoutUserNestedInput
    shippingOrders?: ShippingOrderUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    rechargeRequests?: RechargeRequestUpdateManyWithoutUserNestedInput
    preferences?: UserPreferencesUpdateOneWithoutUserNestedInput
    server?: ApiServerUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutNetworkMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    discordId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    dailyStreak?: IntFieldUpdateOperationsInput | number
    lastDaily?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasReceivedWelcomeShipping?: BoolFieldUpdateOperationsInput | boolean
    lastCoinflip?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coinflipPlaysToday?: IntFieldUpdateOperationsInput | number
    coinflipWinStreak?: IntFieldUpdateOperationsInput | number
    xpBonusPerRicarica?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneItalia?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneEuropa?: FloatFieldUpdateOperationsInput | number
    scontoBonusRicarica?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initiatedActions?: ActionLogUncheckedUpdateManyWithoutInitiatorUserNestedInput
    targetedActions?: ActionLogUncheckedUpdateManyWithoutTargetUserNestedInput
    referralCodes?: ReferralCodeUncheckedUpdateManyWithoutOwnerNestedInput
    referredUsers?: ReferredUserUncheckedUpdateManyWithoutUserNestedInput
    shippingOrders?: ShippingOrderUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    rechargeRequests?: RechargeRequestUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferencesUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutShippingOrdersInput = {
    id?: string
    discordId: string
    username: string
    balance?: number
    xp?: number
    level?: number
    dailyStreak?: number
    lastDaily?: Date | string | null
    hasReceivedWelcomeShipping?: boolean
    lastCoinflip?: Date | string | null
    coinflipPlaysToday?: number
    coinflipWinStreak?: number
    xpBonusPerRicarica?: number
    costoSpedizioneItalia?: number
    costoSpedizioneEuropa?: number
    scontoBonusRicarica?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    initiatedActions?: ActionLogCreateNestedManyWithoutInitiatorUserInput
    targetedActions?: ActionLogCreateNestedManyWithoutTargetUserInput
    networkMember?: NetworkMemberCreateNestedOneWithoutUserInput
    referralCodes?: ReferralCodeCreateNestedManyWithoutOwnerInput
    referredUsers?: ReferredUserCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    rechargeRequests?: RechargeRequestCreateNestedManyWithoutUserInput
    preferences?: UserPreferencesCreateNestedOneWithoutUserInput
    server: ApiServerCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutShippingOrdersInput = {
    id?: string
    serverId: string
    discordId: string
    username: string
    balance?: number
    xp?: number
    level?: number
    dailyStreak?: number
    lastDaily?: Date | string | null
    hasReceivedWelcomeShipping?: boolean
    lastCoinflip?: Date | string | null
    coinflipPlaysToday?: number
    coinflipWinStreak?: number
    xpBonusPerRicarica?: number
    costoSpedizioneItalia?: number
    costoSpedizioneEuropa?: number
    scontoBonusRicarica?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    initiatedActions?: ActionLogUncheckedCreateNestedManyWithoutInitiatorUserInput
    targetedActions?: ActionLogUncheckedCreateNestedManyWithoutTargetUserInput
    networkMember?: NetworkMemberUncheckedCreateNestedOneWithoutUserInput
    referralCodes?: ReferralCodeUncheckedCreateNestedManyWithoutOwnerInput
    referredUsers?: ReferredUserUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    rechargeRequests?: RechargeRequestUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferencesUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutShippingOrdersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutShippingOrdersInput, UserUncheckedCreateWithoutShippingOrdersInput>
  }

  export type UserUpsertWithoutShippingOrdersInput = {
    update: XOR<UserUpdateWithoutShippingOrdersInput, UserUncheckedUpdateWithoutShippingOrdersInput>
    create: XOR<UserCreateWithoutShippingOrdersInput, UserUncheckedCreateWithoutShippingOrdersInput>
  }

  export type UserUpdateWithoutShippingOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    discordId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    dailyStreak?: IntFieldUpdateOperationsInput | number
    lastDaily?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasReceivedWelcomeShipping?: BoolFieldUpdateOperationsInput | boolean
    lastCoinflip?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coinflipPlaysToday?: IntFieldUpdateOperationsInput | number
    coinflipWinStreak?: IntFieldUpdateOperationsInput | number
    xpBonusPerRicarica?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneItalia?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneEuropa?: FloatFieldUpdateOperationsInput | number
    scontoBonusRicarica?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initiatedActions?: ActionLogUpdateManyWithoutInitiatorUserNestedInput
    targetedActions?: ActionLogUpdateManyWithoutTargetUserNestedInput
    networkMember?: NetworkMemberUpdateOneWithoutUserNestedInput
    referralCodes?: ReferralCodeUpdateManyWithoutOwnerNestedInput
    referredUsers?: ReferredUserUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    rechargeRequests?: RechargeRequestUpdateManyWithoutUserNestedInput
    preferences?: UserPreferencesUpdateOneWithoutUserNestedInput
    server?: ApiServerUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutShippingOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    discordId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    dailyStreak?: IntFieldUpdateOperationsInput | number
    lastDaily?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasReceivedWelcomeShipping?: BoolFieldUpdateOperationsInput | boolean
    lastCoinflip?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coinflipPlaysToday?: IntFieldUpdateOperationsInput | number
    coinflipWinStreak?: IntFieldUpdateOperationsInput | number
    xpBonusPerRicarica?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneItalia?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneEuropa?: FloatFieldUpdateOperationsInput | number
    scontoBonusRicarica?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initiatedActions?: ActionLogUncheckedUpdateManyWithoutInitiatorUserNestedInput
    targetedActions?: ActionLogUncheckedUpdateManyWithoutTargetUserNestedInput
    networkMember?: NetworkMemberUncheckedUpdateOneWithoutUserNestedInput
    referralCodes?: ReferralCodeUncheckedUpdateManyWithoutOwnerNestedInput
    referredUsers?: ReferredUserUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    rechargeRequests?: RechargeRequestUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferencesUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutRechargeRequestsInput = {
    id?: string
    discordId: string
    username: string
    balance?: number
    xp?: number
    level?: number
    dailyStreak?: number
    lastDaily?: Date | string | null
    hasReceivedWelcomeShipping?: boolean
    lastCoinflip?: Date | string | null
    coinflipPlaysToday?: number
    coinflipWinStreak?: number
    xpBonusPerRicarica?: number
    costoSpedizioneItalia?: number
    costoSpedizioneEuropa?: number
    scontoBonusRicarica?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    initiatedActions?: ActionLogCreateNestedManyWithoutInitiatorUserInput
    targetedActions?: ActionLogCreateNestedManyWithoutTargetUserInput
    networkMember?: NetworkMemberCreateNestedOneWithoutUserInput
    referralCodes?: ReferralCodeCreateNestedManyWithoutOwnerInput
    referredUsers?: ReferredUserCreateNestedManyWithoutUserInput
    shippingOrders?: ShippingOrderCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    preferences?: UserPreferencesCreateNestedOneWithoutUserInput
    server: ApiServerCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutRechargeRequestsInput = {
    id?: string
    serverId: string
    discordId: string
    username: string
    balance?: number
    xp?: number
    level?: number
    dailyStreak?: number
    lastDaily?: Date | string | null
    hasReceivedWelcomeShipping?: boolean
    lastCoinflip?: Date | string | null
    coinflipPlaysToday?: number
    coinflipWinStreak?: number
    xpBonusPerRicarica?: number
    costoSpedizioneItalia?: number
    costoSpedizioneEuropa?: number
    scontoBonusRicarica?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    initiatedActions?: ActionLogUncheckedCreateNestedManyWithoutInitiatorUserInput
    targetedActions?: ActionLogUncheckedCreateNestedManyWithoutTargetUserInput
    networkMember?: NetworkMemberUncheckedCreateNestedOneWithoutUserInput
    referralCodes?: ReferralCodeUncheckedCreateNestedManyWithoutOwnerInput
    referredUsers?: ReferredUserUncheckedCreateNestedManyWithoutUserInput
    shippingOrders?: ShippingOrderUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferencesUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRechargeRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRechargeRequestsInput, UserUncheckedCreateWithoutRechargeRequestsInput>
  }

  export type UserUpsertWithoutRechargeRequestsInput = {
    update: XOR<UserUpdateWithoutRechargeRequestsInput, UserUncheckedUpdateWithoutRechargeRequestsInput>
    create: XOR<UserCreateWithoutRechargeRequestsInput, UserUncheckedCreateWithoutRechargeRequestsInput>
  }

  export type UserUpdateWithoutRechargeRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    discordId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    dailyStreak?: IntFieldUpdateOperationsInput | number
    lastDaily?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasReceivedWelcomeShipping?: BoolFieldUpdateOperationsInput | boolean
    lastCoinflip?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coinflipPlaysToday?: IntFieldUpdateOperationsInput | number
    coinflipWinStreak?: IntFieldUpdateOperationsInput | number
    xpBonusPerRicarica?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneItalia?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneEuropa?: FloatFieldUpdateOperationsInput | number
    scontoBonusRicarica?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initiatedActions?: ActionLogUpdateManyWithoutInitiatorUserNestedInput
    targetedActions?: ActionLogUpdateManyWithoutTargetUserNestedInput
    networkMember?: NetworkMemberUpdateOneWithoutUserNestedInput
    referralCodes?: ReferralCodeUpdateManyWithoutOwnerNestedInput
    referredUsers?: ReferredUserUpdateManyWithoutUserNestedInput
    shippingOrders?: ShippingOrderUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    preferences?: UserPreferencesUpdateOneWithoutUserNestedInput
    server?: ApiServerUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutRechargeRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    discordId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    dailyStreak?: IntFieldUpdateOperationsInput | number
    lastDaily?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasReceivedWelcomeShipping?: BoolFieldUpdateOperationsInput | boolean
    lastCoinflip?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coinflipPlaysToday?: IntFieldUpdateOperationsInput | number
    coinflipWinStreak?: IntFieldUpdateOperationsInput | number
    xpBonusPerRicarica?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneItalia?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneEuropa?: FloatFieldUpdateOperationsInput | number
    scontoBonusRicarica?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initiatedActions?: ActionLogUncheckedUpdateManyWithoutInitiatorUserNestedInput
    targetedActions?: ActionLogUncheckedUpdateManyWithoutTargetUserNestedInput
    networkMember?: NetworkMemberUncheckedUpdateOneWithoutUserNestedInput
    referralCodes?: ReferralCodeUncheckedUpdateManyWithoutOwnerNestedInput
    referredUsers?: ReferredUserUncheckedUpdateManyWithoutUserNestedInput
    shippingOrders?: ShippingOrderUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferencesUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutPreferencesInput = {
    id?: string
    discordId: string
    username: string
    balance?: number
    xp?: number
    level?: number
    dailyStreak?: number
    lastDaily?: Date | string | null
    hasReceivedWelcomeShipping?: boolean
    lastCoinflip?: Date | string | null
    coinflipPlaysToday?: number
    coinflipWinStreak?: number
    xpBonusPerRicarica?: number
    costoSpedizioneItalia?: number
    costoSpedizioneEuropa?: number
    scontoBonusRicarica?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    initiatedActions?: ActionLogCreateNestedManyWithoutInitiatorUserInput
    targetedActions?: ActionLogCreateNestedManyWithoutTargetUserInput
    networkMember?: NetworkMemberCreateNestedOneWithoutUserInput
    referralCodes?: ReferralCodeCreateNestedManyWithoutOwnerInput
    referredUsers?: ReferredUserCreateNestedManyWithoutUserInput
    shippingOrders?: ShippingOrderCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    rechargeRequests?: RechargeRequestCreateNestedManyWithoutUserInput
    server: ApiServerCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutPreferencesInput = {
    id?: string
    serverId: string
    discordId: string
    username: string
    balance?: number
    xp?: number
    level?: number
    dailyStreak?: number
    lastDaily?: Date | string | null
    hasReceivedWelcomeShipping?: boolean
    lastCoinflip?: Date | string | null
    coinflipPlaysToday?: number
    coinflipWinStreak?: number
    xpBonusPerRicarica?: number
    costoSpedizioneItalia?: number
    costoSpedizioneEuropa?: number
    scontoBonusRicarica?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    initiatedActions?: ActionLogUncheckedCreateNestedManyWithoutInitiatorUserInput
    targetedActions?: ActionLogUncheckedCreateNestedManyWithoutTargetUserInput
    networkMember?: NetworkMemberUncheckedCreateNestedOneWithoutUserInput
    referralCodes?: ReferralCodeUncheckedCreateNestedManyWithoutOwnerInput
    referredUsers?: ReferredUserUncheckedCreateNestedManyWithoutUserInput
    shippingOrders?: ShippingOrderUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    rechargeRequests?: RechargeRequestUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPreferencesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPreferencesInput, UserUncheckedCreateWithoutPreferencesInput>
  }

  export type UserUpsertWithoutPreferencesInput = {
    update: XOR<UserUpdateWithoutPreferencesInput, UserUncheckedUpdateWithoutPreferencesInput>
    create: XOR<UserCreateWithoutPreferencesInput, UserUncheckedCreateWithoutPreferencesInput>
  }

  export type UserUpdateWithoutPreferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    discordId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    dailyStreak?: IntFieldUpdateOperationsInput | number
    lastDaily?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasReceivedWelcomeShipping?: BoolFieldUpdateOperationsInput | boolean
    lastCoinflip?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coinflipPlaysToday?: IntFieldUpdateOperationsInput | number
    coinflipWinStreak?: IntFieldUpdateOperationsInput | number
    xpBonusPerRicarica?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneItalia?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneEuropa?: FloatFieldUpdateOperationsInput | number
    scontoBonusRicarica?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initiatedActions?: ActionLogUpdateManyWithoutInitiatorUserNestedInput
    targetedActions?: ActionLogUpdateManyWithoutTargetUserNestedInput
    networkMember?: NetworkMemberUpdateOneWithoutUserNestedInput
    referralCodes?: ReferralCodeUpdateManyWithoutOwnerNestedInput
    referredUsers?: ReferredUserUpdateManyWithoutUserNestedInput
    shippingOrders?: ShippingOrderUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    rechargeRequests?: RechargeRequestUpdateManyWithoutUserNestedInput
    server?: ApiServerUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutPreferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    discordId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    dailyStreak?: IntFieldUpdateOperationsInput | number
    lastDaily?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasReceivedWelcomeShipping?: BoolFieldUpdateOperationsInput | boolean
    lastCoinflip?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coinflipPlaysToday?: IntFieldUpdateOperationsInput | number
    coinflipWinStreak?: IntFieldUpdateOperationsInput | number
    xpBonusPerRicarica?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneItalia?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneEuropa?: FloatFieldUpdateOperationsInput | number
    scontoBonusRicarica?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initiatedActions?: ActionLogUncheckedUpdateManyWithoutInitiatorUserNestedInput
    targetedActions?: ActionLogUncheckedUpdateManyWithoutTargetUserNestedInput
    networkMember?: NetworkMemberUncheckedUpdateOneWithoutUserNestedInput
    referralCodes?: ReferralCodeUncheckedUpdateManyWithoutOwnerNestedInput
    referredUsers?: ReferredUserUncheckedUpdateManyWithoutUserNestedInput
    shippingOrders?: ShippingOrderUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    rechargeRequests?: RechargeRequestUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ActionLogCreateManyServerInput = {
    id?: string
    initiatorUserId?: string | null
    targetUserId?: string | null
    type: string
    details: JsonNullValueInput | InputJsonValue
    isRevertable?: boolean
    revertedAt?: Date | string | null
    revertedBy?: string | null
    createdAt?: Date | string
  }

  export type NetworkCreateManyServerInput = {
    id?: string
    name: string
    leaderId: string
    bankBalance?: number
    level?: number
    roleId?: string | null
    logChannelId?: string | null
    status?: string
    disbandRequestAt?: Date | string | null
  }

  export type TransactionCreateManyServerInput = {
    id?: string
    userId: string
    type: string
    amount: number
    description: string
    networkId?: string | null
    baseAmount?: number | null
    createdAt?: Date | string
  }

  export type UserCreateManyServerInput = {
    id?: string
    discordId: string
    username: string
    balance?: number
    xp?: number
    level?: number
    dailyStreak?: number
    lastDaily?: Date | string | null
    hasReceivedWelcomeShipping?: boolean
    lastCoinflip?: Date | string | null
    coinflipPlaysToday?: number
    coinflipWinStreak?: number
    xpBonusPerRicarica?: number
    costoSpedizioneItalia?: number
    costoSpedizioneEuropa?: number
    scontoBonusRicarica?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ActionLogUpdateWithoutServerInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    details?: JsonNullValueInput | InputJsonValue
    isRevertable?: BoolFieldUpdateOperationsInput | boolean
    revertedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revertedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initiatorUser?: UserUpdateOneWithoutInitiatedActionsNestedInput
    targetUser?: UserUpdateOneWithoutTargetedActionsNestedInput
  }

  export type ActionLogUncheckedUpdateWithoutServerInput = {
    id?: StringFieldUpdateOperationsInput | string
    initiatorUserId?: NullableStringFieldUpdateOperationsInput | string | null
    targetUserId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    details?: JsonNullValueInput | InputJsonValue
    isRevertable?: BoolFieldUpdateOperationsInput | boolean
    revertedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revertedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActionLogUncheckedUpdateManyWithoutActionLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    initiatorUserId?: NullableStringFieldUpdateOperationsInput | string | null
    targetUserId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    details?: JsonNullValueInput | InputJsonValue
    isRevertable?: BoolFieldUpdateOperationsInput | boolean
    revertedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revertedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NetworkUpdateWithoutServerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    leaderId?: StringFieldUpdateOperationsInput | string
    bankBalance?: FloatFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    logChannelId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    disbandRequestAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    members?: NetworkMemberUpdateManyWithoutNetworkNestedInput
  }

  export type NetworkUncheckedUpdateWithoutServerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    leaderId?: StringFieldUpdateOperationsInput | string
    bankBalance?: FloatFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    logChannelId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    disbandRequestAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    members?: NetworkMemberUncheckedUpdateManyWithoutNetworkNestedInput
  }

  export type NetworkUncheckedUpdateManyWithoutNetworksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    leaderId?: StringFieldUpdateOperationsInput | string
    bankBalance?: FloatFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    logChannelId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    disbandRequestAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TransactionUpdateWithoutServerInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    networkId?: NullableStringFieldUpdateOperationsInput | string | null
    baseAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateWithoutServerInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    networkId?: NullableStringFieldUpdateOperationsInput | string | null
    baseAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    networkId?: NullableStringFieldUpdateOperationsInput | string | null
    baseAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutServerInput = {
    id?: StringFieldUpdateOperationsInput | string
    discordId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    dailyStreak?: IntFieldUpdateOperationsInput | number
    lastDaily?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasReceivedWelcomeShipping?: BoolFieldUpdateOperationsInput | boolean
    lastCoinflip?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coinflipPlaysToday?: IntFieldUpdateOperationsInput | number
    coinflipWinStreak?: IntFieldUpdateOperationsInput | number
    xpBonusPerRicarica?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneItalia?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneEuropa?: FloatFieldUpdateOperationsInput | number
    scontoBonusRicarica?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initiatedActions?: ActionLogUpdateManyWithoutInitiatorUserNestedInput
    targetedActions?: ActionLogUpdateManyWithoutTargetUserNestedInput
    networkMember?: NetworkMemberUpdateOneWithoutUserNestedInput
    referralCodes?: ReferralCodeUpdateManyWithoutOwnerNestedInput
    referredUsers?: ReferredUserUpdateManyWithoutUserNestedInput
    shippingOrders?: ShippingOrderUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    rechargeRequests?: RechargeRequestUpdateManyWithoutUserNestedInput
    preferences?: UserPreferencesUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutServerInput = {
    id?: StringFieldUpdateOperationsInput | string
    discordId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    dailyStreak?: IntFieldUpdateOperationsInput | number
    lastDaily?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasReceivedWelcomeShipping?: BoolFieldUpdateOperationsInput | boolean
    lastCoinflip?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coinflipPlaysToday?: IntFieldUpdateOperationsInput | number
    coinflipWinStreak?: IntFieldUpdateOperationsInput | number
    xpBonusPerRicarica?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneItalia?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneEuropa?: FloatFieldUpdateOperationsInput | number
    scontoBonusRicarica?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initiatedActions?: ActionLogUncheckedUpdateManyWithoutInitiatorUserNestedInput
    targetedActions?: ActionLogUncheckedUpdateManyWithoutTargetUserNestedInput
    networkMember?: NetworkMemberUncheckedUpdateOneWithoutUserNestedInput
    referralCodes?: ReferralCodeUncheckedUpdateManyWithoutOwnerNestedInput
    referredUsers?: ReferredUserUncheckedUpdateManyWithoutUserNestedInput
    shippingOrders?: ShippingOrderUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    rechargeRequests?: RechargeRequestUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferencesUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    discordId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    dailyStreak?: IntFieldUpdateOperationsInput | number
    lastDaily?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasReceivedWelcomeShipping?: BoolFieldUpdateOperationsInput | boolean
    lastCoinflip?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coinflipPlaysToday?: IntFieldUpdateOperationsInput | number
    coinflipWinStreak?: IntFieldUpdateOperationsInput | number
    xpBonusPerRicarica?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneItalia?: FloatFieldUpdateOperationsInput | number
    costoSpedizioneEuropa?: FloatFieldUpdateOperationsInput | number
    scontoBonusRicarica?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActionLogCreateManyInitiatorUserInput = {
    id?: string
    serverId: string
    targetUserId?: string | null
    type: string
    details: JsonNullValueInput | InputJsonValue
    isRevertable?: boolean
    revertedAt?: Date | string | null
    revertedBy?: string | null
    createdAt?: Date | string
  }

  export type ActionLogCreateManyTargetUserInput = {
    id?: string
    serverId: string
    initiatorUserId?: string | null
    type: string
    details: JsonNullValueInput | InputJsonValue
    isRevertable?: boolean
    revertedAt?: Date | string | null
    revertedBy?: string | null
    createdAt?: Date | string
  }

  export type ReferralCodeCreateManyOwnerInput = {
    id?: string
    serverId: string
    code: string
    createdAt?: Date | string
  }

  export type ReferredUserCreateManyUserInput = {
    id?: string
    serverId: string
    referredByCode: string
    referralBonusGiven?: boolean
    createdAt?: Date | string
  }

  export type ShippingOrderCreateManyUserInput = {
    id?: string
    serverId: string
    externalOrderId: string
    status?: string
    senderName: string
    senderAddress: string
    senderAddress2?: string | null
    senderZipcode: string
    senderCity: string
    senderPhone: string
    senderCountry: string
    recipientName: string
    recipientAddress: string
    recipientAddress2?: string | null
    recipientZipcode: string
    recipientCity: string
    recipientPhone: string
    recipientCountry: string
    carrier: string
    weight: string
    formatLabel?: number
    trackingId?: string | null
    trackingUrl?: string | null
    labelUrl?: string | null
    createdAt?: Date | string
    processedAt?: Date | string | null
    cost?: number | null
  }

  export type TransactionCreateManyUserInput = {
    id?: string
    serverId: string
    type: string
    amount: number
    description: string
    networkId?: string | null
    baseAmount?: number | null
    createdAt?: Date | string
  }

  export type RechargeRequestCreateManyUserInput = {
    id?: string
    serverId: string
    amount: number
    status?: string
    requestMessage?: string | null
    reviewedByUserId?: string | null
    reviewMessage?: string | null
    reviewedAt?: Date | string | null
    notificationSent?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ActionLogUpdateWithoutInitiatorUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    details?: JsonNullValueInput | InputJsonValue
    isRevertable?: BoolFieldUpdateOperationsInput | boolean
    revertedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revertedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    server?: ApiServerUpdateOneRequiredWithoutActionLogsNestedInput
    targetUser?: UserUpdateOneWithoutTargetedActionsNestedInput
  }

  export type ActionLogUncheckedUpdateWithoutInitiatorUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    targetUserId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    details?: JsonNullValueInput | InputJsonValue
    isRevertable?: BoolFieldUpdateOperationsInput | boolean
    revertedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revertedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActionLogUncheckedUpdateManyWithoutInitiatedActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    targetUserId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    details?: JsonNullValueInput | InputJsonValue
    isRevertable?: BoolFieldUpdateOperationsInput | boolean
    revertedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revertedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActionLogUpdateWithoutTargetUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    details?: JsonNullValueInput | InputJsonValue
    isRevertable?: BoolFieldUpdateOperationsInput | boolean
    revertedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revertedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initiatorUser?: UserUpdateOneWithoutInitiatedActionsNestedInput
    server?: ApiServerUpdateOneRequiredWithoutActionLogsNestedInput
  }

  export type ActionLogUncheckedUpdateWithoutTargetUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    initiatorUserId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    details?: JsonNullValueInput | InputJsonValue
    isRevertable?: BoolFieldUpdateOperationsInput | boolean
    revertedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revertedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActionLogUncheckedUpdateManyWithoutTargetedActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    initiatorUserId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    details?: JsonNullValueInput | InputJsonValue
    isRevertable?: BoolFieldUpdateOperationsInput | boolean
    revertedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revertedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferralCodeUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    referred?: ReferredUserUpdateManyWithoutReferralCodeNestedInput
  }

  export type ReferralCodeUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    referred?: ReferredUserUncheckedUpdateManyWithoutReferralCodeNestedInput
  }

  export type ReferralCodeUncheckedUpdateManyWithoutReferralCodesInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferredUserUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    referralBonusGiven?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    referralCode?: ReferralCodeUpdateOneRequiredWithoutReferredNestedInput
  }

  export type ReferredUserUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    referredByCode?: StringFieldUpdateOperationsInput | string
    referralBonusGiven?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferredUserUncheckedUpdateManyWithoutReferredUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    referredByCode?: StringFieldUpdateOperationsInput | string
    referralBonusGiven?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShippingOrderUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    externalOrderId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    senderName?: StringFieldUpdateOperationsInput | string
    senderAddress?: StringFieldUpdateOperationsInput | string
    senderAddress2?: NullableStringFieldUpdateOperationsInput | string | null
    senderZipcode?: StringFieldUpdateOperationsInput | string
    senderCity?: StringFieldUpdateOperationsInput | string
    senderPhone?: StringFieldUpdateOperationsInput | string
    senderCountry?: StringFieldUpdateOperationsInput | string
    recipientName?: StringFieldUpdateOperationsInput | string
    recipientAddress?: StringFieldUpdateOperationsInput | string
    recipientAddress2?: NullableStringFieldUpdateOperationsInput | string | null
    recipientZipcode?: StringFieldUpdateOperationsInput | string
    recipientCity?: StringFieldUpdateOperationsInput | string
    recipientPhone?: StringFieldUpdateOperationsInput | string
    recipientCountry?: StringFieldUpdateOperationsInput | string
    carrier?: StringFieldUpdateOperationsInput | string
    weight?: StringFieldUpdateOperationsInput | string
    formatLabel?: IntFieldUpdateOperationsInput | number
    trackingId?: NullableStringFieldUpdateOperationsInput | string | null
    trackingUrl?: NullableStringFieldUpdateOperationsInput | string | null
    labelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type ShippingOrderUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    externalOrderId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    senderName?: StringFieldUpdateOperationsInput | string
    senderAddress?: StringFieldUpdateOperationsInput | string
    senderAddress2?: NullableStringFieldUpdateOperationsInput | string | null
    senderZipcode?: StringFieldUpdateOperationsInput | string
    senderCity?: StringFieldUpdateOperationsInput | string
    senderPhone?: StringFieldUpdateOperationsInput | string
    senderCountry?: StringFieldUpdateOperationsInput | string
    recipientName?: StringFieldUpdateOperationsInput | string
    recipientAddress?: StringFieldUpdateOperationsInput | string
    recipientAddress2?: NullableStringFieldUpdateOperationsInput | string | null
    recipientZipcode?: StringFieldUpdateOperationsInput | string
    recipientCity?: StringFieldUpdateOperationsInput | string
    recipientPhone?: StringFieldUpdateOperationsInput | string
    recipientCountry?: StringFieldUpdateOperationsInput | string
    carrier?: StringFieldUpdateOperationsInput | string
    weight?: StringFieldUpdateOperationsInput | string
    formatLabel?: IntFieldUpdateOperationsInput | number
    trackingId?: NullableStringFieldUpdateOperationsInput | string | null
    trackingUrl?: NullableStringFieldUpdateOperationsInput | string | null
    labelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type ShippingOrderUncheckedUpdateManyWithoutShippingOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    externalOrderId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    senderName?: StringFieldUpdateOperationsInput | string
    senderAddress?: StringFieldUpdateOperationsInput | string
    senderAddress2?: NullableStringFieldUpdateOperationsInput | string | null
    senderZipcode?: StringFieldUpdateOperationsInput | string
    senderCity?: StringFieldUpdateOperationsInput | string
    senderPhone?: StringFieldUpdateOperationsInput | string
    senderCountry?: StringFieldUpdateOperationsInput | string
    recipientName?: StringFieldUpdateOperationsInput | string
    recipientAddress?: StringFieldUpdateOperationsInput | string
    recipientAddress2?: NullableStringFieldUpdateOperationsInput | string | null
    recipientZipcode?: StringFieldUpdateOperationsInput | string
    recipientCity?: StringFieldUpdateOperationsInput | string
    recipientPhone?: StringFieldUpdateOperationsInput | string
    recipientCountry?: StringFieldUpdateOperationsInput | string
    carrier?: StringFieldUpdateOperationsInput | string
    weight?: StringFieldUpdateOperationsInput | string
    formatLabel?: IntFieldUpdateOperationsInput | number
    trackingId?: NullableStringFieldUpdateOperationsInput | string | null
    trackingUrl?: NullableStringFieldUpdateOperationsInput | string | null
    labelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type TransactionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    networkId?: NullableStringFieldUpdateOperationsInput | string | null
    baseAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    server?: ApiServerUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    networkId?: NullableStringFieldUpdateOperationsInput | string | null
    baseAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RechargeRequestUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    requestMessage?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedByUserId?: NullableStringFieldUpdateOperationsInput | string | null
    reviewMessage?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RechargeRequestUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    requestMessage?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedByUserId?: NullableStringFieldUpdateOperationsInput | string | null
    reviewMessage?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RechargeRequestUncheckedUpdateManyWithoutRechargeRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    requestMessage?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedByUserId?: NullableStringFieldUpdateOperationsInput | string | null
    reviewMessage?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferredUserCreateManyReferralCodeInput = {
    id?: string
    userId: string
    referralBonusGiven?: boolean
    createdAt?: Date | string
  }

  export type ReferredUserUpdateWithoutReferralCodeInput = {
    id?: StringFieldUpdateOperationsInput | string
    referralBonusGiven?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReferredUsersNestedInput
  }

  export type ReferredUserUncheckedUpdateWithoutReferralCodeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    referralBonusGiven?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferredUserUncheckedUpdateManyWithoutReferredInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    referralBonusGiven?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NetworkMemberCreateManyNetworkInput = {
    userId: string
    joinDate?: Date | string
  }

  export type NetworkMemberUpdateWithoutNetworkInput = {
    joinDate?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNetworkMemberNestedInput
  }

  export type NetworkMemberUncheckedUpdateWithoutNetworkInput = {
    userId?: StringFieldUpdateOperationsInput | string
    joinDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NetworkMemberUncheckedUpdateManyWithoutMembersInput = {
    userId?: StringFieldUpdateOperationsInput | string
    joinDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}