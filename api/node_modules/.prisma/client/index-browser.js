
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.16.2
 * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
 */
Prisma.prismaVersion = {
  client: "4.16.2",
  engine: "4bc8b6e1b66cb932731fb1bdbbc550d1e010de81"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ApiServerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  ownerId: 'ownerId',
  apiKey: 'apiKey',
  activeModules: 'activeModules',
  createdAt: 'createdAt'
};

exports.Prisma.ActionLogScalarFieldEnum = {
  id: 'id',
  serverId: 'serverId',
  initiatorUserId: 'initiatorUserId',
  targetUserId: 'targetUserId',
  type: 'type',
  details: 'details',
  isRevertable: 'isRevertable',
  revertedAt: 'revertedAt',
  revertedBy: 'revertedBy',
  createdAt: 'createdAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  serverId: 'serverId',
  discordId: 'discordId',
  username: 'username',
  balance: 'balance',
  xp: 'xp',
  level: 'level',
  dailyStreak: 'dailyStreak',
  lastDaily: 'lastDaily',
  hasReceivedWelcomeShipping: 'hasReceivedWelcomeShipping',
  lastCoinflip: 'lastCoinflip',
  coinflipPlaysToday: 'coinflipPlaysToday',
  coinflipWinStreak: 'coinflipWinStreak',
  xpBonusPerRicarica: 'xpBonusPerRicarica',
  costoSpedizioneItalia: 'costoSpedizioneItalia',
  costoSpedizioneEuropa: 'costoSpedizioneEuropa',
  scontoBonusRicarica: 'scontoBonusRicarica',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  serverId: 'serverId',
  userId: 'userId',
  type: 'type',
  amount: 'amount',
  description: 'description',
  networkId: 'networkId',
  baseAmount: 'baseAmount',
  createdAt: 'createdAt'
};

exports.Prisma.ReferralCodeScalarFieldEnum = {
  id: 'id',
  serverId: 'serverId',
  code: 'code',
  ownerId: 'ownerId',
  createdAt: 'createdAt'
};

exports.Prisma.ReferredUserScalarFieldEnum = {
  id: 'id',
  serverId: 'serverId',
  userId: 'userId',
  referredByCode: 'referredByCode',
  referralBonusGiven: 'referralBonusGiven',
  createdAt: 'createdAt'
};

exports.Prisma.NetworkScalarFieldEnum = {
  id: 'id',
  serverId: 'serverId',
  name: 'name',
  leaderId: 'leaderId',
  bankBalance: 'bankBalance',
  level: 'level',
  roleId: 'roleId',
  logChannelId: 'logChannelId',
  status: 'status',
  disbandRequestAt: 'disbandRequestAt'
};

exports.Prisma.NetworkMemberScalarFieldEnum = {
  networkId: 'networkId',
  userId: 'userId',
  joinDate: 'joinDate'
};

exports.Prisma.DailyStatsScalarFieldEnum = {
  id: 'id',
  serverId: 'serverId',
  date: 'date',
  totalCredits: 'totalCredits',
  totalUsers: 'totalUsers',
  totalReferrals: 'totalReferrals',
  netBalance: 'netBalance',
  newUsers: 'newUsers',
  newReferrals: 'newReferrals'
};

exports.Prisma.ShippingOrderScalarFieldEnum = {
  id: 'id',
  serverId: 'serverId',
  userId: 'userId',
  externalOrderId: 'externalOrderId',
  status: 'status',
  senderName: 'senderName',
  senderAddress: 'senderAddress',
  senderAddress2: 'senderAddress2',
  senderZipcode: 'senderZipcode',
  senderCity: 'senderCity',
  senderPhone: 'senderPhone',
  senderCountry: 'senderCountry',
  recipientName: 'recipientName',
  recipientAddress: 'recipientAddress',
  recipientAddress2: 'recipientAddress2',
  recipientZipcode: 'recipientZipcode',
  recipientCity: 'recipientCity',
  recipientPhone: 'recipientPhone',
  recipientCountry: 'recipientCountry',
  carrier: 'carrier',
  weight: 'weight',
  formatLabel: 'formatLabel',
  trackingId: 'trackingId',
  trackingUrl: 'trackingUrl',
  labelUrl: 'labelUrl',
  createdAt: 'createdAt',
  processedAt: 'processedAt',
  cost: 'cost'
};

exports.Prisma.RechargeRequestScalarFieldEnum = {
  id: 'id',
  serverId: 'serverId',
  userId: 'userId',
  amount: 'amount',
  status: 'status',
  requestMessage: 'requestMessage',
  reviewedByUserId: 'reviewedByUserId',
  reviewMessage: 'reviewMessage',
  reviewedAt: 'reviewedAt',
  notificationSent: 'notificationSent',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserPreferencesScalarFieldEnum = {
  id: 'id',
  serverId: 'serverId',
  userId: 'userId',
  notifyOrderStatus: 'notifyOrderStatus',
  notifyCredits: 'notifyCredits',
  notifyRechargeStatus: 'notifyRechargeStatus',
  defaultCarrier: 'defaultCarrier',
  defaultLabelFormat: 'defaultLabelFormat',
  language: 'language',
  theme: 'theme',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  ApiServer: 'ApiServer',
  ActionLog: 'ActionLog',
  User: 'User',
  Transaction: 'Transaction',
  ReferralCode: 'ReferralCode',
  ReferredUser: 'ReferredUser',
  Network: 'Network',
  NetworkMember: 'NetworkMember',
  DailyStats: 'DailyStats',
  ShippingOrder: 'ShippingOrder',
  RechargeRequest: 'RechargeRequest',
  UserPreferences: 'UserPreferences'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
